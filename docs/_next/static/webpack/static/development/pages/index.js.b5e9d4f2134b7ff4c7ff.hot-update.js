webpackHotUpdate("static/development/pages/index.js",{

/***/ "./src/lib/chart.js":
/*!**************************!*\
  !*** ./src/lib/chart.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ \"./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inherits */ \"./node_modules/@babel/runtime/helpers/esm/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var topojson_client__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! topojson-client */ \"./node_modules/topojson-client/index.js\");\n/* harmony import */ var _reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @reuters-graphics/graphics-atlas-client */ \"./node_modules/@reuters-graphics/graphics-atlas-client/dist/index.js\");\n/* harmony import */ var _reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _base_ChartComponent__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./base/ChartComponent */ \"./src/lib/base/ChartComponent.js\");\n/* harmony import */ var _utils_d3__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/d3 */ \"./src/lib/utils/d3.js\");\n/* harmony import */ var d3_geo_voronoi__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! d3-geo-voronoi */ \"./node_modules/d3-geo-voronoi/index.js\");\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\n\nvar Atlas = new _reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_8___default.a(); // import topology from '@reuters-graphics/graphics-atlas-client/topojson/global.110m.json';\n\nvar GlobalRateMap = /*#__PURE__*/function (_ChartComponent) {\n  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(GlobalRateMap, _ChartComponent);\n\n  var _super = _createSuper(GlobalRateMap);\n\n  function GlobalRateMap() {\n    var _this;\n\n    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, GlobalRateMap);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_this), \"defaultProps\", {\n      map_stroke_width: 1,\n      map_stroke_color: '#2f353f',\n      map_highlight_stroke_width: 1.2,\n      map_fill: 'rgba(153,153,153,0.25)',\n      map_stroke_color_active: 'rgba(255, 255, 255, 0.75)',\n      spike_color: '#eec331',\n      heightRatio: function heightRatio(width, breakpoint) {\n        return width < breakpoint ? 0.8 : 0.5;\n      },\n      geo: false,\n      locale: 'en',\n      map_custom_projections: {\n        clip_box: [[-130, 70], [194, -39]],\n        projection: 'geoNaturalEarth1',\n        center: null,\n        scale: null,\n        rotate: null\n      },\n      hover_gap: 12.5,\n      spike_height: 35,\n      spike_size: 3.5,\n      getDataRange: function getDataRange(width) {\n        return {\n          min: 0,\n          max: 1\n        };\n      },\n      spike_stroke_width: 0.5,\n      spike_highlight_stroke_width: 2,\n      spike_highlight_fill: true,\n      spike_color_scale: _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].scaleThreshold() // Can use a scale as a prop!\n      .domain([0.75, 0.9]).range(['#ccc', '#f68e26', '#de2d26']),\n      spike_stroke_width_scale: _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].scaleThreshold() // Can use a scale as a prop!\n      .domain([0.75, 0.9]).range([0.6, 0.9, 1.1]),\n      spike_inactive_opacity: 1,\n      disputed_dasharray: [5, 3],\n      key: {\n        text: {\n          main_text: 'How close is the current weekly average to the countryâ€™s peak',\n          red_peak: '>90%',\n          orange_peak: '90 to 75%',\n          white_peak: '<75%'\n        },\n        width: 140\n      },\n      annotations: {\n        name: [],\n        value: []\n      },\n      mobile: true,\n      refBox: {\n        height: 90,\n        width: 180,\n        breakpoint: 900,\n        useWidth: function useWidth(width) {\n          return width * 2;\n        }\n      },\n      interaction: true,\n      at_peak_text: 'At peak',\n      of_peak_text: 'of peak'\n    });\n\n    return _this;\n  }\n\n  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(GlobalRateMap, [{\n    key: \"draw\",\n    value: function draw() {\n      var data = this.data();\n      var props = this.props();\n      var node = this.selection().node();\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          width = _node$getBoundingClie.width;\n\n      var ratio = props.heightRatio(width, props.refBox.breakpoint);\n      var useWidth, height;\n\n      if (width < props.refBox.breakpoint) {\n        useWidth = props.refBox.useWidth(width);\n        this.selection().classed('mobile', true);\n        height = useWidth * 0.5;\n      } else {\n        useWidth = width;\n        this.selection().classed('mobile', false);\n        height = width * ratio;\n      }\n\n      var _props$getDataRange = props.getDataRange(width),\n          filterMin = _props$getDataRange.min,\n          filterMax = _props$getDataRange.max;\n\n      var filteredData = data.filter(function (d) {\n        return d.value >= filterMin && d.value <= filterMax;\n      });\n      var scaleY = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].scaleLinear().range([0, props.spike_height]).domain([0, 1]);\n      var keyBox = this.selection().appendSelect('div.key');\n      keyBox.appendSelect('p.left-text.text-inline.key-text').html(props.key.text.main_text);\n      var keySvgContainer = keyBox.appendSelect('div.svg-container.text-inline');\n      var keyGap = props.key.width / 3; // add key box\n\n      var keySvg = keySvgContainer.appendSelect('svg.text-inline').attr('height', props.spike_height + 6).style('fill', 'none').attr('width', props.key.width - keyGap * 0.27);\n      keySvg.appendSelect('defs').appendSelect('marker.top').attr('id', 'arrow-up').attr('markerWidth', 12).attr('markerHeight', 10).attr('refY', 5).attr('refX', 6).attr('orient', 'auto').appendSelect('path.up').style('stroke', 'white').style('stroke-width', 0.6).attr('d', 'M0 0 L6 5 L0 10');\n      keySvg.select('defs').appendSelect('marker.down').attr('id', 'arrow-down').attr('markerWidth', 12).attr('markerHeight', 10).attr('refY', 5).attr('refX', 0).attr('orient', 'auto').appendSelect('path.down').style('stroke', 'white').style('stroke-width', 0.6).attr('d', 'M6 0 L0 5 L6 10'); // add spike 1\n\n      keySvg.appendSelect('path.red-spike.high').style('stroke', props.spike_color_scale(1)).attr('d', function (d) {\n        var obj = [keyGap * 0.7, props.spike_height];\n        var value = scaleY(1);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('path.red-spike.low').style('stroke', props.spike_color_scale(0.9)).style('fill', props.spike_color_scale(0.9)).attr('d', function (d) {\n        var obj = [keyGap * 0.7 + props.spike_size * 1.4, props.spike_height];\n        var value = scaleY(0.9);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('path.orange-spike.high').style('stroke', props.spike_color_scale(0.89)).attr('d', function (d, i) {\n        var obj = [keyGap * 1.5, props.spike_height];\n        var value = scaleY(0.89);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('path.orange-spike.low').style('stroke', props.spike_color_scale(0.75)).style('fill', props.spike_color_scale(0.75)).attr('d', function (d) {\n        var obj = [keyGap * 1.5 + props.spike_size * 1.4, props.spike_height];\n        var value = scaleY(0.75);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('path.white-spike.high').style('stroke', props.spike_color_scale(0.74)).attr('d', function (d, i) {\n        var obj = [keyGap * 2.3, props.spike_height];\n        var value = scaleY(0.74);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('path.white-spike.low').style('stroke', '#ccc').style('fill', '#ccc').attr('d', function (d, i) {\n        var obj = [keyGap * 2.3 + props.spike_size * 1.4, props.spike_height];\n        var value = scaleY(0);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('line').style('stroke', 'white').style('stroke-width', .7).attr('x1', 10).attr('x2', 10).attr('y1', 7).attr('y1', props.spike_height).attr('marker-end', 'url(#arrow-up)').attr('marker-start', 'url(#arrow-down)');\n      var bottomKeyText = keySvgContainer.appendSelect('div.bottom-text').style('padding-left', \"\".concat(keyGap * 0.4, \"px\"));\n      bottomKeyText.appendSelect('p.red-text.key-text.text-inline').style('width', \"\".concat(keyGap * 0.8, \"px\")).html(props.key.text.red_peak);\n      bottomKeyText.appendSelect('p.orange-text.key-text.text-inline').style('width', \"\".concat(keyGap * 0.8, \"px\")).html(props.key.text.orange_peak);\n      bottomKeyText.appendSelect('p.white-text.key-text.text-inline').style('width', \"\".concat(keyGap * 0.8, \"px\")).html(props.key.text.white_peak); // SVG begins here\n\n      var svg = this.selection().appendSelect('div.chart-container-div').style('overflow-x', 'scroll').appendSelect('svg.chart') // see docs in ./utils/d3.js\n      .attr('width', useWidth).attr('height', height);\n      var g = svg.appendSelect('g');\n\n      if (!_utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"][props.map_custom_projections.projection]) {\n        props.map_custom_projections.projection = 'geoNaturalEarth1';\n      }\n\n      var projection = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"][props.map_custom_projections.projection]();\n      var countries = topojson_client__WEBPACK_IMPORTED_MODULE_7__[\"feature\"](props.geo, props.geo.objects.countries);\n      var disputed;\n\n      if (props.geo.objects.disputedBoundaries) {\n        disputed = topojson_client__WEBPACK_IMPORTED_MODULE_7__[\"mesh\"](props.geo, props.geo.objects.disputedBoundaries);\n      }\n\n      if (props.map_custom_projections.center && props.map_custom_projections.center.length === 2) {\n        projection.center(props.map_custom_projections.center);\n      }\n\n      if (props.map_custom_projections.rotate && props.map_custom_projections.rotate.length === 2) {\n        projection.rotate(props.map_custom_projections.rotate);\n      }\n\n      var filteredCountryKeys = filteredData.map(function (d) {\n        return d.key;\n      });\n      var countryCentroids = countries.features.filter(function (c) {\n        return filteredCountryKeys.includes(c.properties.isoAlpha2);\n      }).filter(function (c) {\n        return c.properties.centroid.length == 2 && c.properties.centroid[0] && c.properties.centroid[1];\n      }).map(function (_ref) {\n        var properties = _ref.properties;\n        return {\n          type: 'Feature',\n          properties: properties,\n          geometry: {\n            type: 'Point',\n            coordinates: properties.centroid\n          }\n        };\n      }); // Adding some points in the ocean to create voronoi spaces that will\n      // reset the map, so as your cursor traces land masses, you get highlights,\n      // but in the ocean you can see the whole world picture...\n\n      var resetPoints = [[-40.248108, 38.653788], // North Atlantic\n      [-29.800018, 14.536220], // Central Atlantic\n      [-15.485548, -12.941648], // South Atlantic\n      [-174.808659, 35.856127], // North Pacific\n      [-117.324414, -11.130821], // South Pacific\n      [-173.039131, -44.920697], // Southwest pacific\n      [64.407024, 5.045815], // North Indian\n      [75.569128, -31.691939], // South Indian\n      [-5.783266, -83.608077] // Antarctica\n      ];\n      var voronoiCentroids = countryCentroids.concat(resetPoints.map(function (centroid) {\n        return {\n          type: 'Feature',\n          properties: {\n            reset: true\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: centroid\n          }\n        };\n      }));\n\n      if (props.map_custom_projections.clip_box && props.map_custom_projections.clip_box.length === 2 && props.map_custom_projections.clip_box[0].length === 2 && props.map_custom_projections.clip_box[1].length === 2) {\n        console.log('clipping! :)');\n        projection.fitSize([useWidth, height], makeRangeBox(props.map_custom_projections.clip_box));\n      } else {\n        console.log('cant clip :(');\n        projection.fitSize([useWidth, height], countries);\n      }\n\n      if (props.map_custom_projections.scale) {\n        projection.scale(props.map_custom_projections.scale);\n      }\n\n      var path = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].geoPath().projection(projection);\n      svg.selectAll('.country,.disputed,.centroid').remove();\n      var countryGroups = g.appendSelect('g.countries').style('pointer-events', 'none').style('fill', props.map_fill).selectAll('path.country').data(countries.features.filter(function (d) {\n        return d.properties.slug !== 'antarctica';\n      }), function (d) {\n        return d.properties.slug;\n      });\n      countryGroups.enter().append('path').attr('class', function (d) {\n        return \"country c-\".concat(d.properties.slug, \" level-0\");\n      }).merge(countryGroups).style('stroke', props.map_stroke_color).style('stroke-width', props.map_stroke_width).attr('d', path);\n      console.log(g.select('.countries').node().getBoundingClientRect());\n\n      if (disputed) {\n        g.appendSelect('path.disputed').attr('class', 'disputed level-0').style('pointer-events', 'none').style('stroke', props.map_stroke_color).style('stroke-width', props.map_stroke_width).style('fill', 'none').style('stroke-dasharray', props.disputed_dasharray).attr('d', path(disputed));\n      }\n\n      var sortedCentroids = countryCentroids.sort(function (a, b) {\n        var aO = filteredData.filter(function (e) {\n          return a.properties.isoAlpha2 === e.key;\n        })[0];\n        var bO = filteredData.filter(function (e) {\n          return b.properties.isoAlpha2 === e.key;\n        })[0];\n        return aO.value - bO.value;\n      });\n      sortedCentroids.forEach(function (d) {\n        var o = filteredData.filter(function (e) {\n          return d.properties.isoAlpha2 === e.key;\n        })[0];\n\n        if (o) {\n          d.value = o.value;\n        }\n      });\n      var spikeCentroids = g.appendSelect('g.spike-layer').style('pointer-events', 'none').selectAll('path.centroid').data(sortedCentroids);\n      spikeCentroids.enter().append('path').attr('class', function (d) {\n        return d.properties.slug + ' centroid';\n      }).merge(spikeCentroids).attr('d', function (d) {\n        var obj = projection(d.properties.centroid);\n        var value = scaleY(d.value);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      }).style('fill', 'none').style('stroke', function (d) {\n        return d.value ? props.spike_color_scale(d.value) : '#ccc';\n      }).style('stroke-width', function (d) {\n        return d.value ? props.spike_stroke_width_scale(d.value) : 0.5;\n      });\n      var countryVoronoiCentroids = g.appendSelect('g.voronoi').style('fill', 'none').style('cursor', props.interaction ? 'crosshair' : 'default').style('pointer-events', 'all').selectAll('path.voronoi').data(Object(d3_geo_voronoi__WEBPACK_IMPORTED_MODULE_11__[\"geoVoronoi\"])().polygons(voronoiCentroids).features);\n      countryVoronoiCentroids.enter().append('path').attr('class', function (d) {\n        return 'voronoi';\n      }).merge(countryVoronoiCentroids).attr('d', path).on('mouseover', function (d) {\n        if (props.interaction) {\n          tipOn(d);\n        }\n      }).on('mouseout', function (d) {\n        if (props.interaction) {\n          tipOff(d);\n        }\n      });\n      countryVoronoiCentroids.exit().remove();\n      var tooltip = g.appendSelect('g.text-group').style('pointer-events', 'none').append('text');\n      var annotationData = props.annotations.name.map(function (d) {\n        var c = Atlas.getCountry(d);\n        var geo = countryCentroids.filter(function (e) {\n          return e.properties.isoAlpha2 === c.isoAlpha2;\n        })[0];\n        return {\n          countryMeta: c,\n          countryGeo: geo\n        };\n      });\n      var annotationNumData = props.annotations.value.map(function (d) {\n        var c = Atlas.getCountry(d);\n        var geo = sortedCentroids.filter(function (e) {\n          return e.properties.isoAlpha2 === c.isoAlpha2;\n        })[0];\n        return {\n          countryMeta: c,\n          countryGeo: geo\n        };\n      });\n      annotationData = annotationData.filter(function (d) {\n        return d.countryMeta && d.countryGeo;\n      });\n      annotationNumData = annotationNumData.filter(function (d) {\n        return d.countryMeta && d.countryGeo;\n      });\n      var annotations = g.appendSelect('g.name-annotations').style('pointer-events', 'none').selectAll('text.annotation').data(annotationData, function (d) {\n        return d.countryMeta.isoAlpha2;\n      });\n      annotations.enter().append('text').attr('class', 'annotation').merge(annotations).attr('transform', function (d) {\n        var p = projection(d.countryGeo.geometry.coordinates);\n        return \"translate(\".concat(p[0], \",\").concat(p[1] + props.hover_gap, \")\");\n      }).text(function (d) {\n        return d.countryMeta.translations[props.locale];\n      });\n      annotations.exit().remove();\n      var annotationsNumbers = g.appendSelect('g.number-annotations').style('pointer-events', 'none').selectAll('text.annotation').data(annotationNumData);\n      annotationsNumbers.enter().append('text').attr('class', 'annotation').merge(annotationsNumbers).attr('transform', function (d) {\n        var p = projection(d.countryGeo.geometry.coordinates);\n        return \"translate(\".concat(p[0], \",\").concat(p[1] + props.hover_gap, \")\");\n      }).html(function (d) {\n        return getPeakText(d.countryGeo.value);\n      });\n      annotationsNumbers.exit().remove();\n\n      if (props.mobile && width < props.refBox.breakpoint) {\n        // Ref box at the bottom for mobile starts here\n        var land = topojson_client__WEBPACK_IMPORTED_MODULE_7__[\"feature\"](props.geo, props.geo.objects.land);\n        var refBoxContainer = this.selection().appendSelect('div.ref-box').classed('hide', false).style('text-align', 'center').style('width', \"\".concat(props.refBox.width, \"px\")).style('height', \"\".concat(props.refBox.height, \"px\"));\n        var refBox = refBoxContainer.appendSelect('svg').style('border', \"\".concat(props.map_fill, \" solid 1px\")).attr('width', props.refBox.width).attr('height', props.refBox.height);\n        var projectionRef = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].geoNaturalEarth1().fitSize([props.refBox.width, props.refBox.height], makeRangeBox(props.map_custom_projections.clip_box));\n        var pathRef = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].geoPath().projection(projectionRef);\n        refBox.appendSelect('path').attr('d', pathRef(land)).attr('fill', props.map_fill);\n        var activeWidth = width / useWidth * props.refBox.width;\n        var activeRegion = refBoxContainer.appendSelect('div').attr('class', 'active-region').style('width', \"\".concat(activeWidth, \"px\")).style('height', \"\".concat(props.refBox.height, \"px\")).call(_utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].drag().on('start.interrupt', function () {\n          activeRegion.interrupt();\n          console.log('stop');\n        }).on('start drag', function () {\n          var calcX = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].event.x - activeWidth / 2;\n\n          if (_utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].event.x <= activeWidth / 2) {\n            calcX = 0;\n          } else if (_utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].event.x >= props.refBox.width - activeWidth) {\n            console.log(_utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].event.x, props.refBox.width);\n            calcX = activeWidth;\n          }\n\n          activeRegion.style('left', calcX + 'px');\n        })); // Refbox ends here\n      } else {\n        this.selection().select('.ref-box').classed('hide', true);\n      }\n\n      function tipOn(voronoiPath) {\n        var properties = voronoiPath.properties.site.properties;\n        if (properties.reset) return;\n\n        var _filteredData$find = filteredData.find(function (e) {\n          return properties.isoAlpha2 === e.key;\n        }),\n            value = _filteredData$find.value;\n\n        if (!value && value !== filterMin) return;\n        g.selectAll('path.centroid').style('fill', 'none').style('opacity', props.spike_inactive_opacity);\n        g.selectAll('.name-annotations,.number-annotations').style('opacity', 0);\n        g.selectAll(\"path.centroid.\".concat(properties.slug)).style('opacity', 1).style('fill', function (d) {\n          return d.value ? props.spike_color_scale(d.value) : null;\n        }).classed('active', true).raise();\n        tooltip.attr('transform', function (d) {\n          var o = projection(properties.centroid);\n          return \"translate(\".concat(o[0], \",\").concat(o[1] + props.hover_gap, \")\");\n        }).style('text-anchor', 'middle').html(function (d) {\n          return \"\\n          <tspan x=\\\"0\\\" y=\\\"0\\\">\".concat(properties.translations[props.locale], \"</tspan>\\n          \").concat(getPeakText(value));\n        });\n        g.selectAll(\".country.c-\".concat(properties.slug)).classed('active', true);\n      }\n\n      function tipOff(voronoiPath) {\n        var properties = voronoiPath.properties.site.properties;\n        var country = g.selectAll(\".country.c-\".concat(properties.slug));\n        g.selectAll('path.centroid').style('opacity', 1).classed('active', false).style('fill', 'none');\n        g.selectAll('.name-annotations,.number-annotations').style('opacity', 1);\n        tooltip.html('');\n        country.classed('active', false).style('stroke', props.map_stroke_color);\n      }\n\n      function getPeakText(value) {\n        value = Math.round(value * 100);\n\n        if (value < 100 && value >= 1) {\n          return \"<tspan dy=\\\"1em\\\" x=\\\"0\\\">\".concat(value.toLocaleString(props.locale), \"%</tspan> <tspan class=\\\"smaller\\\">\").concat(props.of_peak_text, \"</tspan>\");\n        } else if (value < 1) {\n          return \"<tspan dy=\\\"1em\\\" x=\\\"0\\\"><1%</tspan> <tspan class=\\\"smaller\\\">\".concat(props.of_peak_text, \"</tspan>\");\n        } else if (value === 100) {\n          return \"<tspan dy=\\\"1em\\\" x=\\\"0\\\">\".concat(props.at_peak_text, \"</tspan>\");\n        }\n      }\n\n      return this;\n    }\n  }]);\n\n  return GlobalRateMap;\n}(_base_ChartComponent__WEBPACK_IMPORTED_MODULE_9__[\"default\"]);\n\nfunction makeRangeBox(opts) {\n  var lon0 = opts[0][0];\n  var lon1 = opts[1][0];\n  var lat0 = opts[0][1];\n  var lat1 = opts[1][1]; // to cross antimeridian w/o ambiguity\n\n  if (lon0 > 0 && lon1 < 0) {\n    lon1 += 360;\n  } // to make lat span unambiguous\n\n\n  if (lat0 > lat1) {\n    var tmp = lat0;\n    lat0 = lat1;\n    lat1 = tmp;\n  }\n\n  var dlon4 = (lon1 - lon0) / 4;\n  return {\n    type: 'Polygon',\n    coordinates: [[[lon0, lat0], [lon0, lat1], [lon0 + dlon4, lat1], [lon0 + 2 * dlon4, lat1], [lon0 + 3 * dlon4, lat1], [lon1, lat1], [lon1, lat0], [lon1 - dlon4, lat0], [lon1 - 2 * dlon4, lat0], [lon1 - 3 * dlon4, lat0], [lon0, lat0]]]\n  };\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (GlobalRateMap);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NoYXJ0LmpzPzdiYjgiXSwibmFtZXMiOlsiQXRsYXMiLCJBdGxhc01ldGFkYXRhQ2xpZW50IiwiR2xvYmFsUmF0ZU1hcCIsIm1hcF9zdHJva2Vfd2lkdGgiLCJtYXBfc3Ryb2tlX2NvbG9yIiwibWFwX2hpZ2hsaWdodF9zdHJva2Vfd2lkdGgiLCJtYXBfZmlsbCIsIm1hcF9zdHJva2VfY29sb3JfYWN0aXZlIiwic3Bpa2VfY29sb3IiLCJoZWlnaHRSYXRpbyIsIndpZHRoIiwiYnJlYWtwb2ludCIsImdlbyIsImxvY2FsZSIsIm1hcF9jdXN0b21fcHJvamVjdGlvbnMiLCJjbGlwX2JveCIsInByb2plY3Rpb24iLCJjZW50ZXIiLCJzY2FsZSIsInJvdGF0ZSIsImhvdmVyX2dhcCIsInNwaWtlX2hlaWdodCIsInNwaWtlX3NpemUiLCJnZXREYXRhUmFuZ2UiLCJtaW4iLCJtYXgiLCJzcGlrZV9zdHJva2Vfd2lkdGgiLCJzcGlrZV9oaWdobGlnaHRfc3Ryb2tlX3dpZHRoIiwic3Bpa2VfaGlnaGxpZ2h0X2ZpbGwiLCJzcGlrZV9jb2xvcl9zY2FsZSIsImQzIiwic2NhbGVUaHJlc2hvbGQiLCJkb21haW4iLCJyYW5nZSIsInNwaWtlX3N0cm9rZV93aWR0aF9zY2FsZSIsInNwaWtlX2luYWN0aXZlX29wYWNpdHkiLCJkaXNwdXRlZF9kYXNoYXJyYXkiLCJrZXkiLCJ0ZXh0IiwibWFpbl90ZXh0IiwicmVkX3BlYWsiLCJvcmFuZ2VfcGVhayIsIndoaXRlX3BlYWsiLCJhbm5vdGF0aW9ucyIsIm5hbWUiLCJ2YWx1ZSIsIm1vYmlsZSIsInJlZkJveCIsImhlaWdodCIsInVzZVdpZHRoIiwiaW50ZXJhY3Rpb24iLCJhdF9wZWFrX3RleHQiLCJvZl9wZWFrX3RleHQiLCJkYXRhIiwicHJvcHMiLCJub2RlIiwic2VsZWN0aW9uIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmF0aW8iLCJjbGFzc2VkIiwiZmlsdGVyTWluIiwiZmlsdGVyTWF4IiwiZmlsdGVyZWREYXRhIiwiZmlsdGVyIiwiZCIsInNjYWxlWSIsInNjYWxlTGluZWFyIiwia2V5Qm94IiwiYXBwZW5kU2VsZWN0IiwiaHRtbCIsImtleVN2Z0NvbnRhaW5lciIsImtleUdhcCIsImtleVN2ZyIsImF0dHIiLCJzdHlsZSIsInNlbGVjdCIsIm9iaiIsImkiLCJib3R0b21LZXlUZXh0Iiwic3ZnIiwiZyIsImNvdW50cmllcyIsInRvcG9qc29uIiwib2JqZWN0cyIsImRpc3B1dGVkIiwiZGlzcHV0ZWRCb3VuZGFyaWVzIiwibGVuZ3RoIiwiZmlsdGVyZWRDb3VudHJ5S2V5cyIsIm1hcCIsImNvdW50cnlDZW50cm9pZHMiLCJmZWF0dXJlcyIsImMiLCJpbmNsdWRlcyIsInByb3BlcnRpZXMiLCJpc29BbHBoYTIiLCJjZW50cm9pZCIsInR5cGUiLCJnZW9tZXRyeSIsImNvb3JkaW5hdGVzIiwicmVzZXRQb2ludHMiLCJ2b3Jvbm9pQ2VudHJvaWRzIiwiY29uY2F0IiwicmVzZXQiLCJjb25zb2xlIiwibG9nIiwiZml0U2l6ZSIsIm1ha2VSYW5nZUJveCIsInBhdGgiLCJnZW9QYXRoIiwic2VsZWN0QWxsIiwicmVtb3ZlIiwiY291bnRyeUdyb3VwcyIsInNsdWciLCJlbnRlciIsImFwcGVuZCIsIm1lcmdlIiwic29ydGVkQ2VudHJvaWRzIiwic29ydCIsImEiLCJiIiwiYU8iLCJlIiwiYk8iLCJmb3JFYWNoIiwibyIsInNwaWtlQ2VudHJvaWRzIiwiY291bnRyeVZvcm9ub2lDZW50cm9pZHMiLCJnZW9Wb3Jvbm9pIiwicG9seWdvbnMiLCJvbiIsInRpcE9uIiwidGlwT2ZmIiwiZXhpdCIsInRvb2x0aXAiLCJhbm5vdGF0aW9uRGF0YSIsImdldENvdW50cnkiLCJjb3VudHJ5TWV0YSIsImNvdW50cnlHZW8iLCJhbm5vdGF0aW9uTnVtRGF0YSIsInAiLCJ0cmFuc2xhdGlvbnMiLCJhbm5vdGF0aW9uc051bWJlcnMiLCJnZXRQZWFrVGV4dCIsImxhbmQiLCJyZWZCb3hDb250YWluZXIiLCJwcm9qZWN0aW9uUmVmIiwiZ2VvTmF0dXJhbEVhcnRoMSIsInBhdGhSZWYiLCJhY3RpdmVXaWR0aCIsImFjdGl2ZVJlZ2lvbiIsImNhbGwiLCJkcmFnIiwiaW50ZXJydXB0IiwiY2FsY1giLCJldmVudCIsIngiLCJ2b3Jvbm9pUGF0aCIsInNpdGUiLCJmaW5kIiwicmFpc2UiLCJjb3VudHJ5IiwiTWF0aCIsInJvdW5kIiwidG9Mb2NhbGVTdHJpbmciLCJDaGFydENvbXBvbmVudCIsIm9wdHMiLCJsb24wIiwibG9uMSIsImxhdDAiLCJsYXQxIiwidG1wIiwiZGxvbjQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLElBQU1BLEtBQUssR0FBRyxJQUFJQyw4RUFBSixFQUFkLEMsQ0FDQTs7SUFFTUMsYTs7Ozs7Ozs7Ozs7Ozs7Ozt1TkFDVztBQUNiQyxzQkFBZ0IsRUFBRSxDQURMO0FBRWJDLHNCQUFnQixFQUFFLFNBRkw7QUFHYkMsZ0NBQTBCLEVBQUUsR0FIZjtBQUliQyxjQUFRLEVBQUUsd0JBSkc7QUFLYkMsNkJBQXVCLEVBQUUsMkJBTFo7QUFNYkMsaUJBQVcsRUFBRSxTQU5BO0FBT2JDLGlCQUFXLEVBQUUscUJBQUNDLEtBQUQsRUFBUUMsVUFBUjtBQUFBLGVBQXdCRCxLQUFLLEdBQUNDLFVBQU4sR0FBaUIsR0FBakIsR0FBcUIsR0FBN0M7QUFBQSxPQVBBO0FBUWJDLFNBQUcsRUFBRSxLQVJRO0FBU2JDLFlBQU0sRUFBRSxJQVRLO0FBVWJDLDRCQUFzQixFQUFFO0FBQ3RCQyxnQkFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUYsRUFBTyxFQUFQLENBQUQsRUFBYSxDQUFDLEdBQUQsRUFBTSxDQUFDLEVBQVAsQ0FBYixDQURZO0FBRXRCQyxrQkFBVSxFQUFFLGtCQUZVO0FBR3RCQyxjQUFNLEVBQUUsSUFIYztBQUl0QkMsYUFBSyxFQUFFLElBSmU7QUFLdEJDLGNBQU0sRUFBRTtBQUxjLE9BVlg7QUFpQmJDLGVBQVMsRUFBRSxJQWpCRTtBQWtCYkMsa0JBQVksRUFBRSxFQWxCRDtBQW1CYkMsZ0JBQVUsRUFBRSxHQW5CQztBQW9CYkMsa0JBQVksRUFBRSxzQkFBQ2IsS0FBRDtBQUFBLGVBQVk7QUFBRWMsYUFBRyxFQUFFLENBQVA7QUFBVUMsYUFBRyxFQUFFO0FBQWYsU0FBWjtBQUFBLE9BcEJEO0FBcUJiQyx3QkFBa0IsRUFBRSxHQXJCUDtBQXNCYkMsa0NBQTRCLEVBQUUsQ0F0QmpCO0FBdUJiQywwQkFBb0IsRUFBRSxJQXZCVDtBQXdCYkMsdUJBQWlCLEVBQUVDLGtEQUFFLENBQUNDLGNBQUgsR0FBb0I7QUFBcEIsT0FDaEJDLE1BRGdCLENBQ1QsQ0FBQyxJQUFELEVBQU8sR0FBUCxDQURTLEVBRWhCQyxLQUZnQixDQUVWLENBQUMsTUFBRCxFQUFTLFNBQVQsRUFBb0IsU0FBcEIsQ0FGVSxDQXhCTjtBQTJCYkMsOEJBQXdCLEVBQUVKLGtEQUFFLENBQUNDLGNBQUgsR0FBb0I7QUFBcEIsT0FDdkJDLE1BRHVCLENBQ2hCLENBQUMsSUFBRCxFQUFPLEdBQVAsQ0FEZ0IsRUFFdkJDLEtBRnVCLENBRWpCLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxHQUFYLENBRmlCLENBM0JiO0FBOEJiRSw0QkFBc0IsRUFBRSxDQTlCWDtBQStCYkMsd0JBQWtCLEVBQUUsQ0FBQyxDQUFELEVBQUksQ0FBSixDQS9CUDtBQWdDYkMsU0FBRyxFQUFFO0FBQ0hDLFlBQUksRUFBRTtBQUNKQyxtQkFBUyxFQUFFLCtEQURQO0FBRUpDLGtCQUFRLEVBQUUsTUFGTjtBQUdKQyxxQkFBVyxFQUFFLFdBSFQ7QUFJSkMsb0JBQVUsRUFBRTtBQUpSLFNBREg7QUFPSGhDLGFBQUssRUFBRTtBQVBKLE9BaENRO0FBeUNiaUMsaUJBQVcsRUFBRTtBQUNYQyxZQUFJLEVBQUUsRUFESztBQUVYQyxhQUFLLEVBQUU7QUFGSSxPQXpDQTtBQTZDYkMsWUFBTSxFQUFFLElBN0NLO0FBOENiQyxZQUFNLEVBQUU7QUFDTkMsY0FBTSxFQUFFLEVBREY7QUFFTnRDLGFBQUssRUFBRSxHQUZEO0FBR05DLGtCQUFVLEVBQUUsR0FITjtBQUlOc0MsZ0JBQVEsRUFBRSxrQkFBQ3ZDLEtBQUQ7QUFBQSxpQkFBWUEsS0FBSyxHQUFHLENBQXBCO0FBQUE7QUFKSixPQTlDSztBQW9EYndDLGlCQUFXLEVBQUUsSUFwREE7QUFxRGJDLGtCQUFZLEVBQUUsU0FyREQ7QUFzRGJDLGtCQUFZLEVBQUU7QUF0REQsSzs7Ozs7OzsyQkF5RFI7QUFDTCxVQUFNQyxJQUFJLEdBQUcsS0FBS0EsSUFBTCxFQUFiO0FBQ0EsVUFBTUMsS0FBSyxHQUFHLEtBQUtBLEtBQUwsRUFBZDtBQUNBLFVBQU1DLElBQUksR0FBRyxLQUFLQyxTQUFMLEdBQWlCRCxJQUFqQixFQUFiOztBQUhLLGtDQUlXQSxJQUFJLENBQUNFLHFCQUFMLEVBSlg7QUFBQSxVQUlDL0MsS0FKRCx5QkFJQ0EsS0FKRDs7QUFLTCxVQUFNZ0QsS0FBSyxHQUFHSixLQUFLLENBQUM3QyxXQUFOLENBQWtCQyxLQUFsQixFQUF5QjRDLEtBQUssQ0FBQ1AsTUFBTixDQUFhcEMsVUFBdEMsQ0FBZDtBQUNBLFVBQUlzQyxRQUFKLEVBQWNELE1BQWQ7O0FBQ0EsVUFBSXRDLEtBQUssR0FBRzRDLEtBQUssQ0FBQ1AsTUFBTixDQUFhcEMsVUFBekIsRUFBcUM7QUFDbkNzQyxnQkFBUSxHQUFHSyxLQUFLLENBQUNQLE1BQU4sQ0FBYUUsUUFBYixDQUFzQnZDLEtBQXRCLENBQVg7QUFDQSxhQUFLOEMsU0FBTCxHQUFpQkcsT0FBakIsQ0FBeUIsUUFBekIsRUFBbUMsSUFBbkM7QUFDQVgsY0FBTSxHQUFHQyxRQUFRLEdBQUcsR0FBcEI7QUFDRCxPQUpELE1BSU87QUFDTEEsZ0JBQVEsR0FBR3ZDLEtBQVg7QUFDQSxhQUFLOEMsU0FBTCxHQUFpQkcsT0FBakIsQ0FBeUIsUUFBekIsRUFBbUMsS0FBbkM7QUFDQVgsY0FBTSxHQUFHdEMsS0FBSyxHQUFHZ0QsS0FBakI7QUFDRDs7QUFmSSxnQ0FpQnNDSixLQUFLLENBQUMvQixZQUFOLENBQW1CYixLQUFuQixDQWpCdEM7QUFBQSxVQWlCUWtELFNBakJSLHVCQWlCR3BDLEdBakJIO0FBQUEsVUFpQndCcUMsU0FqQnhCLHVCQWlCbUJwQyxHQWpCbkI7O0FBa0JMLFVBQU1xQyxZQUFZLEdBQUdULElBQUksQ0FBQ1UsTUFBTCxDQUFZLFVBQUFDLENBQUM7QUFBQSxlQUFJQSxDQUFDLENBQUNuQixLQUFGLElBQVdlLFNBQVgsSUFBd0JJLENBQUMsQ0FBQ25CLEtBQUYsSUFBV2dCLFNBQXZDO0FBQUEsT0FBYixDQUFyQjtBQUVBLFVBQU1JLE1BQU0sR0FBR25DLGtEQUFFLENBQUNvQyxXQUFILEdBQWlCakMsS0FBakIsQ0FBdUIsQ0FBQyxDQUFELEVBQUlxQixLQUFLLENBQUNqQyxZQUFWLENBQXZCLEVBQWdEVyxNQUFoRCxDQUF1RCxDQUFDLENBQUQsRUFBSSxDQUFKLENBQXZELENBQWY7QUFDQSxVQUFNbUMsTUFBTSxHQUFHLEtBQUtYLFNBQUwsR0FDWlksWUFEWSxDQUNDLFNBREQsQ0FBZjtBQUdBRCxZQUFNLENBQUNDLFlBQVAsQ0FBb0Isa0NBQXBCLEVBQ0dDLElBREgsQ0FDUWYsS0FBSyxDQUFDakIsR0FBTixDQUFVQyxJQUFWLENBQWVDLFNBRHZCO0FBR0EsVUFBTStCLGVBQWUsR0FBR0gsTUFBTSxDQUFDQyxZQUFQLENBQW9CLCtCQUFwQixDQUF4QjtBQUNBLFVBQU1HLE1BQU0sR0FBR2pCLEtBQUssQ0FBQ2pCLEdBQU4sQ0FBVTNCLEtBQVYsR0FBa0IsQ0FBakMsQ0E1QkssQ0E2Qkw7O0FBQ0EsVUFBTThELE1BQU0sR0FBR0YsZUFBZSxDQUFDRixZQUFoQixDQUE2QixpQkFBN0IsRUFDWkssSUFEWSxDQUNQLFFBRE8sRUFDR25CLEtBQUssQ0FBQ2pDLFlBQU4sR0FBcUIsQ0FEeEIsRUFFWnFELEtBRlksQ0FFTixNQUZNLEVBRUUsTUFGRixFQUdaRCxJQUhZLENBR1AsT0FITyxFQUdFbkIsS0FBSyxDQUFDakIsR0FBTixDQUFVM0IsS0FBVixHQUFtQjZELE1BQU0sR0FBRyxJQUg5QixDQUFmO0FBS0FDLFlBQU0sQ0FBQ0osWUFBUCxDQUFvQixNQUFwQixFQUNHQSxZQURILENBQ2dCLFlBRGhCLEVBRUdLLElBRkgsQ0FFUSxJQUZSLEVBRWMsVUFGZCxFQUdHQSxJQUhILENBR1EsYUFIUixFQUd1QixFQUh2QixFQUlHQSxJQUpILENBSVEsY0FKUixFQUl3QixFQUp4QixFQUtHQSxJQUxILENBS1EsTUFMUixFQUtnQixDQUxoQixFQU1HQSxJQU5ILENBTVEsTUFOUixFQU1nQixDQU5oQixFQU9HQSxJQVBILENBT1EsUUFQUixFQU9rQixNQVBsQixFQVFHTCxZQVJILENBUWdCLFNBUmhCLEVBU0dNLEtBVEgsQ0FTUyxRQVRULEVBU21CLE9BVG5CLEVBVUdBLEtBVkgsQ0FVUyxjQVZULEVBVXlCLEdBVnpCLEVBV0dELElBWEgsQ0FXUSxHQVhSLEVBV2EsaUJBWGI7QUFhQUQsWUFBTSxDQUFDRyxNQUFQLENBQWMsTUFBZCxFQUNHUCxZQURILENBQ2dCLGFBRGhCLEVBRUdLLElBRkgsQ0FFUSxJQUZSLEVBRWMsWUFGZCxFQUdHQSxJQUhILENBR1EsYUFIUixFQUd1QixFQUh2QixFQUlHQSxJQUpILENBSVEsY0FKUixFQUl3QixFQUp4QixFQUtHQSxJQUxILENBS1EsTUFMUixFQUtnQixDQUxoQixFQU1HQSxJQU5ILENBTVEsTUFOUixFQU1nQixDQU5oQixFQU9HQSxJQVBILENBT1EsUUFQUixFQU9rQixNQVBsQixFQVFHTCxZQVJILENBUWdCLFdBUmhCLEVBU0dNLEtBVEgsQ0FTUyxRQVRULEVBU21CLE9BVG5CLEVBVUdBLEtBVkgsQ0FVUyxjQVZULEVBVXlCLEdBVnpCLEVBV0dELElBWEgsQ0FXUSxHQVhSLEVBV2EsaUJBWGIsRUFoREssQ0E2REw7O0FBQ0FELFlBQU0sQ0FBQ0osWUFBUCxDQUFvQixxQkFBcEIsRUFDR00sS0FESCxDQUNTLFFBRFQsRUFDbUJwQixLQUFLLENBQUN6QixpQkFBTixDQUF3QixDQUF4QixDQURuQixFQUVHNEMsSUFGSCxDQUVRLEdBRlIsRUFFYSxVQUFDVCxDQUFELEVBQU87QUFDaEIsWUFBTVksR0FBRyxHQUFHLENBQUNMLE1BQU0sR0FBRyxHQUFWLEVBQWVqQixLQUFLLENBQUNqQyxZQUFyQixDQUFaO0FBQ0EsWUFBTXdCLEtBQUssR0FBR29CLE1BQU0sQ0FBQyxDQUFELENBQXBCO0FBQ0EsZUFBTyxPQUFPVyxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVN0QixLQUFLLENBQUNoQyxVQUF0QixJQUFvQyxHQUFwQyxHQUEwQ3NELEdBQUcsQ0FBQyxDQUFELENBQTdDLEdBQW1ELElBQW5ELEdBQTBEQSxHQUFHLENBQUMsQ0FBRCxDQUE3RCxHQUFtRSxHQUFuRSxJQUEwRUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTL0IsS0FBbkYsSUFBNEYsSUFBNUYsSUFBb0crQixHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVN0QixLQUFLLENBQUNoQyxVQUFuSCxJQUFpSSxHQUFqSSxHQUF1SXNELEdBQUcsQ0FBQyxDQUFELENBQTFJLEdBQWdKLEdBQXZKO0FBQ0QsT0FOSDtBQVFBSixZQUFNLENBQUNKLFlBQVAsQ0FBb0Isb0JBQXBCLEVBQ0dNLEtBREgsQ0FDUyxRQURULEVBQ21CcEIsS0FBSyxDQUFDekIsaUJBQU4sQ0FBd0IsR0FBeEIsQ0FEbkIsRUFFRzZDLEtBRkgsQ0FFUyxNQUZULEVBRWdCcEIsS0FBSyxDQUFDekIsaUJBQU4sQ0FBd0IsR0FBeEIsQ0FGaEIsRUFHRzRDLElBSEgsQ0FHUSxHQUhSLEVBR2EsVUFBQ1QsQ0FBRCxFQUFPO0FBQ2hCLFlBQU1ZLEdBQUcsR0FBRyxDQUFDTCxNQUFNLEdBQUcsR0FBVCxHQUFlakIsS0FBSyxDQUFDaEMsVUFBTixHQUFpQixHQUFqQyxFQUFzQ2dDLEtBQUssQ0FBQ2pDLFlBQTVDLENBQVo7QUFDQSxZQUFNd0IsS0FBSyxHQUFHb0IsTUFBTSxDQUFDLEdBQUQsQ0FBcEI7QUFDQSxlQUFPLE9BQU9XLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU3RCLEtBQUssQ0FBQ2hDLFVBQXRCLElBQW9DLEdBQXBDLEdBQTBDc0QsR0FBRyxDQUFDLENBQUQsQ0FBN0MsR0FBbUQsSUFBbkQsR0FBMERBLEdBQUcsQ0FBQyxDQUFELENBQTdELEdBQW1FLEdBQW5FLElBQTBFQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVMvQixLQUFuRixJQUE0RixJQUE1RixJQUFvRytCLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU3RCLEtBQUssQ0FBQ2hDLFVBQW5ILElBQWlJLEdBQWpJLEdBQXVJc0QsR0FBRyxDQUFDLENBQUQsQ0FBMUksR0FBZ0osR0FBdko7QUFDRCxPQVBIO0FBU0FKLFlBQU0sQ0FBQ0osWUFBUCxDQUFvQix3QkFBcEIsRUFDR00sS0FESCxDQUNTLFFBRFQsRUFDbUJwQixLQUFLLENBQUN6QixpQkFBTixDQUF3QixJQUF4QixDQURuQixFQUVHNEMsSUFGSCxDQUVRLEdBRlIsRUFFYSxVQUFDVCxDQUFELEVBQUlhLENBQUosRUFBVTtBQUNuQixZQUFNRCxHQUFHLEdBQUcsQ0FBQ0wsTUFBTSxHQUFHLEdBQVYsRUFBZWpCLEtBQUssQ0FBQ2pDLFlBQXJCLENBQVo7QUFDQSxZQUFNd0IsS0FBSyxHQUFHb0IsTUFBTSxDQUFDLElBQUQsQ0FBcEI7QUFDQSxlQUFPLE9BQU9XLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU3RCLEtBQUssQ0FBQ2hDLFVBQXRCLElBQW9DLEdBQXBDLEdBQTBDc0QsR0FBRyxDQUFDLENBQUQsQ0FBN0MsR0FBbUQsSUFBbkQsR0FBMERBLEdBQUcsQ0FBQyxDQUFELENBQTdELEdBQW1FLEdBQW5FLElBQTBFQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVMvQixLQUFuRixJQUE0RixJQUE1RixJQUFvRytCLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU3RCLEtBQUssQ0FBQ2hDLFVBQW5ILElBQWlJLEdBQWpJLEdBQXVJc0QsR0FBRyxDQUFDLENBQUQsQ0FBMUksR0FBZ0osR0FBdko7QUFDRCxPQU5IO0FBUUFKLFlBQU0sQ0FBQ0osWUFBUCxDQUFvQix1QkFBcEIsRUFDR00sS0FESCxDQUNTLFFBRFQsRUFDbUJwQixLQUFLLENBQUN6QixpQkFBTixDQUF3QixJQUF4QixDQURuQixFQUVHNkMsS0FGSCxDQUVTLE1BRlQsRUFFZ0JwQixLQUFLLENBQUN6QixpQkFBTixDQUF3QixJQUF4QixDQUZoQixFQUdHNEMsSUFISCxDQUdRLEdBSFIsRUFHYSxVQUFDVCxDQUFELEVBQU87QUFDaEIsWUFBTVksR0FBRyxHQUFHLENBQUNMLE1BQU0sR0FBRyxHQUFULEdBQWFqQixLQUFLLENBQUNoQyxVQUFOLEdBQWlCLEdBQS9CLEVBQW9DZ0MsS0FBSyxDQUFDakMsWUFBMUMsQ0FBWjtBQUNBLFlBQU13QixLQUFLLEdBQUdvQixNQUFNLENBQUMsSUFBRCxDQUFwQjtBQUNBLGVBQU8sT0FBT1csR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTdEIsS0FBSyxDQUFDaEMsVUFBdEIsSUFBb0MsR0FBcEMsR0FBMENzRCxHQUFHLENBQUMsQ0FBRCxDQUE3QyxHQUFtRCxJQUFuRCxHQUEwREEsR0FBRyxDQUFDLENBQUQsQ0FBN0QsR0FBbUUsR0FBbkUsSUFBMEVBLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBUy9CLEtBQW5GLElBQTRGLElBQTVGLElBQW9HK0IsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTdEIsS0FBSyxDQUFDaEMsVUFBbkgsSUFBaUksR0FBakksR0FBdUlzRCxHQUFHLENBQUMsQ0FBRCxDQUExSSxHQUFnSixHQUF2SjtBQUNELE9BUEg7QUFTQUosWUFBTSxDQUFDSixZQUFQLENBQW9CLHVCQUFwQixFQUNHTSxLQURILENBQ1MsUUFEVCxFQUNtQnBCLEtBQUssQ0FBQ3pCLGlCQUFOLENBQXdCLElBQXhCLENBRG5CLEVBRUc0QyxJQUZILENBRVEsR0FGUixFQUVhLFVBQUNULENBQUQsRUFBSWEsQ0FBSixFQUFVO0FBQ25CLFlBQU1ELEdBQUcsR0FBRyxDQUFDTCxNQUFNLEdBQUcsR0FBVixFQUFlakIsS0FBSyxDQUFDakMsWUFBckIsQ0FBWjtBQUNBLFlBQU13QixLQUFLLEdBQUdvQixNQUFNLENBQUMsSUFBRCxDQUFwQjtBQUNBLGVBQU8sT0FBT1csR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTdEIsS0FBSyxDQUFDaEMsVUFBdEIsSUFBb0MsR0FBcEMsR0FBMENzRCxHQUFHLENBQUMsQ0FBRCxDQUE3QyxHQUFtRCxJQUFuRCxHQUEwREEsR0FBRyxDQUFDLENBQUQsQ0FBN0QsR0FBbUUsR0FBbkUsSUFBMEVBLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBUy9CLEtBQW5GLElBQTRGLElBQTVGLElBQW9HK0IsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTdEIsS0FBSyxDQUFDaEMsVUFBbkgsSUFBaUksR0FBakksR0FBdUlzRCxHQUFHLENBQUMsQ0FBRCxDQUExSSxHQUFnSixHQUF2SjtBQUNELE9BTkg7QUFRQUosWUFBTSxDQUFDSixZQUFQLENBQW9CLHNCQUFwQixFQUNHTSxLQURILENBQ1MsUUFEVCxFQUNtQixNQURuQixFQUVHQSxLQUZILENBRVMsTUFGVCxFQUVpQixNQUZqQixFQUdHRCxJQUhILENBR1EsR0FIUixFQUdhLFVBQUNULENBQUQsRUFBSWEsQ0FBSixFQUFVO0FBQ25CLFlBQU1ELEdBQUcsR0FBRyxDQUFDTCxNQUFNLEdBQUcsR0FBVCxHQUFhakIsS0FBSyxDQUFDaEMsVUFBTixHQUFpQixHQUEvQixFQUFvQ2dDLEtBQUssQ0FBQ2pDLFlBQTFDLENBQVo7QUFDQSxZQUFNd0IsS0FBSyxHQUFHb0IsTUFBTSxDQUFDLENBQUQsQ0FBcEI7QUFDQSxlQUFPLE9BQU9XLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU3RCLEtBQUssQ0FBQ2hDLFVBQXRCLElBQW9DLEdBQXBDLEdBQTBDc0QsR0FBRyxDQUFDLENBQUQsQ0FBN0MsR0FBbUQsSUFBbkQsR0FBMERBLEdBQUcsQ0FBQyxDQUFELENBQTdELEdBQW1FLEdBQW5FLElBQTBFQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVMvQixLQUFuRixJQUE0RixJQUE1RixJQUFvRytCLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU3RCLEtBQUssQ0FBQ2hDLFVBQW5ILElBQWlJLEdBQWpJLEdBQXVJc0QsR0FBRyxDQUFDLENBQUQsQ0FBMUksR0FBZ0osR0FBdko7QUFDRCxPQVBIO0FBU0FKLFlBQU0sQ0FBQ0osWUFBUCxDQUFvQixNQUFwQixFQUNHTSxLQURILENBQ1MsUUFEVCxFQUNtQixPQURuQixFQUVHQSxLQUZILENBRVMsY0FGVCxFQUV5QixFQUZ6QixFQUdHRCxJQUhILENBR1EsSUFIUixFQUdjLEVBSGQsRUFJR0EsSUFKSCxDQUlRLElBSlIsRUFJYyxFQUpkLEVBS0dBLElBTEgsQ0FLUSxJQUxSLEVBS2MsQ0FMZCxFQU1HQSxJQU5ILENBTVEsSUFOUixFQU1jbkIsS0FBSyxDQUFDakMsWUFOcEIsRUFPR29ELElBUEgsQ0FPUSxZQVBSLEVBT3NCLGdCQVB0QixFQVFHQSxJQVJILENBUVEsY0FSUixFQVF3QixrQkFSeEI7QUFVQSxVQUFNSyxhQUFhLEdBQUdSLGVBQWUsQ0FBQ0YsWUFBaEIsQ0FBNkIsaUJBQTdCLEVBQ25CTSxLQURtQixDQUNiLGNBRGEsWUFDTUgsTUFBTSxHQUFHLEdBRGYsUUFBdEI7QUFHQU8sbUJBQWEsQ0FBQ1YsWUFBZCxDQUEyQixpQ0FBM0IsRUFDR00sS0FESCxDQUNTLE9BRFQsWUFDcUJILE1BQU0sR0FBRyxHQUQ5QixTQUVHRixJQUZILENBRVFmLEtBQUssQ0FBQ2pCLEdBQU4sQ0FBVUMsSUFBVixDQUFlRSxRQUZ2QjtBQUdBc0MsbUJBQWEsQ0FBQ1YsWUFBZCxDQUEyQixvQ0FBM0IsRUFDR00sS0FESCxDQUNTLE9BRFQsWUFDcUJILE1BQU0sR0FBRyxHQUQ5QixTQUVHRixJQUZILENBRVFmLEtBQUssQ0FBQ2pCLEdBQU4sQ0FBVUMsSUFBVixDQUFlRyxXQUZ2QjtBQUdBcUMsbUJBQWEsQ0FBQ1YsWUFBZCxDQUEyQixtQ0FBM0IsRUFDR00sS0FESCxDQUNTLE9BRFQsWUFDcUJILE1BQU0sR0FBRyxHQUQ5QixTQUVHRixJQUZILENBRVFmLEtBQUssQ0FBQ2pCLEdBQU4sQ0FBVUMsSUFBVixDQUFlSSxVQUZ2QixFQXBJSyxDQXdJTDs7QUFDQSxVQUFNcUMsR0FBRyxHQUFHLEtBQUt2QixTQUFMLEdBQ1RZLFlBRFMsQ0FDSSx5QkFESixFQUVUTSxLQUZTLENBRUgsWUFGRyxFQUVXLFFBRlgsRUFHVE4sWUFIUyxDQUdJLFdBSEosRUFHaUI7QUFIakIsT0FJVEssSUFKUyxDQUlKLE9BSkksRUFJS3hCLFFBSkwsRUFLVHdCLElBTFMsQ0FLSixRQUxJLEVBS016QixNQUxOLENBQVo7QUFPQSxVQUFNZ0MsQ0FBQyxHQUFHRCxHQUFHLENBQUNYLFlBQUosQ0FBaUIsR0FBakIsQ0FBVjs7QUFFQSxVQUFJLENBQUN0QyxrREFBRSxDQUFDd0IsS0FBSyxDQUFDeEMsc0JBQU4sQ0FBNkJFLFVBQTlCLENBQVAsRUFBa0Q7QUFDaERzQyxhQUFLLENBQUN4QyxzQkFBTixDQUE2QkUsVUFBN0IsR0FBMEMsa0JBQTFDO0FBQ0Q7O0FBRUQsVUFBTUEsVUFBVSxHQUFHYyxrREFBRSxDQUFDd0IsS0FBSyxDQUFDeEMsc0JBQU4sQ0FBNkJFLFVBQTlCLENBQUYsRUFBbkI7QUFDQSxVQUFNaUUsU0FBUyxHQUFHQyx1REFBQSxDQUFpQjVCLEtBQUssQ0FBQzFDLEdBQXZCLEVBQTRCMEMsS0FBSyxDQUFDMUMsR0FBTixDQUFVdUUsT0FBVixDQUFrQkYsU0FBOUMsQ0FBbEI7QUFDQSxVQUFJRyxRQUFKOztBQUNBLFVBQUk5QixLQUFLLENBQUMxQyxHQUFOLENBQVV1RSxPQUFWLENBQWtCRSxrQkFBdEIsRUFBMEM7QUFDeENELGdCQUFRLEdBQUdGLG9EQUFBLENBQWM1QixLQUFLLENBQUMxQyxHQUFwQixFQUF5QjBDLEtBQUssQ0FBQzFDLEdBQU4sQ0FBVXVFLE9BQVYsQ0FBa0JFLGtCQUEzQyxDQUFYO0FBQ0Q7O0FBRUQsVUFBSS9CLEtBQUssQ0FBQ3hDLHNCQUFOLENBQTZCRyxNQUE3QixJQUF1Q3FDLEtBQUssQ0FBQ3hDLHNCQUFOLENBQTZCRyxNQUE3QixDQUFvQ3FFLE1BQXBDLEtBQStDLENBQTFGLEVBQTZGO0FBQzNGdEUsa0JBQVUsQ0FBQ0MsTUFBWCxDQUFrQnFDLEtBQUssQ0FBQ3hDLHNCQUFOLENBQTZCRyxNQUEvQztBQUNEOztBQUVELFVBQUlxQyxLQUFLLENBQUN4QyxzQkFBTixDQUE2QkssTUFBN0IsSUFBdUNtQyxLQUFLLENBQUN4QyxzQkFBTixDQUE2QkssTUFBN0IsQ0FBb0NtRSxNQUFwQyxLQUErQyxDQUExRixFQUE2RjtBQUMzRnRFLGtCQUFVLENBQUNHLE1BQVgsQ0FBa0JtQyxLQUFLLENBQUN4QyxzQkFBTixDQUE2QkssTUFBL0M7QUFDRDs7QUFFRCxVQUFNb0UsbUJBQW1CLEdBQUd6QixZQUFZLENBQUMwQixHQUFiLENBQWlCLFVBQUF4QixDQUFDO0FBQUEsZUFBSUEsQ0FBQyxDQUFDM0IsR0FBTjtBQUFBLE9BQWxCLENBQTVCO0FBQ0EsVUFBTW9ELGdCQUFnQixHQUFHUixTQUFTLENBQUNTLFFBQVYsQ0FDdEIzQixNQURzQixDQUNmLFVBQUE0QixDQUFDO0FBQUEsZUFBSUosbUJBQW1CLENBQUNLLFFBQXBCLENBQTZCRCxDQUFDLENBQUNFLFVBQUYsQ0FBYUMsU0FBMUMsQ0FBSjtBQUFBLE9BRGMsRUFFdEIvQixNQUZzQixDQUVmLFVBQUE0QixDQUFDO0FBQUEsZUFBSUEsQ0FBQyxDQUFDRSxVQUFGLENBQWFFLFFBQWIsQ0FBc0JULE1BQXRCLElBQThCLENBQTlCLElBQW1DSyxDQUFDLENBQUNFLFVBQUYsQ0FBYUUsUUFBYixDQUFzQixDQUF0QixDQUFuQyxJQUErREosQ0FBQyxDQUFDRSxVQUFGLENBQWFFLFFBQWIsQ0FBc0IsQ0FBdEIsQ0FBbkU7QUFBQSxPQUZjLEVBR3RCUCxHQUhzQixDQUdsQjtBQUFBLFlBQUdLLFVBQUgsUUFBR0EsVUFBSDtBQUFBLGVBQXFCO0FBQ3hCRyxjQUFJLEVBQUUsU0FEa0I7QUFFeEJILG9CQUFVLEVBQVZBLFVBRndCO0FBR3hCSSxrQkFBUSxFQUFFO0FBQ1JELGdCQUFJLEVBQUUsT0FERTtBQUVSRSx1QkFBVyxFQUFFTCxVQUFVLENBQUNFO0FBRmhCO0FBSGMsU0FBckI7QUFBQSxPQUhrQixDQUF6QixDQXRLSyxDQWtMTDtBQUNBO0FBQ0E7O0FBQ0EsVUFBTUksV0FBVyxHQUFHLENBQ2xCLENBQUMsQ0FBQyxTQUFGLEVBQWEsU0FBYixDQURrQixFQUNPO0FBQ3pCLE9BQUMsQ0FBQyxTQUFGLEVBQWEsU0FBYixDQUZrQixFQUVPO0FBQ3pCLE9BQUMsQ0FBQyxTQUFGLEVBQWEsQ0FBQyxTQUFkLENBSGtCLEVBR1E7QUFDMUIsT0FBQyxDQUFDLFVBQUYsRUFBYyxTQUFkLENBSmtCLEVBSVE7QUFDMUIsT0FBQyxDQUFDLFVBQUYsRUFBYyxDQUFDLFNBQWYsQ0FMa0IsRUFLUztBQUMzQixPQUFDLENBQUMsVUFBRixFQUFjLENBQUMsU0FBZixDQU5rQixFQU1TO0FBQzNCLE9BQUMsU0FBRCxFQUFZLFFBQVosQ0FQa0IsRUFPSztBQUN2QixPQUFDLFNBQUQsRUFBWSxDQUFDLFNBQWIsQ0FSa0IsRUFRTztBQUN6QixPQUFDLENBQUMsUUFBRixFQUFZLENBQUMsU0FBYixDQVRrQixDQVNPO0FBVFAsT0FBcEI7QUFXQSxVQUFNQyxnQkFBZ0IsR0FBR1gsZ0JBQWdCLENBQUNZLE1BQWpCLENBQXdCRixXQUFXLENBQUNYLEdBQVosQ0FBZ0IsVUFBQU8sUUFBUTtBQUFBLGVBQUs7QUFDNUVDLGNBQUksRUFBRSxTQURzRTtBQUU1RUgsb0JBQVUsRUFBRTtBQUFFUyxpQkFBSyxFQUFFO0FBQVQsV0FGZ0U7QUFHNUVMLGtCQUFRLEVBQUU7QUFDUkQsZ0JBQUksRUFBRSxPQURFO0FBRVJFLHVCQUFXLEVBQUVIO0FBRkw7QUFIa0UsU0FBTDtBQUFBLE9BQXhCLENBQXhCLENBQXpCOztBQVNBLFVBQUl6QyxLQUFLLENBQUN4QyxzQkFBTixDQUE2QkMsUUFBN0IsSUFBMEN1QyxLQUFLLENBQUN4QyxzQkFBTixDQUE2QkMsUUFBN0IsQ0FBc0N1RSxNQUF0QyxLQUFpRCxDQUFqRCxJQUFzRGhDLEtBQUssQ0FBQ3hDLHNCQUFOLENBQTZCQyxRQUE3QixDQUFzQyxDQUF0QyxFQUF5Q3VFLE1BQXpDLEtBQW9ELENBQTFHLElBQStHaEMsS0FBSyxDQUFDeEMsc0JBQU4sQ0FBNkJDLFFBQTdCLENBQXNDLENBQXRDLEVBQXlDdUUsTUFBekMsS0FBb0QsQ0FBak4sRUFBcU47QUFDbk5pQixlQUFPLENBQUNDLEdBQVIsQ0FBWSxjQUFaO0FBQ0F4RixrQkFBVSxDQUFDeUYsT0FBWCxDQUFtQixDQUFDeEQsUUFBRCxFQUFXRCxNQUFYLENBQW5CLEVBQXVDMEQsWUFBWSxDQUFDcEQsS0FBSyxDQUFDeEMsc0JBQU4sQ0FBNkJDLFFBQTlCLENBQW5EO0FBQ0QsT0FIRCxNQUdPO0FBQ0x3RixlQUFPLENBQUNDLEdBQVIsQ0FBWSxjQUFaO0FBQ0F4RixrQkFBVSxDQUFDeUYsT0FBWCxDQUFtQixDQUFDeEQsUUFBRCxFQUFXRCxNQUFYLENBQW5CLEVBQXVDaUMsU0FBdkM7QUFDRDs7QUFFRCxVQUFJM0IsS0FBSyxDQUFDeEMsc0JBQU4sQ0FBNkJJLEtBQWpDLEVBQXdDO0FBQ3RDRixrQkFBVSxDQUFDRSxLQUFYLENBQWlCb0MsS0FBSyxDQUFDeEMsc0JBQU4sQ0FBNkJJLEtBQTlDO0FBQ0Q7O0FBRUQsVUFBTXlGLElBQUksR0FBRzdFLGtEQUFFLENBQUM4RSxPQUFILEdBQWE1RixVQUFiLENBQXdCQSxVQUF4QixDQUFiO0FBQ0ErRCxTQUFHLENBQUM4QixTQUFKLENBQWMsOEJBQWQsRUFBOENDLE1BQTlDO0FBRUEsVUFBTUMsYUFBYSxHQUFHL0IsQ0FBQyxDQUFDWixZQUFGLENBQWUsYUFBZixFQUNuQk0sS0FEbUIsQ0FDYixnQkFEYSxFQUNLLE1BREwsRUFFbkJBLEtBRm1CLENBRWIsTUFGYSxFQUVMcEIsS0FBSyxDQUFDaEQsUUFGRCxFQUduQnVHLFNBSG1CLENBR1QsY0FIUyxFQUluQnhELElBSm1CLENBSWQ0QixTQUFTLENBQUNTLFFBQVYsQ0FBbUIzQixNQUFuQixDQUEwQixVQUFBQyxDQUFDO0FBQUEsZUFBSUEsQ0FBQyxDQUFDNkIsVUFBRixDQUFhbUIsSUFBYixLQUFzQixZQUExQjtBQUFBLE9BQTNCLENBSmMsRUFJc0QsVUFBQWhELENBQUM7QUFBQSxlQUFJQSxDQUFDLENBQUM2QixVQUFGLENBQWFtQixJQUFqQjtBQUFBLE9BSnZELENBQXRCO0FBTUFELG1CQUFhLENBQ1ZFLEtBREgsR0FFR0MsTUFGSCxDQUVVLE1BRlYsRUFHR3pDLElBSEgsQ0FHUSxPQUhSLEVBR2lCLFVBQUFULENBQUM7QUFBQSxtQ0FBaUJBLENBQUMsQ0FBQzZCLFVBQUYsQ0FBYW1CLElBQTlCO0FBQUEsT0FIbEIsRUFJR0csS0FKSCxDQUlTSixhQUpULEVBS0dyQyxLQUxILENBS1MsUUFMVCxFQUttQnBCLEtBQUssQ0FBQ2xELGdCQUx6QixFQU1Hc0UsS0FOSCxDQU1TLGNBTlQsRUFNeUJwQixLQUFLLENBQUNuRCxnQkFOL0IsRUFPR3NFLElBUEgsQ0FPUSxHQVBSLEVBT2FrQyxJQVBiO0FBU0FKLGFBQU8sQ0FBQ0MsR0FBUixDQUFZeEIsQ0FBQyxDQUFDTCxNQUFGLENBQVMsWUFBVCxFQUF1QnBCLElBQXZCLEdBQThCRSxxQkFBOUIsRUFBWjs7QUFDQSxVQUFJMkIsUUFBSixFQUFjO0FBQ1pKLFNBQUMsQ0FBQ1osWUFBRixDQUFlLGVBQWYsRUFDR0ssSUFESCxDQUNRLE9BRFIsRUFDaUIsa0JBRGpCLEVBRUdDLEtBRkgsQ0FFUyxnQkFGVCxFQUUyQixNQUYzQixFQUdHQSxLQUhILENBR1MsUUFIVCxFQUdtQnBCLEtBQUssQ0FBQ2xELGdCQUh6QixFQUlHc0UsS0FKSCxDQUlTLGNBSlQsRUFJeUJwQixLQUFLLENBQUNuRCxnQkFKL0IsRUFLR3VFLEtBTEgsQ0FLUyxNQUxULEVBS2lCLE1BTGpCLEVBTUdBLEtBTkgsQ0FNUyxrQkFOVCxFQU02QnBCLEtBQUssQ0FBQ2xCLGtCQU5uQyxFQU9HcUMsSUFQSCxDQU9RLEdBUFIsRUFPYWtDLElBQUksQ0FBQ3ZCLFFBQUQsQ0FQakI7QUFRRDs7QUFFRCxVQUFNZ0MsZUFBZSxHQUFHM0IsZ0JBQWdCLENBQUM0QixJQUFqQixDQUFzQixVQUFDQyxDQUFELEVBQUlDLENBQUosRUFBVTtBQUN0RCxZQUFNQyxFQUFFLEdBQUcxRCxZQUFZLENBQUNDLE1BQWIsQ0FBb0IsVUFBQTBELENBQUM7QUFBQSxpQkFBSUgsQ0FBQyxDQUFDekIsVUFBRixDQUFhQyxTQUFiLEtBQTJCMkIsQ0FBQyxDQUFDcEYsR0FBakM7QUFBQSxTQUFyQixFQUEyRCxDQUEzRCxDQUFYO0FBQ0EsWUFBTXFGLEVBQUUsR0FBRzVELFlBQVksQ0FBQ0MsTUFBYixDQUFvQixVQUFBMEQsQ0FBQztBQUFBLGlCQUFJRixDQUFDLENBQUMxQixVQUFGLENBQWFDLFNBQWIsS0FBMkIyQixDQUFDLENBQUNwRixHQUFqQztBQUFBLFNBQXJCLEVBQTJELENBQTNELENBQVg7QUFDQSxlQUFPbUYsRUFBRSxDQUFDM0UsS0FBSCxHQUFXNkUsRUFBRSxDQUFDN0UsS0FBckI7QUFDRCxPQUp1QixDQUF4QjtBQU1BdUUscUJBQWUsQ0FBQ08sT0FBaEIsQ0FBd0IsVUFBQzNELENBQUQsRUFBTztBQUM3QixZQUFNNEQsQ0FBQyxHQUFHOUQsWUFBWSxDQUFDQyxNQUFiLENBQW9CLFVBQUEwRCxDQUFDO0FBQUEsaUJBQUl6RCxDQUFDLENBQUM2QixVQUFGLENBQWFDLFNBQWIsS0FBMkIyQixDQUFDLENBQUNwRixHQUFqQztBQUFBLFNBQXJCLEVBQTJELENBQTNELENBQVY7O0FBQ0EsWUFBSXVGLENBQUosRUFBTztBQUNMNUQsV0FBQyxDQUFDbkIsS0FBRixHQUFVK0UsQ0FBQyxDQUFDL0UsS0FBWjtBQUNEO0FBQ0YsT0FMRDtBQU9BLFVBQU1nRixjQUFjLEdBQUc3QyxDQUFDLENBQUNaLFlBQUYsQ0FBZSxlQUFmLEVBQ3BCTSxLQURvQixDQUNkLGdCQURjLEVBQ0ksTUFESixFQUVwQm1DLFNBRm9CLENBRVYsZUFGVSxFQUdwQnhELElBSG9CLENBR2YrRCxlQUhlLENBQXZCO0FBS0FTLG9CQUFjLENBQUNaLEtBQWYsR0FDR0MsTUFESCxDQUNVLE1BRFYsRUFFR3pDLElBRkgsQ0FFUSxPQUZSLEVBRWlCLFVBQUFULENBQUM7QUFBQSxlQUFJQSxDQUFDLENBQUM2QixVQUFGLENBQWFtQixJQUFiLEdBQW9CLFdBQXhCO0FBQUEsT0FGbEIsRUFHR0csS0FISCxDQUdTVSxjQUhULEVBSUdwRCxJQUpILENBSVEsR0FKUixFQUlhLFVBQVNULENBQVQsRUFBWTtBQUNyQixZQUFNWSxHQUFHLEdBQUc1RCxVQUFVLENBQUNnRCxDQUFDLENBQUM2QixVQUFGLENBQWFFLFFBQWQsQ0FBdEI7QUFDQSxZQUFNbEQsS0FBSyxHQUFHb0IsTUFBTSxDQUFDRCxDQUFDLENBQUNuQixLQUFILENBQXBCO0FBQ0EsZUFBTyxPQUFPK0IsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTdEIsS0FBSyxDQUFDaEMsVUFBdEIsSUFBb0MsR0FBcEMsR0FBMENzRCxHQUFHLENBQUMsQ0FBRCxDQUE3QyxHQUFtRCxJQUFuRCxHQUEwREEsR0FBRyxDQUFDLENBQUQsQ0FBN0QsR0FBbUUsR0FBbkUsSUFBMEVBLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBUy9CLEtBQW5GLElBQTRGLElBQTVGLElBQW9HK0IsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTdEIsS0FBSyxDQUFDaEMsVUFBbkgsSUFBaUksR0FBakksR0FBdUlzRCxHQUFHLENBQUMsQ0FBRCxDQUExSSxHQUFnSixHQUF2SjtBQUNELE9BUkgsRUFTR0YsS0FUSCxDQVNTLE1BVFQsRUFTaUIsTUFUakIsRUFVR0EsS0FWSCxDQVVTLFFBVlQsRUFVbUIsVUFBU1YsQ0FBVCxFQUFZO0FBQzNCLGVBQU9BLENBQUMsQ0FBQ25CLEtBQUYsR0FBVVMsS0FBSyxDQUFDekIsaUJBQU4sQ0FBd0JtQyxDQUFDLENBQUNuQixLQUExQixDQUFWLEdBQTZDLE1BQXBEO0FBQ0QsT0FaSCxFQWFHNkIsS0FiSCxDQWFTLGNBYlQsRUFheUIsVUFBU1YsQ0FBVCxFQUFZO0FBQ2pDLGVBQU9BLENBQUMsQ0FBQ25CLEtBQUYsR0FBVVMsS0FBSyxDQUFDcEIsd0JBQU4sQ0FBK0I4QixDQUFDLENBQUNuQixLQUFqQyxDQUFWLEdBQW9ELEdBQTNEO0FBQ0QsT0FmSDtBQWlCQSxVQUFNaUYsdUJBQXVCLEdBQUc5QyxDQUFDLENBQUNaLFlBQUYsQ0FBZSxXQUFmLEVBQzdCTSxLQUQ2QixDQUN2QixNQUR1QixFQUNmLE1BRGUsRUFFN0JBLEtBRjZCLENBRXZCLFFBRnVCLEVBRWJwQixLQUFLLENBQUNKLFdBQU4sR0FBa0IsV0FBbEIsR0FBOEIsU0FGakIsRUFHN0J3QixLQUg2QixDQUd2QixnQkFIdUIsRUFHTCxLQUhLLEVBSTdCbUMsU0FKNkIsQ0FJbkIsY0FKbUIsRUFLN0J4RCxJQUw2QixDQUt4QjBFLGtFQUFVLEdBQUdDLFFBQWIsQ0FBc0I1QixnQkFBdEIsRUFBd0NWLFFBTGhCLENBQWhDO0FBT0FvQyw2QkFBdUIsQ0FBQ2IsS0FBeEIsR0FDR0MsTUFESCxDQUNVLE1BRFYsRUFFR3pDLElBRkgsQ0FFUSxPQUZSLEVBRWlCLFVBQUFULENBQUM7QUFBQSxlQUFJLFNBQUo7QUFBQSxPQUZsQixFQUdHbUQsS0FISCxDQUdTVyx1QkFIVCxFQUlHckQsSUFKSCxDQUlRLEdBSlIsRUFJYWtDLElBSmIsRUFLR3NCLEVBTEgsQ0FLTSxXQUxOLEVBS21CLFVBQUFqRSxDQUFDLEVBQUk7QUFDcEIsWUFBSVYsS0FBSyxDQUFDSixXQUFWLEVBQXVCO0FBQ3JCZ0YsZUFBSyxDQUFDbEUsQ0FBRCxDQUFMO0FBQ0Q7QUFDRixPQVRILEVBVUdpRSxFQVZILENBVU0sVUFWTixFQVVrQixVQUFBakUsQ0FBQyxFQUFJO0FBQ25CLFlBQUlWLEtBQUssQ0FBQ0osV0FBVixFQUF1QjtBQUNyQmlGLGdCQUFNLENBQUNuRSxDQUFELENBQU47QUFDRDtBQUNGLE9BZEg7QUFnQkE4RCw2QkFBdUIsQ0FBQ00sSUFBeEIsR0FDR3RCLE1BREg7QUFHQSxVQUFNdUIsT0FBTyxHQUFHckQsQ0FBQyxDQUFDWixZQUFGLENBQWUsY0FBZixFQUNiTSxLQURhLENBQ1AsZ0JBRE8sRUFDVyxNQURYLEVBRWJ3QyxNQUZhLENBRU4sTUFGTSxDQUFoQjtBQUlBLFVBQUlvQixjQUFjLEdBQUdoRixLQUFLLENBQUNYLFdBQU4sQ0FBa0JDLElBQWxCLENBQXVCNEMsR0FBdkIsQ0FBMkIsVUFBQ3hCLENBQUQsRUFBTztBQUNyRCxZQUFNMkIsQ0FBQyxHQUFHM0YsS0FBSyxDQUFDdUksVUFBTixDQUFpQnZFLENBQWpCLENBQVY7QUFDQSxZQUFNcEQsR0FBRyxHQUFHNkUsZ0JBQWdCLENBQUMxQixNQUFqQixDQUF3QixVQUFBMEQsQ0FBQztBQUFBLGlCQUFJQSxDQUFDLENBQUM1QixVQUFGLENBQWFDLFNBQWIsS0FBMkJILENBQUMsQ0FBQ0csU0FBakM7QUFBQSxTQUF6QixFQUFxRSxDQUFyRSxDQUFaO0FBQ0EsZUFBTztBQUNMMEMscUJBQVcsRUFBRTdDLENBRFI7QUFFTDhDLG9CQUFVLEVBQUU3SDtBQUZQLFNBQVA7QUFJRCxPQVBvQixDQUFyQjtBQVNBLFVBQUk4SCxpQkFBaUIsR0FBR3BGLEtBQUssQ0FBQ1gsV0FBTixDQUFrQkUsS0FBbEIsQ0FBd0IyQyxHQUF4QixDQUE0QixVQUFDeEIsQ0FBRCxFQUFPO0FBQ3pELFlBQU0yQixDQUFDLEdBQUczRixLQUFLLENBQUN1SSxVQUFOLENBQWlCdkUsQ0FBakIsQ0FBVjtBQUNBLFlBQU1wRCxHQUFHLEdBQUd3RyxlQUFlLENBQUNyRCxNQUFoQixDQUF1QixVQUFBMEQsQ0FBQztBQUFBLGlCQUFJQSxDQUFDLENBQUM1QixVQUFGLENBQWFDLFNBQWIsS0FBMkJILENBQUMsQ0FBQ0csU0FBakM7QUFBQSxTQUF4QixFQUFvRSxDQUFwRSxDQUFaO0FBQ0EsZUFBTztBQUNMMEMscUJBQVcsRUFBRTdDLENBRFI7QUFFTDhDLG9CQUFVLEVBQUU3SDtBQUZQLFNBQVA7QUFJRCxPQVB1QixDQUF4QjtBQVNBMEgsb0JBQWMsR0FBR0EsY0FBYyxDQUFDdkUsTUFBZixDQUFzQixVQUFBQyxDQUFDO0FBQUEsZUFBSUEsQ0FBQyxDQUFDd0UsV0FBRixJQUFpQnhFLENBQUMsQ0FBQ3lFLFVBQXZCO0FBQUEsT0FBdkIsQ0FBakI7QUFDQUMsdUJBQWlCLEdBQUdBLGlCQUFpQixDQUFDM0UsTUFBbEIsQ0FBeUIsVUFBQUMsQ0FBQztBQUFBLGVBQUlBLENBQUMsQ0FBQ3dFLFdBQUYsSUFBaUJ4RSxDQUFDLENBQUN5RSxVQUF2QjtBQUFBLE9BQTFCLENBQXBCO0FBRUEsVUFBTTlGLFdBQVcsR0FBR3FDLENBQUMsQ0FBQ1osWUFBRixDQUFlLG9CQUFmLEVBQ2pCTSxLQURpQixDQUNYLGdCQURXLEVBQ08sTUFEUCxFQUVqQm1DLFNBRmlCLENBRVAsaUJBRk8sRUFHakJ4RCxJQUhpQixDQUdaaUYsY0FIWSxFQUdJLFVBQUF0RSxDQUFDO0FBQUEsZUFBSUEsQ0FBQyxDQUFDd0UsV0FBRixDQUFjMUMsU0FBbEI7QUFBQSxPQUhMLENBQXBCO0FBS0FuRCxpQkFBVyxDQUFDc0UsS0FBWixHQUNHQyxNQURILENBQ1UsTUFEVixFQUVHekMsSUFGSCxDQUVRLE9BRlIsRUFFaUIsWUFGakIsRUFHRzBDLEtBSEgsQ0FHU3hFLFdBSFQsRUFJRzhCLElBSkgsQ0FJUSxXQUpSLEVBSXFCLFVBQUNULENBQUQsRUFBTztBQUN4QixZQUFNMkUsQ0FBQyxHQUFHM0gsVUFBVSxDQUFDZ0QsQ0FBQyxDQUFDeUUsVUFBRixDQUFheEMsUUFBYixDQUFzQkMsV0FBdkIsQ0FBcEI7QUFDQSxtQ0FBb0J5QyxDQUFDLENBQUMsQ0FBRCxDQUFyQixjQUE0QkEsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPckYsS0FBSyxDQUFDbEMsU0FBekM7QUFDRCxPQVBILEVBUUdrQixJQVJILENBUVEsVUFBQzBCLENBQUQsRUFBTztBQUNYLGVBQU9BLENBQUMsQ0FBQ3dFLFdBQUYsQ0FBY0ksWUFBZCxDQUEyQnRGLEtBQUssQ0FBQ3pDLE1BQWpDLENBQVA7QUFDRCxPQVZIO0FBWUE4QixpQkFBVyxDQUFDeUYsSUFBWixHQUNHdEIsTUFESDtBQUdBLFVBQU0rQixrQkFBa0IsR0FBRzdELENBQUMsQ0FBQ1osWUFBRixDQUFlLHNCQUFmLEVBQ3hCTSxLQUR3QixDQUNsQixnQkFEa0IsRUFDQSxNQURBLEVBRXhCbUMsU0FGd0IsQ0FFZCxpQkFGYyxFQUd4QnhELElBSHdCLENBR25CcUYsaUJBSG1CLENBQTNCO0FBS0FHLHdCQUFrQixDQUFDNUIsS0FBbkIsR0FDR0MsTUFESCxDQUNVLE1BRFYsRUFFR3pDLElBRkgsQ0FFUSxPQUZSLEVBRWlCLFlBRmpCLEVBR0cwQyxLQUhILENBR1MwQixrQkFIVCxFQUlHcEUsSUFKSCxDQUlRLFdBSlIsRUFJcUIsVUFBQ1QsQ0FBRCxFQUFPO0FBQ3hCLFlBQU0yRSxDQUFDLEdBQUczSCxVQUFVLENBQUNnRCxDQUFDLENBQUN5RSxVQUFGLENBQWF4QyxRQUFiLENBQXNCQyxXQUF2QixDQUFwQjtBQUNBLG1DQUFvQnlDLENBQUMsQ0FBQyxDQUFELENBQXJCLGNBQTRCQSxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQU9yRixLQUFLLENBQUNsQyxTQUF6QztBQUNELE9BUEgsRUFRR2lELElBUkgsQ0FRUSxVQUFDTCxDQUFELEVBQU87QUFDWCxlQUFPOEUsV0FBVyxDQUFDOUUsQ0FBQyxDQUFDeUUsVUFBRixDQUFhNUYsS0FBZCxDQUFsQjtBQUNELE9BVkg7QUFZQWdHLHdCQUFrQixDQUFDVCxJQUFuQixHQUNHdEIsTUFESDs7QUFHQSxVQUFJeEQsS0FBSyxDQUFDUixNQUFOLElBQWdCcEMsS0FBSyxHQUFHNEMsS0FBSyxDQUFDUCxNQUFOLENBQWFwQyxVQUF6QyxFQUFxRDtBQUNuRDtBQUNBLFlBQU1vSSxJQUFJLEdBQUc3RCx1REFBQSxDQUFpQjVCLEtBQUssQ0FBQzFDLEdBQXZCLEVBQTRCMEMsS0FBSyxDQUFDMUMsR0FBTixDQUFVdUUsT0FBVixDQUFrQjRELElBQTlDLENBQWI7QUFFQSxZQUFNQyxlQUFlLEdBQUcsS0FBS3hGLFNBQUwsR0FDckJZLFlBRHFCLENBQ1IsYUFEUSxFQUVyQlQsT0FGcUIsQ0FFYixNQUZhLEVBRUwsS0FGSyxFQUdyQmUsS0FIcUIsQ0FHZixZQUhlLEVBR0QsUUFIQyxFQUlyQkEsS0FKcUIsQ0FJZixPQUplLFlBSUhwQixLQUFLLENBQUNQLE1BQU4sQ0FBYXJDLEtBSlYsU0FLckJnRSxLQUxxQixDQUtmLFFBTGUsWUFLRnBCLEtBQUssQ0FBQ1AsTUFBTixDQUFhQyxNQUxYLFFBQXhCO0FBT0EsWUFBTUQsTUFBTSxHQUFHaUcsZUFBZSxDQUFDNUUsWUFBaEIsQ0FBNkIsS0FBN0IsRUFDWk0sS0FEWSxDQUNOLFFBRE0sWUFDT3BCLEtBQUssQ0FBQ2hELFFBRGIsaUJBRVptRSxJQUZZLENBRVAsT0FGTyxFQUVFbkIsS0FBSyxDQUFDUCxNQUFOLENBQWFyQyxLQUZmLEVBR1orRCxJQUhZLENBR1AsUUFITyxFQUdHbkIsS0FBSyxDQUFDUCxNQUFOLENBQWFDLE1BSGhCLENBQWY7QUFLQSxZQUFNaUcsYUFBYSxHQUFHbkgsa0RBQUUsQ0FBQ29ILGdCQUFILEdBQ25CekMsT0FEbUIsQ0FDWCxDQUFDbkQsS0FBSyxDQUFDUCxNQUFOLENBQWFyQyxLQUFkLEVBQXFCNEMsS0FBSyxDQUFDUCxNQUFOLENBQWFDLE1BQWxDLENBRFcsRUFDZ0MwRCxZQUFZLENBQUNwRCxLQUFLLENBQUN4QyxzQkFBTixDQUE2QkMsUUFBOUIsQ0FENUMsQ0FBdEI7QUFHQSxZQUFNb0ksT0FBTyxHQUFHckgsa0RBQUUsQ0FBQzhFLE9BQUgsR0FBYTVGLFVBQWIsQ0FBd0JpSSxhQUF4QixDQUFoQjtBQUVBbEcsY0FBTSxDQUFDcUIsWUFBUCxDQUFvQixNQUFwQixFQUE0QkssSUFBNUIsQ0FBaUMsR0FBakMsRUFBc0MwRSxPQUFPLENBQUNKLElBQUQsQ0FBN0MsRUFBcUR0RSxJQUFyRCxDQUEwRCxNQUExRCxFQUFrRW5CLEtBQUssQ0FBQ2hELFFBQXhFO0FBQ0EsWUFBTThJLFdBQVcsR0FBRzFJLEtBQUssR0FBR3VDLFFBQVIsR0FBbUJLLEtBQUssQ0FBQ1AsTUFBTixDQUFhckMsS0FBcEQ7QUFDQSxZQUFNMkksWUFBWSxHQUFHTCxlQUFlLENBQUM1RSxZQUFoQixDQUE2QixLQUE3QixFQUFvQ0ssSUFBcEMsQ0FBeUMsT0FBekMsRUFBa0QsZUFBbEQsRUFDbEJDLEtBRGtCLENBQ1osT0FEWSxZQUNBMEUsV0FEQSxTQUVsQjFFLEtBRmtCLENBRVosUUFGWSxZQUVDcEIsS0FBSyxDQUFDUCxNQUFOLENBQWFDLE1BRmQsU0FHbEJzRyxJQUhrQixDQUdieEgsa0RBQUUsQ0FBQ3lILElBQUgsR0FDSHRCLEVBREcsQ0FDQSxpQkFEQSxFQUNtQixZQUFXO0FBQ2hDb0Isc0JBQVksQ0FBQ0csU0FBYjtBQUNBakQsaUJBQU8sQ0FBQ0MsR0FBUixDQUFZLE1BQVo7QUFDRCxTQUpHLEVBS0h5QixFQUxHLENBS0EsWUFMQSxFQUtjLFlBQVc7QUFDM0IsY0FBSXdCLEtBQUssR0FBRzNILGtEQUFFLENBQUM0SCxLQUFILENBQVNDLENBQVQsR0FBWVAsV0FBVyxHQUFDLENBQXBDOztBQUNBLGNBQUl0SCxrREFBRSxDQUFDNEgsS0FBSCxDQUFTQyxDQUFULElBQWNQLFdBQVcsR0FBQyxDQUE5QixFQUFpQztBQUMvQkssaUJBQUssR0FBRyxDQUFSO0FBQ0QsV0FGRCxNQUVPLElBQUkzSCxrREFBRSxDQUFDNEgsS0FBSCxDQUFTQyxDQUFULElBQWVyRyxLQUFLLENBQUNQLE1BQU4sQ0FBYXJDLEtBQWIsR0FBbUIwSSxXQUF0QyxFQUFtRDtBQUN4RDdDLG1CQUFPLENBQUNDLEdBQVIsQ0FBWTFFLGtEQUFFLENBQUM0SCxLQUFILENBQVNDLENBQXJCLEVBQXdCckcsS0FBSyxDQUFDUCxNQUFOLENBQWFyQyxLQUFyQztBQUNBK0ksaUJBQUssR0FBR0wsV0FBUjtBQUNEOztBQUNEQyxzQkFBWSxDQUFDM0UsS0FBYixDQUFtQixNQUFuQixFQUEyQitFLEtBQUssR0FBRyxJQUFuQztBQUNELFNBZEcsQ0FIYSxDQUFyQixDQXZCbUQsQ0F5Q25EO0FBQ0QsT0ExQ0QsTUEwQ087QUFDTCxhQUFLakcsU0FBTCxHQUFpQm1CLE1BQWpCLENBQXdCLFVBQXhCLEVBQW9DaEIsT0FBcEMsQ0FBNEMsTUFBNUMsRUFBb0QsSUFBcEQ7QUFDRDs7QUFFRCxlQUFTdUUsS0FBVCxDQUFlMEIsV0FBZixFQUE0QjtBQUFBLFlBQ2xCL0QsVUFEa0IsR0FDSCtELFdBQVcsQ0FBQy9ELFVBQVosQ0FBdUJnRSxJQURwQixDQUNsQmhFLFVBRGtCO0FBRTFCLFlBQUlBLFVBQVUsQ0FBQ1MsS0FBZixFQUFzQjs7QUFGSSxpQ0FHUnhDLFlBQVksQ0FBQ2dHLElBQWIsQ0FBa0IsVUFBQXJDLENBQUM7QUFBQSxpQkFBSTVCLFVBQVUsQ0FBQ0MsU0FBWCxLQUF5QjJCLENBQUMsQ0FBQ3BGLEdBQS9CO0FBQUEsU0FBbkIsQ0FIUTtBQUFBLFlBR2xCUSxLQUhrQixzQkFHbEJBLEtBSGtCOztBQUsxQixZQUFJLENBQUNBLEtBQUQsSUFBVUEsS0FBSyxLQUFLZSxTQUF4QixFQUFtQztBQUNuQ29CLFNBQUMsQ0FBQzZCLFNBQUYsQ0FBWSxlQUFaLEVBQ0duQyxLQURILENBQ1MsTUFEVCxFQUNpQixNQURqQixFQUVHQSxLQUZILENBRVMsU0FGVCxFQUVvQnBCLEtBQUssQ0FBQ25CLHNCQUYxQjtBQUlBNkMsU0FBQyxDQUFDNkIsU0FBRixDQUFZLHVDQUFaLEVBQ0duQyxLQURILENBQ1MsU0FEVCxFQUNvQixDQURwQjtBQUdBTSxTQUFDLENBQUM2QixTQUFGLHlCQUE2QmhCLFVBQVUsQ0FBQ21CLElBQXhDLEdBQ0d0QyxLQURILENBQ1MsU0FEVCxFQUNvQixDQURwQixFQUVHQSxLQUZILENBRVMsTUFGVCxFQUVpQixVQUFDVixDQUFELEVBQU87QUFDcEIsaUJBQU9BLENBQUMsQ0FBQ25CLEtBQUYsR0FBVVMsS0FBSyxDQUFDekIsaUJBQU4sQ0FBd0JtQyxDQUFDLENBQUNuQixLQUExQixDQUFWLEdBQTZDLElBQXBEO0FBQ0QsU0FKSCxFQUtHYyxPQUxILENBS1csUUFMWCxFQUtxQixJQUxyQixFQU1Hb0csS0FOSDtBQVFBMUIsZUFBTyxDQUNKNUQsSUFESCxDQUNRLFdBRFIsRUFDcUIsVUFBU1QsQ0FBVCxFQUFZO0FBQzdCLGNBQU00RCxDQUFDLEdBQUc1RyxVQUFVLENBQUM2RSxVQUFVLENBQUNFLFFBQVosQ0FBcEI7QUFDQSxxQ0FBb0I2QixDQUFDLENBQUMsQ0FBRCxDQUFyQixjQUE0QkEsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPdEUsS0FBSyxDQUFDbEMsU0FBekM7QUFDRCxTQUpILEVBS0dzRCxLQUxILENBS1MsYUFMVCxFQUt3QixRQUx4QixFQU1HTCxJQU5ILENBTVEsVUFBQUwsQ0FBQztBQUFBLDhEQUNnQjZCLFVBQVUsQ0FBQytDLFlBQVgsQ0FBd0J0RixLQUFLLENBQUN6QyxNQUE5QixDQURoQixpQ0FFSGlJLFdBQVcsQ0FBQ2pHLEtBQUQsQ0FGUjtBQUFBLFNBTlQ7QUFVQW1DLFNBQUMsQ0FBQzZCLFNBQUYsc0JBQTBCaEIsVUFBVSxDQUFDbUIsSUFBckMsR0FDR3JELE9BREgsQ0FDVyxRQURYLEVBQ3FCLElBRHJCO0FBRUQ7O0FBRUQsZUFBU3dFLE1BQVQsQ0FBZ0J5QixXQUFoQixFQUE2QjtBQUFBLFlBRW5CL0QsVUFGbUIsR0FFSitELFdBQVcsQ0FBQy9ELFVBQVosQ0FBdUJnRSxJQUZuQixDQUVuQmhFLFVBRm1CO0FBRzNCLFlBQU1tRSxPQUFPLEdBQUdoRixDQUFDLENBQUM2QixTQUFGLHNCQUEwQmhCLFVBQVUsQ0FBQ21CLElBQXJDLEVBQWhCO0FBRUFoQyxTQUFDLENBQUM2QixTQUFGLENBQVksZUFBWixFQUE2Qm5DLEtBQTdCLENBQW1DLFNBQW5DLEVBQThDLENBQTlDLEVBQ0dmLE9BREgsQ0FDVyxRQURYLEVBQ3FCLEtBRHJCLEVBRUdlLEtBRkgsQ0FFUyxNQUZULEVBRWlCLE1BRmpCO0FBSUFNLFNBQUMsQ0FBQzZCLFNBQUYsQ0FBWSx1Q0FBWixFQUNHbkMsS0FESCxDQUNTLFNBRFQsRUFDb0IsQ0FEcEI7QUFHQTJELGVBQU8sQ0FBQ2hFLElBQVIsQ0FBYSxFQUFiO0FBRUEyRixlQUFPLENBQUNyRyxPQUFSLENBQWdCLFFBQWhCLEVBQTBCLEtBQTFCLEVBQ0dlLEtBREgsQ0FDUyxRQURULEVBQ21CcEIsS0FBSyxDQUFDbEQsZ0JBRHpCO0FBRUQ7O0FBRUQsZUFBUzBJLFdBQVQsQ0FBcUJqRyxLQUFyQixFQUE0QjtBQUMxQkEsYUFBSyxHQUFHb0gsSUFBSSxDQUFDQyxLQUFMLENBQVdySCxLQUFLLEdBQUcsR0FBbkIsQ0FBUjs7QUFDQSxZQUFJQSxLQUFLLEdBQUcsR0FBUixJQUFlQSxLQUFLLElBQUksQ0FBNUIsRUFBK0I7QUFDN0IscURBQWdDQSxLQUFLLENBQUNzSCxjQUFOLENBQXFCN0csS0FBSyxDQUFDekMsTUFBM0IsQ0FBaEMsZ0RBQXNHeUMsS0FBSyxDQUFDRixZQUE1RztBQUNELFNBRkQsTUFFTyxJQUFJUCxLQUFLLEdBQUcsQ0FBWixFQUFlO0FBQ3BCLDBGQUFtRVMsS0FBSyxDQUFDRixZQUF6RTtBQUNELFNBRk0sTUFFQSxJQUFJUCxLQUFLLEtBQUssR0FBZCxFQUFtQjtBQUN4QixxREFBZ0NTLEtBQUssQ0FBQ0gsWUFBdEM7QUFDRDtBQUNGOztBQUVELGFBQU8sSUFBUDtBQUNEOzs7O0VBMWhCeUJpSCw0RDs7QUE2aEI1QixTQUFTMUQsWUFBVCxDQUFzQjJELElBQXRCLEVBQTRCO0FBQzFCLE1BQUlDLElBQUksR0FBR0QsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFRLENBQVIsQ0FBWDtBQUNBLE1BQUlFLElBQUksR0FBR0YsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFRLENBQVIsQ0FBWDtBQUNBLE1BQUlHLElBQUksR0FBR0gsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFRLENBQVIsQ0FBWDtBQUNBLE1BQUlJLElBQUksR0FBR0osSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFRLENBQVIsQ0FBWCxDQUowQixDQU0xQjs7QUFDQSxNQUFJQyxJQUFJLEdBQUcsQ0FBUCxJQUFZQyxJQUFJLEdBQUcsQ0FBdkIsRUFBMEI7QUFDeEJBLFFBQUksSUFBSSxHQUFSO0FBQ0QsR0FUeUIsQ0FXMUI7OztBQUNBLE1BQUlDLElBQUksR0FBR0MsSUFBWCxFQUFpQjtBQUNmLFFBQUlDLEdBQUcsR0FBR0YsSUFBVjtBQUNBQSxRQUFJLEdBQUdDLElBQVA7QUFDQUEsUUFBSSxHQUFHQyxHQUFQO0FBQ0Q7O0FBRUQsTUFBSUMsS0FBSyxHQUFHLENBQUNKLElBQUksR0FBR0QsSUFBUixJQUFnQixDQUE1QjtBQUVBLFNBQU87QUFDTHRFLFFBQUksRUFBRSxTQUREO0FBRUxFLGVBQVcsRUFBRSxDQUFDLENBQ1osQ0FBQ29FLElBQUQsRUFBT0UsSUFBUCxDQURZLEVBRVosQ0FBQ0YsSUFBRCxFQUFPRyxJQUFQLENBRlksRUFHWixDQUFDSCxJQUFJLEdBQUdLLEtBQVIsRUFBZUYsSUFBZixDQUhZLEVBSVosQ0FBQ0gsSUFBSSxHQUFHLElBQUlLLEtBQVosRUFBbUJGLElBQW5CLENBSlksRUFLWixDQUFDSCxJQUFJLEdBQUcsSUFBSUssS0FBWixFQUFtQkYsSUFBbkIsQ0FMWSxFQU1aLENBQUNGLElBQUQsRUFBT0UsSUFBUCxDQU5ZLEVBT1osQ0FBQ0YsSUFBRCxFQUFPQyxJQUFQLENBUFksRUFRWixDQUFDRCxJQUFJLEdBQUdJLEtBQVIsRUFBZUgsSUFBZixDQVJZLEVBU1osQ0FBQ0QsSUFBSSxHQUFHLElBQUlJLEtBQVosRUFBbUJILElBQW5CLENBVFksRUFVWixDQUFDRCxJQUFJLEdBQUcsSUFBSUksS0FBWixFQUFtQkgsSUFBbkIsQ0FWWSxFQVdaLENBQUNGLElBQUQsRUFBT0UsSUFBUCxDQVhZLENBQUQ7QUFGUixHQUFQO0FBZ0JEOztBQUNjdEssNEVBQWYiLCJmaWxlIjoiLi9zcmMvbGliL2NoYXJ0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdG9wb2pzb24gZnJvbSAndG9wb2pzb24tY2xpZW50JztcblxuaW1wb3J0IEF0bGFzTWV0YWRhdGFDbGllbnQgZnJvbSAnQHJldXRlcnMtZ3JhcGhpY3MvZ3JhcGhpY3MtYXRsYXMtY2xpZW50JztcbmltcG9ydCBDaGFydENvbXBvbmVudCBmcm9tICcuL2Jhc2UvQ2hhcnRDb21wb25lbnQnO1xuaW1wb3J0IGQzIGZyb20gJy4vdXRpbHMvZDMnO1xuaW1wb3J0IHsgZ2VvVm9yb25vaSB9IGZyb20gJ2QzLWdlby12b3Jvbm9pJztcblxuY29uc3QgQXRsYXMgPSBuZXcgQXRsYXNNZXRhZGF0YUNsaWVudCgpO1xuLy8gaW1wb3J0IHRvcG9sb2d5IGZyb20gJ0ByZXV0ZXJzLWdyYXBoaWNzL2dyYXBoaWNzLWF0bGFzLWNsaWVudC90b3BvanNvbi9nbG9iYWwuMTEwbS5qc29uJztcblxuY2xhc3MgR2xvYmFsUmF0ZU1hcCBleHRlbmRzIENoYXJ0Q29tcG9uZW50IHtcbiAgZGVmYXVsdFByb3BzID0ge1xuICAgIG1hcF9zdHJva2Vfd2lkdGg6IDEsXG4gICAgbWFwX3N0cm9rZV9jb2xvcjogJyMyZjM1M2YnLFxuICAgIG1hcF9oaWdobGlnaHRfc3Ryb2tlX3dpZHRoOiAxLjIsXG4gICAgbWFwX2ZpbGw6ICdyZ2JhKDE1MywxNTMsMTUzLDAuMjUpJyxcbiAgICBtYXBfc3Ryb2tlX2NvbG9yX2FjdGl2ZTogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43NSknLFxuICAgIHNwaWtlX2NvbG9yOiAnI2VlYzMzMScsXG4gICAgaGVpZ2h0UmF0aW86ICh3aWR0aCwgYnJlYWtwb2ludCkgPT4gKHdpZHRoPGJyZWFrcG9pbnQ/MC44OjAuNSksXG4gICAgZ2VvOiBmYWxzZSxcbiAgICBsb2NhbGU6ICdlbicsXG4gICAgbWFwX2N1c3RvbV9wcm9qZWN0aW9uczoge1xuICAgICAgY2xpcF9ib3g6IFtbLTEzMCwgNzBdLCBbMTk0LCAtMzldXSxcbiAgICAgIHByb2plY3Rpb246ICdnZW9OYXR1cmFsRWFydGgxJyxcbiAgICAgIGNlbnRlcjogbnVsbCxcbiAgICAgIHNjYWxlOiBudWxsLFxuICAgICAgcm90YXRlOiBudWxsLFxuICAgIH0sXG4gICAgaG92ZXJfZ2FwOiAxMi41LFxuICAgIHNwaWtlX2hlaWdodDogMzUsXG4gICAgc3Bpa2Vfc2l6ZTogMy41LFxuICAgIGdldERhdGFSYW5nZTogKHdpZHRoKSA9PiAoeyBtaW46IDAsIG1heDogMSB9KSxcbiAgICBzcGlrZV9zdHJva2Vfd2lkdGg6IDAuNSxcbiAgICBzcGlrZV9oaWdobGlnaHRfc3Ryb2tlX3dpZHRoOiAyLFxuICAgIHNwaWtlX2hpZ2hsaWdodF9maWxsOiB0cnVlLFxuICAgIHNwaWtlX2NvbG9yX3NjYWxlOiBkMy5zY2FsZVRocmVzaG9sZCgpIC8vIENhbiB1c2UgYSBzY2FsZSBhcyBhIHByb3AhXG4gICAgICAuZG9tYWluKFswLjc1LCAwLjldKVxuICAgICAgLnJhbmdlKFsnI2NjYycsICcjZjY4ZTI2JywgJyNkZTJkMjYnXSksXG4gICAgc3Bpa2Vfc3Ryb2tlX3dpZHRoX3NjYWxlOiBkMy5zY2FsZVRocmVzaG9sZCgpIC8vIENhbiB1c2UgYSBzY2FsZSBhcyBhIHByb3AhXG4gICAgICAuZG9tYWluKFswLjc1LCAwLjldKVxuICAgICAgLnJhbmdlKFswLjYsIDAuOSwgMS4xXSksXG4gICAgc3Bpa2VfaW5hY3RpdmVfb3BhY2l0eTogMSxcbiAgICBkaXNwdXRlZF9kYXNoYXJyYXk6IFs1LCAzXSxcbiAgICBrZXk6IHtcbiAgICAgIHRleHQ6IHtcbiAgICAgICAgbWFpbl90ZXh0OiAnSG93IGNsb3NlIGlzIHRoZSBjdXJyZW50IHdlZWtseSBhdmVyYWdlIHRvIHRoZSBjb3VudHJ54oCZcyBwZWFrJyxcbiAgICAgICAgcmVkX3BlYWs6ICc+OTAlJyxcbiAgICAgICAgb3JhbmdlX3BlYWs6ICc5MCB0byA3NSUnLFxuICAgICAgICB3aGl0ZV9wZWFrOiAnPDc1JScsXG4gICAgICB9LFxuICAgICAgd2lkdGg6IDE0MCxcbiAgICB9LFxuICAgIGFubm90YXRpb25zOiB7XG4gICAgICBuYW1lOiBbXSxcbiAgICAgIHZhbHVlOiBbXSxcbiAgICB9LFxuICAgIG1vYmlsZTogdHJ1ZSxcbiAgICByZWZCb3g6IHtcbiAgICAgIGhlaWdodDogOTAsXG4gICAgICB3aWR0aDogMTgwLFxuICAgICAgYnJlYWtwb2ludDogOTAwLFxuICAgICAgdXNlV2lkdGg6ICh3aWR0aCkgPT4gKHdpZHRoICogMilcbiAgICB9LFxuICAgIGludGVyYWN0aW9uOiB0cnVlLFxuICAgIGF0X3BlYWtfdGV4dDogJ0F0IHBlYWsnLFxuICAgIG9mX3BlYWtfdGV4dDogJ29mIHBlYWsnLFxuICB9O1xuXG4gIGRyYXcoKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YSgpO1xuICAgIGNvbnN0IHByb3BzID0gdGhpcy5wcm9wcygpO1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnNlbGVjdGlvbigpLm5vZGUoKTtcbiAgICBsZXQgeyB3aWR0aCB9ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCByYXRpbyA9IHByb3BzLmhlaWdodFJhdGlvKHdpZHRoLCBwcm9wcy5yZWZCb3guYnJlYWtwb2ludClcbiAgICBsZXQgdXNlV2lkdGgsIGhlaWdodDtcbiAgICBpZiAod2lkdGggPCBwcm9wcy5yZWZCb3guYnJlYWtwb2ludCkge1xuICAgICAgdXNlV2lkdGggPSBwcm9wcy5yZWZCb3gudXNlV2lkdGgod2lkdGgpO1xuICAgICAgdGhpcy5zZWxlY3Rpb24oKS5jbGFzc2VkKCdtb2JpbGUnLCB0cnVlKTtcbiAgICAgIGhlaWdodCA9IHVzZVdpZHRoICogMC41O1xuICAgIH0gZWxzZSB7XG4gICAgICB1c2VXaWR0aCA9IHdpZHRoO1xuICAgICAgdGhpcy5zZWxlY3Rpb24oKS5jbGFzc2VkKCdtb2JpbGUnLCBmYWxzZSk7XG4gICAgICBoZWlnaHQgPSB3aWR0aCAqIHJhdGlvO1xuICAgIH1cblxuICAgIGNvbnN0IHsgbWluOiBmaWx0ZXJNaW4sIG1heDogZmlsdGVyTWF4IH0gPSBwcm9wcy5nZXREYXRhUmFuZ2Uod2lkdGgpO1xuICAgIGNvbnN0IGZpbHRlcmVkRGF0YSA9IGRhdGEuZmlsdGVyKGQgPT4gZC52YWx1ZSA+PSBmaWx0ZXJNaW4gJiYgZC52YWx1ZSA8PSBmaWx0ZXJNYXgpO1xuXG4gICAgY29uc3Qgc2NhbGVZID0gZDMuc2NhbGVMaW5lYXIoKS5yYW5nZShbMCwgcHJvcHMuc3Bpa2VfaGVpZ2h0XSkuZG9tYWluKFswLCAxXSk7XG4gICAgY29uc3Qga2V5Qm94ID0gdGhpcy5zZWxlY3Rpb24oKVxuICAgICAgLmFwcGVuZFNlbGVjdCgnZGl2LmtleScpO1xuXG4gICAga2V5Qm94LmFwcGVuZFNlbGVjdCgncC5sZWZ0LXRleHQudGV4dC1pbmxpbmUua2V5LXRleHQnKVxuICAgICAgLmh0bWwocHJvcHMua2V5LnRleHQubWFpbl90ZXh0KTtcblxuICAgIGNvbnN0IGtleVN2Z0NvbnRhaW5lciA9IGtleUJveC5hcHBlbmRTZWxlY3QoJ2Rpdi5zdmctY29udGFpbmVyLnRleHQtaW5saW5lJylcbiAgICBjb25zdCBrZXlHYXAgPSBwcm9wcy5rZXkud2lkdGggLyAzO1xuICAgIC8vIGFkZCBrZXkgYm94XG4gICAgY29uc3Qga2V5U3ZnID0ga2V5U3ZnQ29udGFpbmVyLmFwcGVuZFNlbGVjdCgnc3ZnLnRleHQtaW5saW5lJylcbiAgICAgIC5hdHRyKCdoZWlnaHQnLCBwcm9wcy5zcGlrZV9oZWlnaHQgKyA2KVxuICAgICAgLnN0eWxlKCdmaWxsJywgJ25vbmUnKVxuICAgICAgLmF0dHIoJ3dpZHRoJywgcHJvcHMua2V5LndpZHRoIC0gKGtleUdhcCAqIDAuMjcpKTtcblxuICAgIGtleVN2Zy5hcHBlbmRTZWxlY3QoJ2RlZnMnKVxuICAgICAgLmFwcGVuZFNlbGVjdCgnbWFya2VyLnRvcCcpXG4gICAgICAuYXR0cignaWQnLCAnYXJyb3ctdXAnKVxuICAgICAgLmF0dHIoJ21hcmtlcldpZHRoJywgMTIpXG4gICAgICAuYXR0cignbWFya2VySGVpZ2h0JywgMTApXG4gICAgICAuYXR0cigncmVmWScsIDUpXG4gICAgICAuYXR0cigncmVmWCcsIDYpXG4gICAgICAuYXR0cignb3JpZW50JywgJ2F1dG8nKVxuICAgICAgLmFwcGVuZFNlbGVjdCgncGF0aC51cCcpXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsICd3aGl0ZScpXG4gICAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsIDAuNilcbiAgICAgIC5hdHRyKCdkJywgJ00wIDAgTDYgNSBMMCAxMCcpO1xuXG4gICAga2V5U3ZnLnNlbGVjdCgnZGVmcycpXG4gICAgICAuYXBwZW5kU2VsZWN0KCdtYXJrZXIuZG93bicpXG4gICAgICAuYXR0cignaWQnLCAnYXJyb3ctZG93bicpXG4gICAgICAuYXR0cignbWFya2VyV2lkdGgnLCAxMilcbiAgICAgIC5hdHRyKCdtYXJrZXJIZWlnaHQnLCAxMClcbiAgICAgIC5hdHRyKCdyZWZZJywgNSlcbiAgICAgIC5hdHRyKCdyZWZYJywgMClcbiAgICAgIC5hdHRyKCdvcmllbnQnLCAnYXV0bycpXG4gICAgICAuYXBwZW5kU2VsZWN0KCdwYXRoLmRvd24nKVxuICAgICAgLnN0eWxlKCdzdHJva2UnLCAnd2hpdGUnKVxuICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCAwLjYpXG4gICAgICAuYXR0cignZCcsICdNNiAwIEwwIDUgTDYgMTAnKTtcblxuICAgIC8vIGFkZCBzcGlrZSAxXG4gICAga2V5U3ZnLmFwcGVuZFNlbGVjdCgncGF0aC5yZWQtc3Bpa2UuaGlnaCcpXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsIHByb3BzLnNwaWtlX2NvbG9yX3NjYWxlKDEpKVxuICAgICAgLmF0dHIoJ2QnLCAoZCkgPT4ge1xuICAgICAgICBjb25zdCBvYmogPSBba2V5R2FwICogMC43LCBwcm9wcy5zcGlrZV9oZWlnaHRdO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHNjYWxlWSgxKTtcbiAgICAgICAgcmV0dXJuICdNJyArIChvYmpbMF0gLSBwcm9wcy5zcGlrZV9zaXplKSArICcgJyArIG9ialsxXSArICcgTCcgKyBvYmpbMF0gKyAnICcgKyAob2JqWzFdIC0gdmFsdWUpICsgJyBMJyArIChvYmpbMF0gKyBwcm9wcy5zcGlrZV9zaXplKSArICcgJyArIG9ialsxXSArICcgJztcbiAgICAgIH0pO1xuXG4gICAga2V5U3ZnLmFwcGVuZFNlbGVjdCgncGF0aC5yZWQtc3Bpa2UubG93JylcbiAgICAgIC5zdHlsZSgnc3Ryb2tlJywgcHJvcHMuc3Bpa2VfY29sb3Jfc2NhbGUoMC45KSlcbiAgICAgIC5zdHlsZSgnZmlsbCcscHJvcHMuc3Bpa2VfY29sb3Jfc2NhbGUoMC45KSlcbiAgICAgIC5hdHRyKCdkJywgKGQpID0+IHtcbiAgICAgICAgY29uc3Qgb2JqID0gW2tleUdhcCAqIDAuNyArIHByb3BzLnNwaWtlX3NpemUqMS40LCBwcm9wcy5zcGlrZV9oZWlnaHRdO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHNjYWxlWSgwLjkpO1xuICAgICAgICByZXR1cm4gJ00nICsgKG9ialswXSAtIHByb3BzLnNwaWtlX3NpemUpICsgJyAnICsgb2JqWzFdICsgJyBMJyArIG9ialswXSArICcgJyArIChvYmpbMV0gLSB2YWx1ZSkgKyAnIEwnICsgKG9ialswXSArIHByb3BzLnNwaWtlX3NpemUpICsgJyAnICsgb2JqWzFdICsgJyAnO1xuICAgICAgfSk7XG5cbiAgICBrZXlTdmcuYXBwZW5kU2VsZWN0KCdwYXRoLm9yYW5nZS1zcGlrZS5oaWdoJylcbiAgICAgIC5zdHlsZSgnc3Ryb2tlJywgcHJvcHMuc3Bpa2VfY29sb3Jfc2NhbGUoMC44OSkpXG4gICAgICAuYXR0cignZCcsIChkLCBpKSA9PiB7XG4gICAgICAgIGNvbnN0IG9iaiA9IFtrZXlHYXAgKiAxLjUsIHByb3BzLnNwaWtlX2hlaWdodF07XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc2NhbGVZKDAuODkpO1xuICAgICAgICByZXR1cm4gJ00nICsgKG9ialswXSAtIHByb3BzLnNwaWtlX3NpemUpICsgJyAnICsgb2JqWzFdICsgJyBMJyArIG9ialswXSArICcgJyArIChvYmpbMV0gLSB2YWx1ZSkgKyAnIEwnICsgKG9ialswXSArIHByb3BzLnNwaWtlX3NpemUpICsgJyAnICsgb2JqWzFdICsgJyAnO1xuICAgICAgfSk7XG5cbiAgICBrZXlTdmcuYXBwZW5kU2VsZWN0KCdwYXRoLm9yYW5nZS1zcGlrZS5sb3cnKVxuICAgICAgLnN0eWxlKCdzdHJva2UnLCBwcm9wcy5zcGlrZV9jb2xvcl9zY2FsZSgwLjc1KSlcbiAgICAgIC5zdHlsZSgnZmlsbCcscHJvcHMuc3Bpa2VfY29sb3Jfc2NhbGUoMC43NSkpXG4gICAgICAuYXR0cignZCcsIChkKSA9PiB7XG4gICAgICAgIGNvbnN0IG9iaiA9IFtrZXlHYXAgKiAxLjUrcHJvcHMuc3Bpa2Vfc2l6ZSoxLjQsIHByb3BzLnNwaWtlX2hlaWdodF07XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc2NhbGVZKDAuNzUpO1xuICAgICAgICByZXR1cm4gJ00nICsgKG9ialswXSAtIHByb3BzLnNwaWtlX3NpemUpICsgJyAnICsgb2JqWzFdICsgJyBMJyArIG9ialswXSArICcgJyArIChvYmpbMV0gLSB2YWx1ZSkgKyAnIEwnICsgKG9ialswXSArIHByb3BzLnNwaWtlX3NpemUpICsgJyAnICsgb2JqWzFdICsgJyAnO1xuICAgICAgfSk7XG5cbiAgICBrZXlTdmcuYXBwZW5kU2VsZWN0KCdwYXRoLndoaXRlLXNwaWtlLmhpZ2gnKVxuICAgICAgLnN0eWxlKCdzdHJva2UnLCBwcm9wcy5zcGlrZV9jb2xvcl9zY2FsZSgwLjc0KSlcbiAgICAgIC5hdHRyKCdkJywgKGQsIGkpID0+IHtcbiAgICAgICAgY29uc3Qgb2JqID0gW2tleUdhcCAqIDIuMywgcHJvcHMuc3Bpa2VfaGVpZ2h0XTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBzY2FsZVkoMC43NCk7XG4gICAgICAgIHJldHVybiAnTScgKyAob2JqWzBdIC0gcHJvcHMuc3Bpa2Vfc2l6ZSkgKyAnICcgKyBvYmpbMV0gKyAnIEwnICsgb2JqWzBdICsgJyAnICsgKG9ialsxXSAtIHZhbHVlKSArICcgTCcgKyAob2JqWzBdICsgcHJvcHMuc3Bpa2Vfc2l6ZSkgKyAnICcgKyBvYmpbMV0gKyAnICc7XG4gICAgICB9KTtcblxuICAgIGtleVN2Zy5hcHBlbmRTZWxlY3QoJ3BhdGgud2hpdGUtc3Bpa2UubG93JylcbiAgICAgIC5zdHlsZSgnc3Ryb2tlJywgJyNjY2MnKVxuICAgICAgLnN0eWxlKCdmaWxsJywgJyNjY2MnKVxuICAgICAgLmF0dHIoJ2QnLCAoZCwgaSkgPT4ge1xuICAgICAgICBjb25zdCBvYmogPSBba2V5R2FwICogMi4zK3Byb3BzLnNwaWtlX3NpemUqMS40LCBwcm9wcy5zcGlrZV9oZWlnaHRdO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHNjYWxlWSgwKTtcbiAgICAgICAgcmV0dXJuICdNJyArIChvYmpbMF0gLSBwcm9wcy5zcGlrZV9zaXplKSArICcgJyArIG9ialsxXSArICcgTCcgKyBvYmpbMF0gKyAnICcgKyAob2JqWzFdIC0gdmFsdWUpICsgJyBMJyArIChvYmpbMF0gKyBwcm9wcy5zcGlrZV9zaXplKSArICcgJyArIG9ialsxXSArICcgJztcbiAgICAgIH0pO1xuXG4gICAga2V5U3ZnLmFwcGVuZFNlbGVjdCgnbGluZScpXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsICd3aGl0ZScpXG4gICAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsIC43KVxuICAgICAgLmF0dHIoJ3gxJywgMTApXG4gICAgICAuYXR0cigneDInLCAxMClcbiAgICAgIC5hdHRyKCd5MScsIDcpXG4gICAgICAuYXR0cigneTEnLCBwcm9wcy5zcGlrZV9oZWlnaHQpXG4gICAgICAuYXR0cignbWFya2VyLWVuZCcsICd1cmwoI2Fycm93LXVwKScpXG4gICAgICAuYXR0cignbWFya2VyLXN0YXJ0JywgJ3VybCgjYXJyb3ctZG93biknKTtcblxuICAgIGNvbnN0IGJvdHRvbUtleVRleHQgPSBrZXlTdmdDb250YWluZXIuYXBwZW5kU2VsZWN0KCdkaXYuYm90dG9tLXRleHQnKVxuICAgICAgLnN0eWxlKCdwYWRkaW5nLWxlZnQnLCBgJHtrZXlHYXAgKiAwLjR9cHhgKTtcblxuICAgIGJvdHRvbUtleVRleHQuYXBwZW5kU2VsZWN0KCdwLnJlZC10ZXh0LmtleS10ZXh0LnRleHQtaW5saW5lJylcbiAgICAgIC5zdHlsZSgnd2lkdGgnLCBgJHtrZXlHYXAgKiAwLjh9cHhgKVxuICAgICAgLmh0bWwocHJvcHMua2V5LnRleHQucmVkX3BlYWspO1xuICAgIGJvdHRvbUtleVRleHQuYXBwZW5kU2VsZWN0KCdwLm9yYW5nZS10ZXh0LmtleS10ZXh0LnRleHQtaW5saW5lJylcbiAgICAgIC5zdHlsZSgnd2lkdGgnLCBgJHtrZXlHYXAgKiAwLjh9cHhgKVxuICAgICAgLmh0bWwocHJvcHMua2V5LnRleHQub3JhbmdlX3BlYWspO1xuICAgIGJvdHRvbUtleVRleHQuYXBwZW5kU2VsZWN0KCdwLndoaXRlLXRleHQua2V5LXRleHQudGV4dC1pbmxpbmUnKVxuICAgICAgLnN0eWxlKCd3aWR0aCcsIGAke2tleUdhcCAqIDAuOH1weGApXG4gICAgICAuaHRtbChwcm9wcy5rZXkudGV4dC53aGl0ZV9wZWFrKTtcblxuICAgIC8vIFNWRyBiZWdpbnMgaGVyZVxuICAgIGNvbnN0IHN2ZyA9IHRoaXMuc2VsZWN0aW9uKClcbiAgICAgIC5hcHBlbmRTZWxlY3QoJ2Rpdi5jaGFydC1jb250YWluZXItZGl2JylcbiAgICAgIC5zdHlsZSgnb3ZlcmZsb3cteCcsICdzY3JvbGwnKVxuICAgICAgLmFwcGVuZFNlbGVjdCgnc3ZnLmNoYXJ0JykgLy8gc2VlIGRvY3MgaW4gLi91dGlscy9kMy5qc1xuICAgICAgLmF0dHIoJ3dpZHRoJywgdXNlV2lkdGgpXG4gICAgICAuYXR0cignaGVpZ2h0JywgaGVpZ2h0KTtcblxuICAgIGNvbnN0IGcgPSBzdmcuYXBwZW5kU2VsZWN0KCdnJyk7XG5cbiAgICBpZiAoIWQzW3Byb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMucHJvamVjdGlvbl0pIHtcbiAgICAgIHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMucHJvamVjdGlvbiA9ICdnZW9OYXR1cmFsRWFydGgxJztcbiAgICB9XG5cbiAgICBjb25zdCBwcm9qZWN0aW9uID0gZDNbcHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5wcm9qZWN0aW9uXSgpO1xuICAgIGNvbnN0IGNvdW50cmllcyA9IHRvcG9qc29uLmZlYXR1cmUocHJvcHMuZ2VvLCBwcm9wcy5nZW8ub2JqZWN0cy5jb3VudHJpZXMpO1xuICAgIGxldCBkaXNwdXRlZDtcbiAgICBpZiAocHJvcHMuZ2VvLm9iamVjdHMuZGlzcHV0ZWRCb3VuZGFyaWVzKSB7XG4gICAgICBkaXNwdXRlZCA9IHRvcG9qc29uLm1lc2gocHJvcHMuZ2VvLCBwcm9wcy5nZW8ub2JqZWN0cy5kaXNwdXRlZEJvdW5kYXJpZXMpOyAgXG4gICAgfVxuXG4gICAgaWYgKHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMuY2VudGVyICYmIHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMuY2VudGVyLmxlbmd0aCA9PT0gMikge1xuICAgICAgcHJvamVjdGlvbi5jZW50ZXIocHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5jZW50ZXIpO1xuICAgIH1cblxuICAgIGlmIChwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLnJvdGF0ZSAmJiBwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLnJvdGF0ZS5sZW5ndGggPT09IDIpIHtcbiAgICAgIHByb2plY3Rpb24ucm90YXRlKHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMucm90YXRlKTtcbiAgICB9XG5cbiAgICBjb25zdCBmaWx0ZXJlZENvdW50cnlLZXlzID0gZmlsdGVyZWREYXRhLm1hcChkID0+IGQua2V5KTtcbiAgICBjb25zdCBjb3VudHJ5Q2VudHJvaWRzID0gY291bnRyaWVzLmZlYXR1cmVzXG4gICAgICAuZmlsdGVyKGMgPT4gZmlsdGVyZWRDb3VudHJ5S2V5cy5pbmNsdWRlcyhjLnByb3BlcnRpZXMuaXNvQWxwaGEyKSlcbiAgICAgIC5maWx0ZXIoYyA9PiBjLnByb3BlcnRpZXMuY2VudHJvaWQubGVuZ3RoPT0yICYmIGMucHJvcGVydGllcy5jZW50cm9pZFswXSAmJiBjLnByb3BlcnRpZXMuY2VudHJvaWRbMV0pXG4gICAgICAubWFwKCh7IHByb3BlcnRpZXMgfSkgPT4gKHtcbiAgICAgICAgdHlwZTogJ0ZlYXR1cmUnLFxuICAgICAgICBwcm9wZXJ0aWVzLFxuICAgICAgICBnZW9tZXRyeToge1xuICAgICAgICAgIHR5cGU6ICdQb2ludCcsXG4gICAgICAgICAgY29vcmRpbmF0ZXM6IHByb3BlcnRpZXMuY2VudHJvaWQsXG4gICAgICAgIH0sXG4gICAgICB9KSk7XG5cbiAgICAvLyBBZGRpbmcgc29tZSBwb2ludHMgaW4gdGhlIG9jZWFuIHRvIGNyZWF0ZSB2b3Jvbm9pIHNwYWNlcyB0aGF0IHdpbGxcbiAgICAvLyByZXNldCB0aGUgbWFwLCBzbyBhcyB5b3VyIGN1cnNvciB0cmFjZXMgbGFuZCBtYXNzZXMsIHlvdSBnZXQgaGlnaGxpZ2h0cyxcbiAgICAvLyBidXQgaW4gdGhlIG9jZWFuIHlvdSBjYW4gc2VlIHRoZSB3aG9sZSB3b3JsZCBwaWN0dXJlLi4uXG4gICAgY29uc3QgcmVzZXRQb2ludHMgPSBbXG4gICAgICBbLTQwLjI0ODEwOCwgMzguNjUzNzg4XSwgLy8gTm9ydGggQXRsYW50aWNcbiAgICAgIFstMjkuODAwMDE4LCAxNC41MzYyMjBdLCAvLyBDZW50cmFsIEF0bGFudGljXG4gICAgICBbLTE1LjQ4NTU0OCwgLTEyLjk0MTY0OF0sIC8vIFNvdXRoIEF0bGFudGljXG4gICAgICBbLTE3NC44MDg2NTksIDM1Ljg1NjEyN10sIC8vIE5vcnRoIFBhY2lmaWNcbiAgICAgIFstMTE3LjMyNDQxNCwgLTExLjEzMDgyMV0sIC8vIFNvdXRoIFBhY2lmaWNcbiAgICAgIFstMTczLjAzOTEzMSwgLTQ0LjkyMDY5N10sIC8vIFNvdXRod2VzdCBwYWNpZmljXG4gICAgICBbNjQuNDA3MDI0LCA1LjA0NTgxNV0sIC8vIE5vcnRoIEluZGlhblxuICAgICAgWzc1LjU2OTEyOCwgLTMxLjY5MTkzOV0sIC8vIFNvdXRoIEluZGlhblxuICAgICAgWy01Ljc4MzI2NiwgLTgzLjYwODA3N10sIC8vIEFudGFyY3RpY2FcbiAgICBdO1xuICAgIGNvbnN0IHZvcm9ub2lDZW50cm9pZHMgPSBjb3VudHJ5Q2VudHJvaWRzLmNvbmNhdChyZXNldFBvaW50cy5tYXAoY2VudHJvaWQgPT4gKHtcbiAgICAgIHR5cGU6ICdGZWF0dXJlJyxcbiAgICAgIHByb3BlcnRpZXM6IHsgcmVzZXQ6IHRydWUgfSxcbiAgICAgIGdlb21ldHJ5OiB7XG4gICAgICAgIHR5cGU6ICdQb2ludCcsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBjZW50cm9pZCxcbiAgICAgIH0sXG4gICAgfSkpKTtcblxuICAgIGlmIChwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLmNsaXBfYm94ICYmIChwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLmNsaXBfYm94Lmxlbmd0aCA9PT0gMiAmJiBwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLmNsaXBfYm94WzBdLmxlbmd0aCA9PT0gMiAmJiBwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLmNsaXBfYm94WzFdLmxlbmd0aCA9PT0gMikpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdjbGlwcGluZyEgOiknKTtcbiAgICAgIHByb2plY3Rpb24uZml0U2l6ZShbdXNlV2lkdGgsIGhlaWdodF0sIG1ha2VSYW5nZUJveChwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLmNsaXBfYm94KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKCdjYW50IGNsaXAgOignKTtcbiAgICAgIHByb2plY3Rpb24uZml0U2l6ZShbdXNlV2lkdGgsIGhlaWdodF0sIGNvdW50cmllcyk7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMuc2NhbGUpIHtcbiAgICAgIHByb2plY3Rpb24uc2NhbGUocHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5zY2FsZSk7XG4gICAgfVxuXG4gICAgY29uc3QgcGF0aCA9IGQzLmdlb1BhdGgoKS5wcm9qZWN0aW9uKHByb2plY3Rpb24pO1xuICAgIHN2Zy5zZWxlY3RBbGwoJy5jb3VudHJ5LC5kaXNwdXRlZCwuY2VudHJvaWQnKS5yZW1vdmUoKTtcblxuICAgIGNvbnN0IGNvdW50cnlHcm91cHMgPSBnLmFwcGVuZFNlbGVjdCgnZy5jb3VudHJpZXMnKVxuICAgICAgLnN0eWxlKCdwb2ludGVyLWV2ZW50cycsICdub25lJylcbiAgICAgIC5zdHlsZSgnZmlsbCcsIHByb3BzLm1hcF9maWxsKVxuICAgICAgLnNlbGVjdEFsbCgncGF0aC5jb3VudHJ5JylcbiAgICAgIC5kYXRhKGNvdW50cmllcy5mZWF0dXJlcy5maWx0ZXIoZCA9PiBkLnByb3BlcnRpZXMuc2x1ZyAhPT0gJ2FudGFyY3RpY2EnKSwgZCA9PiBkLnByb3BlcnRpZXMuc2x1Zyk7XG5cbiAgICBjb3VudHJ5R3JvdXBzXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmFwcGVuZCgncGF0aCcpXG4gICAgICAuYXR0cignY2xhc3MnLCBkID0+IGBjb3VudHJ5IGMtJHtkLnByb3BlcnRpZXMuc2x1Z30gbGV2ZWwtMGApXG4gICAgICAubWVyZ2UoY291bnRyeUdyb3VwcylcbiAgICAgIC5zdHlsZSgnc3Ryb2tlJywgcHJvcHMubWFwX3N0cm9rZV9jb2xvcilcbiAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgcHJvcHMubWFwX3N0cm9rZV93aWR0aClcbiAgICAgIC5hdHRyKCdkJywgcGF0aCk7XG5cbiAgICBjb25zb2xlLmxvZyhnLnNlbGVjdCgnLmNvdW50cmllcycpLm5vZGUoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSk7XG4gICAgaWYgKGRpc3B1dGVkKSB7XG4gICAgICBnLmFwcGVuZFNlbGVjdCgncGF0aC5kaXNwdXRlZCcpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdkaXNwdXRlZCBsZXZlbC0wJylcbiAgICAgICAgLnN0eWxlKCdwb2ludGVyLWV2ZW50cycsICdub25lJylcbiAgICAgICAgLnN0eWxlKCdzdHJva2UnLCBwcm9wcy5tYXBfc3Ryb2tlX2NvbG9yKVxuICAgICAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsIHByb3BzLm1hcF9zdHJva2Vfd2lkdGgpXG4gICAgICAgIC5zdHlsZSgnZmlsbCcsICdub25lJylcbiAgICAgICAgLnN0eWxlKCdzdHJva2UtZGFzaGFycmF5JywgcHJvcHMuZGlzcHV0ZWRfZGFzaGFycmF5KVxuICAgICAgICAuYXR0cignZCcsIHBhdGgoZGlzcHV0ZWQpKTtcbiAgICB9XG5cbiAgICBjb25zdCBzb3J0ZWRDZW50cm9pZHMgPSBjb3VudHJ5Q2VudHJvaWRzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIGNvbnN0IGFPID0gZmlsdGVyZWREYXRhLmZpbHRlcihlID0+IGEucHJvcGVydGllcy5pc29BbHBoYTIgPT09IGUua2V5KVswXTtcbiAgICAgIGNvbnN0IGJPID0gZmlsdGVyZWREYXRhLmZpbHRlcihlID0+IGIucHJvcGVydGllcy5pc29BbHBoYTIgPT09IGUua2V5KVswXTtcbiAgICAgIHJldHVybiBhTy52YWx1ZSAtIGJPLnZhbHVlO1xuICAgIH0pO1xuXG4gICAgc29ydGVkQ2VudHJvaWRzLmZvckVhY2goKGQpID0+IHtcbiAgICAgIGNvbnN0IG8gPSBmaWx0ZXJlZERhdGEuZmlsdGVyKGUgPT4gZC5wcm9wZXJ0aWVzLmlzb0FscGhhMiA9PT0gZS5rZXkpWzBdO1xuICAgICAgaWYgKG8pIHtcbiAgICAgICAgZC52YWx1ZSA9IG8udmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBzcGlrZUNlbnRyb2lkcyA9IGcuYXBwZW5kU2VsZWN0KCdnLnNwaWtlLWxheWVyJylcbiAgICAgIC5zdHlsZSgncG9pbnRlci1ldmVudHMnLCAnbm9uZScpXG4gICAgICAuc2VsZWN0QWxsKCdwYXRoLmNlbnRyb2lkJylcbiAgICAgIC5kYXRhKHNvcnRlZENlbnRyb2lkcyk7XG5cbiAgICBzcGlrZUNlbnRyb2lkcy5lbnRlcigpXG4gICAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgIC5hdHRyKCdjbGFzcycsIGQgPT4gZC5wcm9wZXJ0aWVzLnNsdWcgKyAnIGNlbnRyb2lkJylcbiAgICAgIC5tZXJnZShzcGlrZUNlbnRyb2lkcylcbiAgICAgIC5hdHRyKCdkJywgZnVuY3Rpb24oZCkge1xuICAgICAgICBjb25zdCBvYmogPSBwcm9qZWN0aW9uKGQucHJvcGVydGllcy5jZW50cm9pZCk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc2NhbGVZKGQudmFsdWUpO1xuICAgICAgICByZXR1cm4gJ00nICsgKG9ialswXSAtIHByb3BzLnNwaWtlX3NpemUpICsgJyAnICsgb2JqWzFdICsgJyBMJyArIG9ialswXSArICcgJyArIChvYmpbMV0gLSB2YWx1ZSkgKyAnIEwnICsgKG9ialswXSArIHByb3BzLnNwaWtlX3NpemUpICsgJyAnICsgb2JqWzFdICsgJyAnO1xuICAgICAgfSlcbiAgICAgIC5zdHlsZSgnZmlsbCcsICdub25lJylcbiAgICAgIC5zdHlsZSgnc3Ryb2tlJywgZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gZC52YWx1ZSA/IHByb3BzLnNwaWtlX2NvbG9yX3NjYWxlKGQudmFsdWUpIDogJyNjY2MnO1xuICAgICAgfSlcbiAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gZC52YWx1ZSA/IHByb3BzLnNwaWtlX3N0cm9rZV93aWR0aF9zY2FsZShkLnZhbHVlKSA6IDAuNTtcbiAgICAgIH0pO1xuXG4gICAgY29uc3QgY291bnRyeVZvcm9ub2lDZW50cm9pZHMgPSBnLmFwcGVuZFNlbGVjdCgnZy52b3Jvbm9pJylcbiAgICAgIC5zdHlsZSgnZmlsbCcsICdub25lJylcbiAgICAgIC5zdHlsZSgnY3Vyc29yJywgcHJvcHMuaW50ZXJhY3Rpb24/J2Nyb3NzaGFpcic6J2RlZmF1bHQnKVxuICAgICAgLnN0eWxlKCdwb2ludGVyLWV2ZW50cycsICdhbGwnKVxuICAgICAgLnNlbGVjdEFsbCgncGF0aC52b3Jvbm9pJylcbiAgICAgIC5kYXRhKGdlb1Zvcm9ub2koKS5wb2x5Z29ucyh2b3Jvbm9pQ2VudHJvaWRzKS5mZWF0dXJlcyk7XG5cbiAgICBjb3VudHJ5Vm9yb25vaUNlbnRyb2lkcy5lbnRlcigpXG4gICAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgIC5hdHRyKCdjbGFzcycsIGQgPT4gJ3Zvcm9ub2knKVxuICAgICAgLm1lcmdlKGNvdW50cnlWb3Jvbm9pQ2VudHJvaWRzKVxuICAgICAgLmF0dHIoJ2QnLCBwYXRoKVxuICAgICAgLm9uKCdtb3VzZW92ZXInLCBkID0+IHtcbiAgICAgICAgaWYgKHByb3BzLmludGVyYWN0aW9uKSB7XG4gICAgICAgICAgdGlwT24oZCk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAub24oJ21vdXNlb3V0JywgZCA9PiB7XG4gICAgICAgIGlmIChwcm9wcy5pbnRlcmFjdGlvbikge1xuICAgICAgICAgIHRpcE9mZihkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICBjb3VudHJ5Vm9yb25vaUNlbnRyb2lkcy5leGl0KClcbiAgICAgIC5yZW1vdmUoKTtcblxuICAgIGNvbnN0IHRvb2x0aXAgPSBnLmFwcGVuZFNlbGVjdCgnZy50ZXh0LWdyb3VwJylcbiAgICAgIC5zdHlsZSgncG9pbnRlci1ldmVudHMnLCAnbm9uZScpXG4gICAgICAuYXBwZW5kKCd0ZXh0Jyk7XG5cbiAgICBsZXQgYW5ub3RhdGlvbkRhdGEgPSBwcm9wcy5hbm5vdGF0aW9ucy5uYW1lLm1hcCgoZCkgPT4ge1xuICAgICAgY29uc3QgYyA9IEF0bGFzLmdldENvdW50cnkoZCk7XG4gICAgICBjb25zdCBnZW8gPSBjb3VudHJ5Q2VudHJvaWRzLmZpbHRlcihlID0+IGUucHJvcGVydGllcy5pc29BbHBoYTIgPT09IGMuaXNvQWxwaGEyKVswXVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY291bnRyeU1ldGE6IGMsXG4gICAgICAgIGNvdW50cnlHZW86IGdlbyxcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBsZXQgYW5ub3RhdGlvbk51bURhdGEgPSBwcm9wcy5hbm5vdGF0aW9ucy52YWx1ZS5tYXAoKGQpID0+IHtcbiAgICAgIGNvbnN0IGMgPSBBdGxhcy5nZXRDb3VudHJ5KGQpO1xuICAgICAgY29uc3QgZ2VvID0gc29ydGVkQ2VudHJvaWRzLmZpbHRlcihlID0+IGUucHJvcGVydGllcy5pc29BbHBoYTIgPT09IGMuaXNvQWxwaGEyKVswXVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY291bnRyeU1ldGE6IGMsXG4gICAgICAgIGNvdW50cnlHZW86IGdlbyxcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBhbm5vdGF0aW9uRGF0YSA9IGFubm90YXRpb25EYXRhLmZpbHRlcihkID0+IGQuY291bnRyeU1ldGEgJiYgZC5jb3VudHJ5R2VvKVxuICAgIGFubm90YXRpb25OdW1EYXRhID0gYW5ub3RhdGlvbk51bURhdGEuZmlsdGVyKGQgPT4gZC5jb3VudHJ5TWV0YSAmJiBkLmNvdW50cnlHZW8pXG5cbiAgICBjb25zdCBhbm5vdGF0aW9ucyA9IGcuYXBwZW5kU2VsZWN0KCdnLm5hbWUtYW5ub3RhdGlvbnMnKVxuICAgICAgLnN0eWxlKCdwb2ludGVyLWV2ZW50cycsICdub25lJylcbiAgICAgIC5zZWxlY3RBbGwoJ3RleHQuYW5ub3RhdGlvbicpXG4gICAgICAuZGF0YShhbm5vdGF0aW9uRGF0YSwgZCA9PiBkLmNvdW50cnlNZXRhLmlzb0FscGhhMik7XG5cbiAgICBhbm5vdGF0aW9ucy5lbnRlcigpXG4gICAgICAuYXBwZW5kKCd0ZXh0JylcbiAgICAgIC5hdHRyKCdjbGFzcycsICdhbm5vdGF0aW9uJylcbiAgICAgIC5tZXJnZShhbm5vdGF0aW9ucylcbiAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAoZCkgPT4ge1xuICAgICAgICBjb25zdCBwID0gcHJvamVjdGlvbihkLmNvdW50cnlHZW8uZ2VvbWV0cnkuY29vcmRpbmF0ZXMpO1xuICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke3BbMF19LCR7cFsxXSArIHByb3BzLmhvdmVyX2dhcH0pYDtcbiAgICAgIH0pXG4gICAgICAudGV4dCgoZCkgPT4ge1xuICAgICAgICByZXR1cm4gZC5jb3VudHJ5TWV0YS50cmFuc2xhdGlvbnNbcHJvcHMubG9jYWxlXTtcbiAgICAgIH0pO1xuXG4gICAgYW5ub3RhdGlvbnMuZXhpdCgpXG4gICAgICAucmVtb3ZlKCk7XG5cbiAgICBjb25zdCBhbm5vdGF0aW9uc051bWJlcnMgPSBnLmFwcGVuZFNlbGVjdCgnZy5udW1iZXItYW5ub3RhdGlvbnMnKVxuICAgICAgLnN0eWxlKCdwb2ludGVyLWV2ZW50cycsICdub25lJylcbiAgICAgIC5zZWxlY3RBbGwoJ3RleHQuYW5ub3RhdGlvbicpXG4gICAgICAuZGF0YShhbm5vdGF0aW9uTnVtRGF0YSk7XG5cbiAgICBhbm5vdGF0aW9uc051bWJlcnMuZW50ZXIoKVxuICAgICAgLmFwcGVuZCgndGV4dCcpXG4gICAgICAuYXR0cignY2xhc3MnLCAnYW5ub3RhdGlvbicpXG4gICAgICAubWVyZ2UoYW5ub3RhdGlvbnNOdW1iZXJzKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIChkKSA9PiB7XG4gICAgICAgIGNvbnN0IHAgPSBwcm9qZWN0aW9uKGQuY291bnRyeUdlby5nZW9tZXRyeS5jb29yZGluYXRlcyk7XG4gICAgICAgIHJldHVybiBgdHJhbnNsYXRlKCR7cFswXX0sJHtwWzFdICsgcHJvcHMuaG92ZXJfZ2FwfSlgO1xuICAgICAgfSlcbiAgICAgIC5odG1sKChkKSA9PiB7XG4gICAgICAgIHJldHVybiBnZXRQZWFrVGV4dChkLmNvdW50cnlHZW8udmFsdWUpO1xuICAgICAgfSk7XG5cbiAgICBhbm5vdGF0aW9uc051bWJlcnMuZXhpdCgpXG4gICAgICAucmVtb3ZlKCk7XG5cbiAgICBpZiAocHJvcHMubW9iaWxlICYmIHdpZHRoIDwgcHJvcHMucmVmQm94LmJyZWFrcG9pbnQpIHtcbiAgICAgIC8vIFJlZiBib3ggYXQgdGhlIGJvdHRvbSBmb3IgbW9iaWxlIHN0YXJ0cyBoZXJlXG4gICAgICBjb25zdCBsYW5kID0gdG9wb2pzb24uZmVhdHVyZShwcm9wcy5nZW8sIHByb3BzLmdlby5vYmplY3RzLmxhbmQpO1xuXG4gICAgICBjb25zdCByZWZCb3hDb250YWluZXIgPSB0aGlzLnNlbGVjdGlvbigpXG4gICAgICAgIC5hcHBlbmRTZWxlY3QoJ2Rpdi5yZWYtYm94JylcbiAgICAgICAgLmNsYXNzZWQoJ2hpZGUnLCBmYWxzZSlcbiAgICAgICAgLnN0eWxlKCd0ZXh0LWFsaWduJywgJ2NlbnRlcicpXG4gICAgICAgIC5zdHlsZSgnd2lkdGgnLCBgJHtwcm9wcy5yZWZCb3gud2lkdGh9cHhgKVxuICAgICAgICAuc3R5bGUoJ2hlaWdodCcsIGAke3Byb3BzLnJlZkJveC5oZWlnaHR9cHhgKVxuXG4gICAgICBjb25zdCByZWZCb3ggPSByZWZCb3hDb250YWluZXIuYXBwZW5kU2VsZWN0KCdzdmcnKVxuICAgICAgICAuc3R5bGUoJ2JvcmRlcicsIGAke3Byb3BzLm1hcF9maWxsfSBzb2xpZCAxcHhgKVxuICAgICAgICAuYXR0cignd2lkdGgnLCBwcm9wcy5yZWZCb3gud2lkdGgpXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBwcm9wcy5yZWZCb3guaGVpZ2h0KTtcblxuICAgICAgY29uc3QgcHJvamVjdGlvblJlZiA9IGQzLmdlb05hdHVyYWxFYXJ0aDEoKVxuICAgICAgICAuZml0U2l6ZShbcHJvcHMucmVmQm94LndpZHRoLCBwcm9wcy5yZWZCb3guaGVpZ2h0XSwgbWFrZVJhbmdlQm94KHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMuY2xpcF9ib3gpKVxuXG4gICAgICBjb25zdCBwYXRoUmVmID0gZDMuZ2VvUGF0aCgpLnByb2plY3Rpb24ocHJvamVjdGlvblJlZik7XG5cbiAgICAgIHJlZkJveC5hcHBlbmRTZWxlY3QoJ3BhdGgnKS5hdHRyKCdkJywgcGF0aFJlZihsYW5kKSkuYXR0cignZmlsbCcsIHByb3BzLm1hcF9maWxsKTtcbiAgICAgIGNvbnN0IGFjdGl2ZVdpZHRoID0gd2lkdGggLyB1c2VXaWR0aCAqIHByb3BzLnJlZkJveC53aWR0aDtcbiAgICAgIGNvbnN0IGFjdGl2ZVJlZ2lvbiA9IHJlZkJveENvbnRhaW5lci5hcHBlbmRTZWxlY3QoJ2RpdicpLmF0dHIoJ2NsYXNzJywgJ2FjdGl2ZS1yZWdpb24nKVxuICAgICAgICAuc3R5bGUoJ3dpZHRoJywgYCR7YWN0aXZlV2lkdGh9cHhgKVxuICAgICAgICAuc3R5bGUoJ2hlaWdodCcsIGAke3Byb3BzLnJlZkJveC5oZWlnaHR9cHhgKVxuICAgICAgICAuY2FsbChkMy5kcmFnKClcbiAgICAgICAgICAub24oJ3N0YXJ0LmludGVycnVwdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYWN0aXZlUmVnaW9uLmludGVycnVwdCgpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3N0b3AnKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5vbignc3RhcnQgZHJhZycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbGV0IGNhbGNYID0gZDMuZXZlbnQueC0oYWN0aXZlV2lkdGgvMilcbiAgICAgICAgICAgIGlmIChkMy5ldmVudC54IDw9IGFjdGl2ZVdpZHRoLzIpIHtcbiAgICAgICAgICAgICAgY2FsY1ggPSAwO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChkMy5ldmVudC54ID49IChwcm9wcy5yZWZCb3gud2lkdGgtYWN0aXZlV2lkdGgpKXtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coZDMuZXZlbnQueCwgcHJvcHMucmVmQm94LndpZHRoKVxuICAgICAgICAgICAgICBjYWxjWCA9IGFjdGl2ZVdpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWN0aXZlUmVnaW9uLnN0eWxlKCdsZWZ0JywgY2FsY1ggKyAncHgnKTtcbiAgICAgICAgICB9KSk7XG4gICAgICAvLyBSZWZib3ggZW5kcyBoZXJlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VsZWN0aW9uKCkuc2VsZWN0KCcucmVmLWJveCcpLmNsYXNzZWQoJ2hpZGUnLCB0cnVlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0aXBPbih2b3Jvbm9pUGF0aCkge1xuICAgICAgY29uc3QgeyBwcm9wZXJ0aWVzIH0gPSB2b3Jvbm9pUGF0aC5wcm9wZXJ0aWVzLnNpdGU7XG4gICAgICBpZiAocHJvcGVydGllcy5yZXNldCkgcmV0dXJuO1xuICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gZmlsdGVyZWREYXRhLmZpbmQoZSA9PiBwcm9wZXJ0aWVzLmlzb0FscGhhMiA9PT0gZS5rZXkpO1xuXG4gICAgICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSBmaWx0ZXJNaW4pIHJldHVybjtcbiAgICAgIGcuc2VsZWN0QWxsKCdwYXRoLmNlbnRyb2lkJylcbiAgICAgICAgLnN0eWxlKCdmaWxsJywgJ25vbmUnKVxuICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCBwcm9wcy5zcGlrZV9pbmFjdGl2ZV9vcGFjaXR5KTtcblxuICAgICAgZy5zZWxlY3RBbGwoJy5uYW1lLWFubm90YXRpb25zLC5udW1iZXItYW5ub3RhdGlvbnMnKVxuICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCAwKVxuXG4gICAgICBnLnNlbGVjdEFsbChgcGF0aC5jZW50cm9pZC4ke3Byb3BlcnRpZXMuc2x1Z31gKVxuICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCAxKVxuICAgICAgICAuc3R5bGUoJ2ZpbGwnLCAoZCkgPT4ge1xuICAgICAgICAgIHJldHVybiBkLnZhbHVlID8gcHJvcHMuc3Bpa2VfY29sb3Jfc2NhbGUoZC52YWx1ZSkgOiBudWxsO1xuICAgICAgICB9KVxuICAgICAgICAuY2xhc3NlZCgnYWN0aXZlJywgdHJ1ZSlcbiAgICAgICAgLnJhaXNlKCk7XG5cbiAgICAgIHRvb2x0aXBcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICBjb25zdCBvID0gcHJvamVjdGlvbihwcm9wZXJ0aWVzLmNlbnRyb2lkKTtcbiAgICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke29bMF19LCR7b1sxXSArIHByb3BzLmhvdmVyX2dhcH0pYDtcbiAgICAgICAgfSlcbiAgICAgICAgLnN0eWxlKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICAgICAgICAuaHRtbChkID0+IGBcbiAgICAgICAgICA8dHNwYW4geD1cIjBcIiB5PVwiMFwiPiR7cHJvcGVydGllcy50cmFuc2xhdGlvbnNbcHJvcHMubG9jYWxlXX08L3RzcGFuPlxuICAgICAgICAgICR7Z2V0UGVha1RleHQodmFsdWUpfWApO1xuXG4gICAgICBnLnNlbGVjdEFsbChgLmNvdW50cnkuYy0ke3Byb3BlcnRpZXMuc2x1Z31gKVxuICAgICAgICAuY2xhc3NlZCgnYWN0aXZlJywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGlwT2ZmKHZvcm9ub2lQYXRoKSB7XG5cbiAgICAgIGNvbnN0IHsgcHJvcGVydGllcyB9ID0gdm9yb25vaVBhdGgucHJvcGVydGllcy5zaXRlO1xuICAgICAgY29uc3QgY291bnRyeSA9IGcuc2VsZWN0QWxsKGAuY291bnRyeS5jLSR7cHJvcGVydGllcy5zbHVnfWApO1xuXG4gICAgICBnLnNlbGVjdEFsbCgncGF0aC5jZW50cm9pZCcpLnN0eWxlKCdvcGFjaXR5JywgMSlcbiAgICAgICAgLmNsYXNzZWQoJ2FjdGl2ZScsIGZhbHNlKVxuICAgICAgICAuc3R5bGUoJ2ZpbGwnLCAnbm9uZScpO1xuXG4gICAgICBnLnNlbGVjdEFsbCgnLm5hbWUtYW5ub3RhdGlvbnMsLm51bWJlci1hbm5vdGF0aW9ucycpXG4gICAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDEpO1xuXG4gICAgICB0b29sdGlwLmh0bWwoJycpO1xuXG4gICAgICBjb3VudHJ5LmNsYXNzZWQoJ2FjdGl2ZScsIGZhbHNlKVxuICAgICAgICAuc3R5bGUoJ3N0cm9rZScsIHByb3BzLm1hcF9zdHJva2VfY29sb3IpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBlYWtUZXh0KHZhbHVlKSB7XG4gICAgICB2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUgKiAxMDApO1xuICAgICAgaWYgKHZhbHVlIDwgMTAwICYmIHZhbHVlID49IDEpIHtcbiAgICAgICAgcmV0dXJuIGA8dHNwYW4gZHk9XCIxZW1cIiB4PVwiMFwiPiR7dmFsdWUudG9Mb2NhbGVTdHJpbmcocHJvcHMubG9jYWxlKX0lPC90c3Bhbj4gPHRzcGFuIGNsYXNzPVwic21hbGxlclwiPiR7cHJvcHMub2ZfcGVha190ZXh0fTwvdHNwYW4+YFxuICAgICAgfSBlbHNlIGlmICh2YWx1ZSA8IDEpIHtcbiAgICAgICAgcmV0dXJuIGA8dHNwYW4gZHk9XCIxZW1cIiB4PVwiMFwiPjwxJTwvdHNwYW4+IDx0c3BhbiBjbGFzcz1cInNtYWxsZXJcIj4ke3Byb3BzLm9mX3BlYWtfdGV4dH08L3RzcGFuPmBcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IDEwMCkge1xuICAgICAgICByZXR1cm4gYDx0c3BhbiBkeT1cIjFlbVwiIHg9XCIwXCI+JHtwcm9wcy5hdF9wZWFrX3RleHR9PC90c3Bhbj5gXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZVJhbmdlQm94KG9wdHMpIHtcbiAgdmFyIGxvbjAgPSBvcHRzWzBdWzBdO1xuICB2YXIgbG9uMSA9IG9wdHNbMV1bMF07XG4gIHZhciBsYXQwID0gb3B0c1swXVsxXTtcbiAgdmFyIGxhdDEgPSBvcHRzWzFdWzFdO1xuXG4gIC8vIHRvIGNyb3NzIGFudGltZXJpZGlhbiB3L28gYW1iaWd1aXR5XG4gIGlmIChsb24wID4gMCAmJiBsb24xIDwgMCkge1xuICAgIGxvbjEgKz0gMzYwO1xuICB9XG5cbiAgLy8gdG8gbWFrZSBsYXQgc3BhbiB1bmFtYmlndW91c1xuICBpZiAobGF0MCA+IGxhdDEpIHtcbiAgICB2YXIgdG1wID0gbGF0MDtcbiAgICBsYXQwID0gbGF0MTtcbiAgICBsYXQxID0gdG1wO1xuICB9XG5cbiAgdmFyIGRsb240ID0gKGxvbjEgLSBsb24wKSAvIDQ7XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnUG9seWdvbicsXG4gICAgY29vcmRpbmF0ZXM6IFtbXG4gICAgICBbbG9uMCwgbGF0MF0sXG4gICAgICBbbG9uMCwgbGF0MV0sXG4gICAgICBbbG9uMCArIGRsb240LCBsYXQxXSxcbiAgICAgIFtsb24wICsgMiAqIGRsb240LCBsYXQxXSxcbiAgICAgIFtsb24wICsgMyAqIGRsb240LCBsYXQxXSxcbiAgICAgIFtsb24xLCBsYXQxXSxcbiAgICAgIFtsb24xLCBsYXQwXSxcbiAgICAgIFtsb24xIC0gZGxvbjQsIGxhdDBdLFxuICAgICAgW2xvbjEgLSAyICogZGxvbjQsIGxhdDBdLFxuICAgICAgW2xvbjEgLSAzICogZGxvbjQsIGxhdDBdLFxuICAgICAgW2xvbjAsIGxhdDBdLFxuICAgIF1dLFxuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgR2xvYmFsUmF0ZU1hcDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/lib/chart.js\n");

/***/ })

})