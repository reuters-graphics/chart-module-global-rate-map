webpackHotUpdate("static/development/pages/index.js",{

/***/ "./src/lib/chart.js":
/*!**************************!*\
  !*** ./src/lib/chart.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ \"./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inherits */ \"./node_modules/@babel/runtime/helpers/esm/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var topojson_client__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! topojson-client */ \"./node_modules/topojson-client/index.js\");\n/* harmony import */ var _reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @reuters-graphics/graphics-atlas-client */ \"./node_modules/@reuters-graphics/graphics-atlas-client/dist/index.js\");\n/* harmony import */ var _reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _base_ChartComponent__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./base/ChartComponent */ \"./src/lib/base/ChartComponent.js\");\n/* harmony import */ var _utils_d3__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/d3 */ \"./src/lib/utils/d3.js\");\n/* harmony import */ var d3_geo_voronoi__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! d3-geo-voronoi */ \"./node_modules/d3-geo-voronoi/index.js\");\n/* harmony import */ var mustache__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! mustache */ \"./node_modules/mustache/mustache.js\");\n/* harmony import */ var mustache__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(mustache__WEBPACK_IMPORTED_MODULE_12__);\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\n\n\nvar Atlas = new _reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_8___default.a(); // import topology from '@reuters-graphics/graphics-atlas-client/topojson/global.110m.json';\n\nvar GlobalRateMap = /*#__PURE__*/function (_ChartComponent) {\n  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(GlobalRateMap, _ChartComponent);\n\n  var _super = _createSuper(GlobalRateMap);\n\n  function GlobalRateMap() {\n    var _this;\n\n    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, GlobalRateMap);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_this), \"defaultProps\", {\n      map_stroke_width: 1,\n      map_stroke_color: '#2f353f',\n      map_highlight_stroke_width: 1.2,\n      map_fill: 'rgba(153,153,153,0.25)',\n      map_stroke_color_active: 'rgba(255, 255, 255, 0.75)',\n      spike_color: '#eec331',\n      heightRatio: function heightRatio(width, breakpoint) {\n        return width < breakpoint ? 0.8 : 0.5;\n      },\n      geo: false,\n      locale: 'en',\n      map_custom_projections: {\n        clip_box: [[-130, 70], [194, -39]],\n        projection: 'geoNaturalEarth1',\n        center: null,\n        scale: null,\n        rotate: null\n      },\n      hover_gap: 12.5,\n      spike_height: 35,\n      spike_size: 3.5,\n      getDataRange: function getDataRange(width) {\n        return {\n          min: 0,\n          max: 1\n        };\n      },\n      spike_stroke_width: 0.5,\n      spike_highlight_stroke_width: 2,\n      spike_highlight_fill: true,\n      spike_color_scale: _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].scaleThreshold() // Can use a scale as a prop!\n      .domain([0.75, 0.9]).range(['#ccc', '#f68e26', '#de2d26']),\n      spike_stroke_width_scale: _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].scaleThreshold() // Can use a scale as a prop!\n      .domain([0.75, 0.9]).range([0.6, 0.9, 1.1]),\n      spike_inactive_opacity: 1,\n      disputed_dasharray: [5, 3],\n      key: {\n        text: {\n          main_text: 'How close is the current weekly average to the countryâ€™s peak',\n          red_peak: '>90%',\n          orange_peak: '90 to 75%',\n          white_peak: '<75%'\n        },\n        width: 140\n      },\n      annotations: {\n        name: [],\n        value: []\n      },\n      mobile: true,\n      refBox: {\n        height: 90,\n        width: 180,\n        breakpoint: 900,\n        useWidth: function useWidth(width, factor) {\n          return width * factor;\n        },\n        factor: 2.2\n      },\n      interaction: true,\n      at_peak_text: 'At peak',\n      of_peak_text: \"<tspan> {{ percent }}</tspan> <tspan class='smaller'>of peak</tspan>\"\n    });\n\n    return _this;\n  }\n\n  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(GlobalRateMap, [{\n    key: \"draw\",\n    value: function draw() {\n      var data = this.data();\n      var props = this.props();\n      var node = this.selection().node();\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          width = _node$getBoundingClie.width;\n\n      var ratio = props.heightRatio(width, props.refBox.breakpoint);\n      var useWidth, height;\n\n      if (width < props.refBox.breakpoint && props.mobile) {\n        useWidth = props.refBox.useWidth(width, props.refBox.factor);\n        this.selection().classed('mobile', true);\n        height = useWidth * 0.5;\n      } else {\n        useWidth = width;\n        this.selection().classed('mobile', false);\n        height = width * ratio;\n      }\n\n      var _props$getDataRange = props.getDataRange(width),\n          filterMin = _props$getDataRange.min,\n          filterMax = _props$getDataRange.max;\n\n      var filteredData = data.filter(function (d) {\n        return d.value >= filterMin && d.value <= filterMax;\n      });\n      var scaleY = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].scaleLinear().range([0, props.spike_height]).domain([0, 1]);\n      var keyBox = this.selection().appendSelect('div.key');\n      keyBox.appendSelect('p.left-text.text-inline.key-text').html(props.key.text.main_text);\n      var keySvgContainer = keyBox.appendSelect('div.svg-container.text-inline');\n      var keyGap = props.key.width / 3; // add key box\n\n      var keySvg = keySvgContainer.appendSelect('svg.text-inline').attr('height', props.spike_height + 6).style('fill', 'none').attr('width', props.key.width - keyGap * 0.27);\n      keySvg.appendSelect('defs').appendSelect('marker.top').attr('id', 'arrow-up').attr('markerWidth', 12).attr('markerHeight', 10).attr('refY', 5).attr('refX', 6).attr('orient', 'auto').appendSelect('path.up').style('stroke', 'white').style('stroke-width', 0.6).attr('d', 'M0 0 L6 5 L0 10');\n      keySvg.select('defs').appendSelect('marker.down').attr('id', 'arrow-down').attr('markerWidth', 12).attr('markerHeight', 10).attr('refY', 5).attr('refX', 0).attr('orient', 'auto').appendSelect('path.down').style('stroke', 'white').style('stroke-width', 0.6).attr('d', 'M6 0 L0 5 L6 10'); // add spike 1\n\n      keySvg.appendSelect('path.red-spike.high').style('stroke', props.spike_color_scale(1)).attr('d', function (d) {\n        var obj = [keyGap * 0.7, props.spike_height];\n        var value = scaleY(1);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('path.red-spike.low').style('stroke', props.spike_color_scale(0.9)).style('fill', props.spike_color_scale(0.9)).attr('d', function (d) {\n        var obj = [keyGap * 0.7 + props.spike_size * 1.4, props.spike_height];\n        var value = scaleY(0.9);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('path.orange-spike.high').style('stroke', props.spike_color_scale(0.89)).attr('d', function (d, i) {\n        var obj = [keyGap * 1.5, props.spike_height];\n        var value = scaleY(0.89);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('path.orange-spike.low').style('stroke', props.spike_color_scale(0.75)).style('fill', props.spike_color_scale(0.75)).attr('d', function (d) {\n        var obj = [keyGap * 1.5 + props.spike_size * 1.4, props.spike_height];\n        var value = scaleY(0.75);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('path.white-spike.high').style('stroke', props.spike_color_scale(0.74)).attr('d', function (d, i) {\n        var obj = [keyGap * 2.3, props.spike_height];\n        var value = scaleY(0.74);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('path.white-spike.low').style('stroke', '#ccc').style('fill', '#ccc').attr('d', function (d, i) {\n        var obj = [keyGap * 2.3 + props.spike_size * 1.4, props.spike_height];\n        var value = scaleY(0);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('line').style('stroke', 'white').style('stroke-width', 0.7).attr('x1', 10).attr('x2', 10).attr('y1', 7).attr('y1', props.spike_height).attr('marker-end', 'url(#arrow-up)').attr('marker-start', 'url(#arrow-down)');\n      var bottomKeyText = keySvgContainer.appendSelect('div.bottom-text').style('padding-left', \"\".concat(keyGap * 0.4, \"px\"));\n      bottomKeyText.appendSelect('p.red-text.key-text.text-inline').style('width', \"\".concat(keyGap * 0.8, \"px\")).html(props.key.text.red_peak);\n      bottomKeyText.appendSelect('p.orange-text.key-text.text-inline').style('width', \"\".concat(keyGap * 0.8, \"px\")).html(props.key.text.orange_peak);\n      bottomKeyText.appendSelect('p.white-text.key-text.text-inline').style('width', \"\".concat(keyGap * 0.8, \"px\")).html(props.key.text.white_peak); // SVG begins here\n\n      var svg = this.selection().appendSelect('div.chart-container-div').attr('id', 'map-container').style('overflow-x', 'scroll').appendSelect('svg.chart') // see docs in ./utils/d3.js\n      .attr('width', useWidth).attr('height', height);\n      var g = svg.appendSelect('g');\n\n      if (!_utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"][props.map_custom_projections.projection]) {\n        props.map_custom_projections.projection = 'geoNaturalEarth1';\n      }\n\n      console.log(_utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"][props.map_custom_projections.projection]);\n      var projection = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"][props.map_custom_projections.projection]();\n      var countries = topojson_client__WEBPACK_IMPORTED_MODULE_7__[\"feature\"](props.geo, props.geo.objects.countries);\n      var disputed;\n\n      if (props.geo.objects.disputedBoundaries) {\n        disputed = topojson_client__WEBPACK_IMPORTED_MODULE_7__[\"mesh\"](props.geo, props.geo.objects.disputedBoundaries);\n      }\n\n      if (props.map_custom_projections.center && props.map_custom_projections.center.length === 2) {\n        projection.center(props.map_custom_projections.center);\n      }\n\n      if (props.map_custom_projections.rotate && props.map_custom_projections.rotate.length === 2) {\n        projection.rotate(props.map_custom_projections.rotate);\n      }\n\n      var filteredCountryKeys = filteredData.map(function (d) {\n        return d.key;\n      });\n      var countryCentroids = countries.features.filter(function (c) {\n        return filteredCountryKeys.includes(c.properties.isoAlpha2);\n      }).filter(function (c) {\n        return c.properties.centroid.length == 2 && c.properties.centroid[0] && c.properties.centroid[1];\n      }).map(function (_ref) {\n        var properties = _ref.properties;\n        return {\n          type: 'Feature',\n          properties: properties,\n          geometry: {\n            type: 'Point',\n            coordinates: properties.centroid\n          }\n        };\n      }); // Adding some points in the ocean to create voronoi spaces that will\n      // reset the map, so as your cursor traces land masses, you get highlights,\n      // but in the ocean you can see the whole world picture...\n\n      var resetPoints = [[-40.248108, 38.653788], // North Atlantic\n      [-29.800018, 14.536220], // Central Atlantic\n      [-15.485548, -12.941648], // South Atlantic\n      [-174.808659, 35.856127], // North Pacific\n      [-117.324414, -11.130821], // South Pacific\n      [-173.039131, -44.920697], // Southwest pacific\n      [64.407024, 5.045815], // North Indian\n      [75.569128, -31.691939], // South Indian\n      [-5.783266, -83.608077] // Antarctica\n      ];\n      var voronoiCentroids = countryCentroids.concat(resetPoints.map(function (centroid) {\n        return {\n          type: 'Feature',\n          properties: {\n            reset: true\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: centroid\n          }\n        };\n      }));\n\n      if (props.map_custom_projections.clip_box && props.map_custom_projections.clip_box.length === 2 && props.map_custom_projections.clip_box[0].length === 2 && props.map_custom_projections.clip_box[1].length === 2) {\n        console.log('clipping! :)');\n        projection.fitSize([useWidth, height], makeRangeBox(props.map_custom_projections.clip_box));\n      } else {\n        console.log('cant clip :(');\n        projection.fitSize([useWidth, height], countries);\n      }\n\n      if (props.map_custom_projections.scale) {\n        projection.scale(props.map_custom_projections.scale);\n      }\n\n      var path = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].geoPath().projection(projection);\n      svg.selectAll('.country,.disputed,.centroid').remove();\n      var countryGroups = g.appendSelect('g.countries').style('pointer-events', 'none').style('fill', props.map_fill).selectAll('path.country').data(countries.features.filter(function (d) {\n        return d.properties.slug !== 'antarctica';\n      }), function (d) {\n        return d.properties.slug;\n      });\n      countryGroups.enter().append('path').attr('class', function (d) {\n        return \"country c-\".concat(d.properties.slug, \" level-0\");\n      }).merge(countryGroups).style('stroke', props.map_stroke_color).style('stroke-width', props.map_stroke_width).attr('d', path);\n\n      if (disputed) {\n        g.appendSelect('path.disputed').attr('class', 'disputed level-0').style('pointer-events', 'none').style('stroke', props.map_stroke_color).style('stroke-width', props.map_stroke_width).style('fill', 'none').style('stroke-dasharray', props.disputed_dasharray).attr('d', path(disputed));\n      }\n\n      var sortedCentroids = countryCentroids.sort(function (a, b) {\n        var aO = filteredData.filter(function (e) {\n          return a.properties.isoAlpha2 === e.key;\n        })[0];\n        var bO = filteredData.filter(function (e) {\n          return b.properties.isoAlpha2 === e.key;\n        })[0];\n        return aO.value - bO.value;\n      });\n      sortedCentroids.forEach(function (d) {\n        var o = filteredData.filter(function (e) {\n          return d.properties.isoAlpha2 === e.key;\n        })[0];\n\n        if (o) {\n          d.value = o.value;\n        }\n      });\n      var spikeCentroids = g.appendSelect('g.spike-layer').style('pointer-events', 'none').selectAll('path.centroid').data(sortedCentroids);\n      spikeCentroids.enter().append('path').attr('class', function (d) {\n        return d.properties.slug + ' centroid';\n      }).merge(spikeCentroids).attr('d', function (d) {\n        var obj = projection(d.properties.centroid);\n        var value = scaleY(d.value);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      }).style('fill', 'none').style('stroke', function (d) {\n        return d.value ? props.spike_color_scale(d.value) : '#ccc';\n      }).style('stroke-width', function (d) {\n        return d.value ? props.spike_stroke_width_scale(d.value) : 0.5;\n      });\n      var countryVoronoiCentroids = g.appendSelect('g.voronoi').style('fill', 'none').style('cursor', props.interaction ? 'crosshair' : 'default').style('pointer-events', 'all').selectAll('path.voronoi').data(Object(d3_geo_voronoi__WEBPACK_IMPORTED_MODULE_11__[\"geoVoronoi\"])().polygons(voronoiCentroids).features);\n      countryVoronoiCentroids.enter().append('path').attr('class', function (d) {\n        return 'voronoi';\n      }).merge(countryVoronoiCentroids).attr('d', path).on('mouseover', function (d) {\n        if (props.interaction) {\n          tipOn(d);\n        }\n      }).on('mouseout', function (d) {\n        if (props.interaction) {\n          tipOff(d);\n        }\n      });\n      countryVoronoiCentroids.exit().remove();\n      var tooltip = g.appendSelect('g.text-group').style('pointer-events', 'none').append('text');\n      var annotationData = props.annotations.name.map(function (d) {\n        var c = Atlas.getCountry(d);\n        var geo = countryCentroids.filter(function (e) {\n          return e.properties.isoAlpha2 === c.isoAlpha2;\n        })[0];\n        return {\n          countryMeta: c,\n          countryGeo: geo\n        };\n      });\n      var annotationNumData = props.annotations.value.map(function (d) {\n        var c = Atlas.getCountry(d);\n        var geo = sortedCentroids.filter(function (e) {\n          return e.properties.isoAlpha2 === c.isoAlpha2;\n        })[0];\n        return {\n          countryMeta: c,\n          countryGeo: geo\n        };\n      });\n      annotationData = annotationData.filter(function (d) {\n        return d.countryMeta && d.countryGeo;\n      });\n      annotationNumData = annotationNumData.filter(function (d) {\n        return d.countryMeta && d.countryGeo;\n      });\n      var annotations = g.appendSelect('g.name-annotations').style('pointer-events', 'none').selectAll('text.annotation').data(annotationData, function (d) {\n        return d.countryMeta.isoAlpha2;\n      });\n      annotations.enter().append('text').attr('class', 'annotation').merge(annotations).attr('transform', function (d) {\n        var p = projection(d.countryGeo.geometry.coordinates);\n        return \"translate(\".concat(p[0], \",\").concat(p[1] + props.hover_gap, \")\");\n      }).text(function (d) {\n        return d.countryMeta.translations[props.locale];\n      });\n      annotations.exit().remove();\n      var annotationsNumbers = g.appendSelect('g.number-annotations').style('pointer-events', 'none').selectAll('text.annotation').data(annotationNumData);\n      annotationsNumbers.enter().append('text').attr('class', 'annotation').merge(annotationsNumbers).attr('transform', function (d) {\n        var p = projection(d.countryGeo.geometry.coordinates);\n        return \"translate(\".concat(p[0], \",\").concat(p[1] + props.hover_gap, \")\");\n      }).html(function (d) {\n        return getPeakText(d.countryGeo.value);\n      });\n      annotationsNumbers.exit().remove();\n\n      if (props.mobile && width < props.refBox.breakpoint) {\n        // Ref box at the bottom for mobile starts here\n        var refBoxContainer = this.selection().appendSelect('div.ref-box').classed('hide', false).style('text-align', 'center').style('width', \"\".concat(props.refBox.width, \"px\")).style('height', \"\".concat(props.refBox.height, \"px\"));\n        var refBox = refBoxContainer.appendSelect('canvas').attr('width', props.refBox.width).attr('height', props.refBox.height);\n        var context = refBox.node().getContext('2d');\n        var projectionRef = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].geoNaturalEarth1();\n\n        if (props.map_custom_projections.clip_box && props.map_custom_projections.clip_box.length === 2 && props.map_custom_projections.clip_box[0].length === 2 && props.map_custom_projections.clip_box[1].length === 2) {\n          projectionRef.fitSize([props.refBox.width, props.refBox.height], makeRangeBox(props.map_custom_projections.clip_box));\n        } else {\n          projectionRef.fitSize([props.refBox.width, props.refBox.height], countries);\n        }\n\n        if (props.map_custom_projections.scale) {\n          projectionRef.scale(props.map_custom_projections.scale);\n        }\n\n        if (props.map_custom_projections.center && props.map_custom_projections.center.length === 2) {\n          projectionRef.center(props.map_custom_projections.center);\n        }\n\n        if (props.map_custom_projections.rotate && props.map_custom_projections.rotate.length === 2) {\n          projectionRef.rotate(props.map_custom_projections.rotate);\n        }\n\n        var woAntarctica = {\n          type: countries.type,\n          features: countries.features.filter(function (e) {\n            return e.properties.slug !== 'antarctica';\n          })\n        };\n        var pathRef = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].geoPath(projectionRef, context);\n        context.clearRect(0, 0, props.refBox.width, props.refBox.height);\n        context.beginPath();\n        pathRef(woAntarctica);\n        context.fillStyle = props.map_fill;\n        context.fill();\n        var activeWidth = width / useWidth * props.refBox.width;\n        var activeRegion = refBoxContainer.appendSelect('div').attr('class', 'active-region').style('width', \"\".concat(activeWidth, \"px\")).style('height', \"\".concat(props.refBox.height, \"px\")).style('left', \"\".concat(props.refBox.width / 2 - activeWidth / 2, \"px\")).call(_utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].drag().on('start.interrupt', function () {\n          activeRegion.interrupt();\n        }).on('start drag', function () {\n          var calcX = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].event.x - activeWidth / 2;\n\n          if (_utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].event.x <= activeWidth / 2) {\n            calcX = 0;\n          } else if (_utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].event.x >= props.refBox.width - activeWidth / 2) {\n            calcX = props.refBox.width - activeWidth;\n          }\n\n          activeRegion.style('left', calcX + 'px');\n          document.getElementById('map-container').scrollLeft = calcX / props.refBox.width * useWidth;\n        }));\n        var mapEl = document.getElementById('map-container');\n        mapEl.scrollLeft = useWidth / 2 - width / 2;\n        mapEl.addEventListener('scroll', function (d) {\n          var pos = d.target.scrollLeft;\n          activeRegion.style('left', pos / useWidth * props.refBox.width + 'px');\n        }); // Refbox ends here\n      } else {\n        this.selection().select('.ref-box').classed('hide', true);\n      }\n\n      function tipOn(voronoiPath) {\n        var properties = voronoiPath.properties.site.properties;\n        if (properties.reset) return;\n\n        var _filteredData$find = filteredData.find(function (e) {\n          return properties.isoAlpha2 === e.key;\n        }),\n            value = _filteredData$find.value;\n\n        if (!value && value !== filterMin) return;\n        g.selectAll('path.centroid').style('fill', 'none').style('opacity', props.spike_inactive_opacity);\n        g.selectAll('.name-annotations,.number-annotations').style('opacity', 0);\n        g.selectAll(\"path.centroid.\".concat(properties.slug)).style('opacity', 1).style('fill', function (d) {\n          return d.value ? props.spike_color_scale(d.value) : null;\n        }).classed('active', true).raise();\n        tooltip.attr('transform', function (d) {\n          var o = projection(properties.centroid);\n          return \"translate(\".concat(o[0], \",\").concat(o[1] + props.hover_gap, \")\");\n        }).style('text-anchor', 'middle').html(function (d) {\n          return \"\\n          <tspan x=\\\"0\\\" y=\\\"0\\\">\".concat(properties.translations[props.locale], \"</tspan>\\n          \").concat(getPeakText(value));\n        });\n        g.selectAll(\".country.c-\".concat(properties.slug)).classed('active', true);\n      }\n\n      function tipOff(voronoiPath) {\n        var properties = voronoiPath.properties.site.properties;\n        var country = g.selectAll(\".country.c-\".concat(properties.slug));\n        g.selectAll('path.centroid').style('opacity', 1).classed('active', false).style('fill', 'none');\n        g.selectAll('.name-annotations,.number-annotations').style('opacity', 1);\n        tooltip.html('');\n        country.classed('active', false).style('stroke', props.map_stroke_color);\n      }\n\n      function getPeakText(value) {\n        value = Math.round(value * 100);\n        var textVar;\n\n        if (value < 100 && value >= 1) {\n          textVar = mustache__WEBPACK_IMPORTED_MODULE_12___default.a.render(props.of_peak_text, {\n            percent: value.toLocaleString(props.locale) + '%'\n          });\n        } else if (value < 1) {\n          textVar = mustache__WEBPACK_IMPORTED_MODULE_12___default.a.render(props.of_peak_text, {\n            percent: '<1%'\n          });\n        } else if (value === 100) {\n          textVar = \"<tspan>\".concat(props.at_peak_text, \"</tspan>\");\n        }\n\n        return textVar.replace('<tspan>', '<tspan dy=\"1em\" x=\"0\">');\n      }\n\n      return this;\n    }\n  }]);\n\n  return GlobalRateMap;\n}(_base_ChartComponent__WEBPACK_IMPORTED_MODULE_9__[\"default\"]);\n\nfunction makeRangeBox(opts) {\n  var lon0 = opts[0][0];\n  var lon1 = opts[1][0];\n  var lat0 = opts[0][1];\n  var lat1 = opts[1][1]; // to cross antimeridian w/o ambiguity\n\n  if (lon0 > 0 && lon1 < 0) {\n    lon1 += 360;\n  } // to make lat span unambiguous\n\n\n  if (lat0 > lat1) {\n    var tmp = lat0;\n    lat0 = lat1;\n    lat1 = tmp;\n  }\n\n  var dlon4 = (lon1 - lon0) / 4;\n  return {\n    type: 'Polygon',\n    coordinates: [[[lon0, lat0], [lon0, lat1], [lon0 + dlon4, lat1], [lon0 + 2 * dlon4, lat1], [lon0 + 3 * dlon4, lat1], [lon1, lat1], [lon1, lat0], [lon1 - dlon4, lat0], [lon1 - 2 * dlon4, lat0], [lon1 - 3 * dlon4, lat0], [lon0, lat0]]]\n  };\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (GlobalRateMap);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NoYXJ0LmpzPzdiYjgiXSwibmFtZXMiOlsiQXRsYXMiLCJBdGxhc01ldGFkYXRhQ2xpZW50IiwiR2xvYmFsUmF0ZU1hcCIsIm1hcF9zdHJva2Vfd2lkdGgiLCJtYXBfc3Ryb2tlX2NvbG9yIiwibWFwX2hpZ2hsaWdodF9zdHJva2Vfd2lkdGgiLCJtYXBfZmlsbCIsIm1hcF9zdHJva2VfY29sb3JfYWN0aXZlIiwic3Bpa2VfY29sb3IiLCJoZWlnaHRSYXRpbyIsIndpZHRoIiwiYnJlYWtwb2ludCIsImdlbyIsImxvY2FsZSIsIm1hcF9jdXN0b21fcHJvamVjdGlvbnMiLCJjbGlwX2JveCIsInByb2plY3Rpb24iLCJjZW50ZXIiLCJzY2FsZSIsInJvdGF0ZSIsImhvdmVyX2dhcCIsInNwaWtlX2hlaWdodCIsInNwaWtlX3NpemUiLCJnZXREYXRhUmFuZ2UiLCJtaW4iLCJtYXgiLCJzcGlrZV9zdHJva2Vfd2lkdGgiLCJzcGlrZV9oaWdobGlnaHRfc3Ryb2tlX3dpZHRoIiwic3Bpa2VfaGlnaGxpZ2h0X2ZpbGwiLCJzcGlrZV9jb2xvcl9zY2FsZSIsImQzIiwic2NhbGVUaHJlc2hvbGQiLCJkb21haW4iLCJyYW5nZSIsInNwaWtlX3N0cm9rZV93aWR0aF9zY2FsZSIsInNwaWtlX2luYWN0aXZlX29wYWNpdHkiLCJkaXNwdXRlZF9kYXNoYXJyYXkiLCJrZXkiLCJ0ZXh0IiwibWFpbl90ZXh0IiwicmVkX3BlYWsiLCJvcmFuZ2VfcGVhayIsIndoaXRlX3BlYWsiLCJhbm5vdGF0aW9ucyIsIm5hbWUiLCJ2YWx1ZSIsIm1vYmlsZSIsInJlZkJveCIsImhlaWdodCIsInVzZVdpZHRoIiwiZmFjdG9yIiwiaW50ZXJhY3Rpb24iLCJhdF9wZWFrX3RleHQiLCJvZl9wZWFrX3RleHQiLCJkYXRhIiwicHJvcHMiLCJub2RlIiwic2VsZWN0aW9uIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmF0aW8iLCJjbGFzc2VkIiwiZmlsdGVyTWluIiwiZmlsdGVyTWF4IiwiZmlsdGVyZWREYXRhIiwiZmlsdGVyIiwiZCIsInNjYWxlWSIsInNjYWxlTGluZWFyIiwia2V5Qm94IiwiYXBwZW5kU2VsZWN0IiwiaHRtbCIsImtleVN2Z0NvbnRhaW5lciIsImtleUdhcCIsImtleVN2ZyIsImF0dHIiLCJzdHlsZSIsInNlbGVjdCIsIm9iaiIsImkiLCJib3R0b21LZXlUZXh0Iiwic3ZnIiwiZyIsImNvbnNvbGUiLCJsb2ciLCJjb3VudHJpZXMiLCJ0b3BvanNvbiIsIm9iamVjdHMiLCJkaXNwdXRlZCIsImRpc3B1dGVkQm91bmRhcmllcyIsImxlbmd0aCIsImZpbHRlcmVkQ291bnRyeUtleXMiLCJtYXAiLCJjb3VudHJ5Q2VudHJvaWRzIiwiZmVhdHVyZXMiLCJjIiwiaW5jbHVkZXMiLCJwcm9wZXJ0aWVzIiwiaXNvQWxwaGEyIiwiY2VudHJvaWQiLCJ0eXBlIiwiZ2VvbWV0cnkiLCJjb29yZGluYXRlcyIsInJlc2V0UG9pbnRzIiwidm9yb25vaUNlbnRyb2lkcyIsImNvbmNhdCIsInJlc2V0IiwiZml0U2l6ZSIsIm1ha2VSYW5nZUJveCIsInBhdGgiLCJnZW9QYXRoIiwic2VsZWN0QWxsIiwicmVtb3ZlIiwiY291bnRyeUdyb3VwcyIsInNsdWciLCJlbnRlciIsImFwcGVuZCIsIm1lcmdlIiwic29ydGVkQ2VudHJvaWRzIiwic29ydCIsImEiLCJiIiwiYU8iLCJlIiwiYk8iLCJmb3JFYWNoIiwibyIsInNwaWtlQ2VudHJvaWRzIiwiY291bnRyeVZvcm9ub2lDZW50cm9pZHMiLCJnZW9Wb3Jvbm9pIiwicG9seWdvbnMiLCJvbiIsInRpcE9uIiwidGlwT2ZmIiwiZXhpdCIsInRvb2x0aXAiLCJhbm5vdGF0aW9uRGF0YSIsImdldENvdW50cnkiLCJjb3VudHJ5TWV0YSIsImNvdW50cnlHZW8iLCJhbm5vdGF0aW9uTnVtRGF0YSIsInAiLCJ0cmFuc2xhdGlvbnMiLCJhbm5vdGF0aW9uc051bWJlcnMiLCJnZXRQZWFrVGV4dCIsInJlZkJveENvbnRhaW5lciIsImNvbnRleHQiLCJnZXRDb250ZXh0IiwicHJvamVjdGlvblJlZiIsImdlb05hdHVyYWxFYXJ0aDEiLCJ3b0FudGFyY3RpY2EiLCJwYXRoUmVmIiwiY2xlYXJSZWN0IiwiYmVnaW5QYXRoIiwiZmlsbFN0eWxlIiwiZmlsbCIsImFjdGl2ZVdpZHRoIiwiYWN0aXZlUmVnaW9uIiwiY2FsbCIsImRyYWciLCJpbnRlcnJ1cHQiLCJjYWxjWCIsImV2ZW50IiwieCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJzY3JvbGxMZWZ0IiwibWFwRWwiLCJhZGRFdmVudExpc3RlbmVyIiwicG9zIiwidGFyZ2V0Iiwidm9yb25vaVBhdGgiLCJzaXRlIiwiZmluZCIsInJhaXNlIiwiY291bnRyeSIsIk1hdGgiLCJyb3VuZCIsInRleHRWYXIiLCJNdXN0YWNoZSIsInJlbmRlciIsInBlcmNlbnQiLCJ0b0xvY2FsZVN0cmluZyIsInJlcGxhY2UiLCJDaGFydENvbXBvbmVudCIsIm9wdHMiLCJsb24wIiwibG9uMSIsImxhdDAiLCJsYXQxIiwidG1wIiwiZGxvbjQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSxJQUFNQSxLQUFLLEdBQUcsSUFBSUMsOEVBQUosRUFBZCxDLENBQ0E7O0lBRU1DLGE7Ozs7Ozs7Ozs7Ozs7Ozs7dU5BQ1c7QUFDYkMsc0JBQWdCLEVBQUUsQ0FETDtBQUViQyxzQkFBZ0IsRUFBRSxTQUZMO0FBR2JDLGdDQUEwQixFQUFFLEdBSGY7QUFJYkMsY0FBUSxFQUFFLHdCQUpHO0FBS2JDLDZCQUF1QixFQUFFLDJCQUxaO0FBTWJDLGlCQUFXLEVBQUUsU0FOQTtBQU9iQyxpQkFBVyxFQUFFLHFCQUFDQyxLQUFELEVBQVFDLFVBQVI7QUFBQSxlQUF3QkQsS0FBSyxHQUFHQyxVQUFSLEdBQXFCLEdBQXJCLEdBQTJCLEdBQW5EO0FBQUEsT0FQQTtBQVFiQyxTQUFHLEVBQUUsS0FSUTtBQVNiQyxZQUFNLEVB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IHRvcG9qc29uIGZyb20gJ3RvcG9qc29uLWNsaWVudCc7XG5cbmltcG9ydCBBdGxhc01ldGFkYXRhQ2xpZW50IGZyb20gJ0ByZXV0ZXJzLWdyYXBoaWNzL2dyYXBoaWNzLWF0bGFzLWNsaWVudCc7XG5pbXBvcnQgQ2hhcnRDb21wb25lbnQgZnJvbSAnLi9iYXNlL0NoYXJ0Q29tcG9uZW50JztcbmltcG9ydCBkMyBmcm9tICcuL3V0aWxzL2QzJztcbmltcG9ydCB7IGdlb1Zvcm9ub2kgfSBmcm9tICdkMy1nZW8tdm9yb25vaSc7XG5pbXBvcnQgTXVzdGFjaGUgZnJvbSAnbXVzdGFjaGUnO1xuXG5jb25zdCBBdGxhcyA9IG5ldyBBdGxhc01ldGFkYXRhQ2xpZW50KCk7XG4vLyBpbXBvcnQgdG9wb2xvZ3kgZnJvbSAnQHJldXRlcnMtZ3JhcGhpY3MvZ3JhcGhpY3MtYXRsYXMtY2xpZW50L3RvcG9qc29uL2dsb2JhbC4xMTBtLmpzb24nO1xuXG5jbGFzcyBHbG9iYWxSYXRlTWFwIGV4dGVuZHMgQ2hhcnRDb21wb25lbnQge1xuICBkZWZhdWx0UHJvcHMgPSB7XG4gICAgbWFwX3N0cm9rZV93aWR0aDogMSxcbiAgICBtYXBfc3Ryb2tlX2NvbG9yOiAnIzJmMzUzZicsXG4gICAgbWFwX2hpZ2hsaWdodF9zdHJva2Vfd2lkdGg6IDEuMixcbiAgICBtYXBfZmlsbDogJ3JnYmEoMTUzLDE1MywxNTMsMC4yNSknLFxuICAgIG1hcF9zdHJva2VfY29sb3JfYWN0aXZlOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjc1KScsXG4gICAgc3Bpa2VfY29sb3I6ICcjZWVjMzMxJyxcbiAgICBoZWlnaHRSYXRpbzogKHdpZHRoLCBicmVha3BvaW50KSA9PiAod2lkdGggPCBicmVha3BvaW50ID8gMC44IDogMC41KSxcbiAgICBnZW86IGZhbHNlLFxuICAgIGxvY2FsZTogJ2VuJyxcbiAgICBtYXBfY3VzdG9tX3Byb2plY3Rpb25zOiB7XG4gICAgICBjbGlwX2JveDogW1stMTMwLCA3MF0sIFsxOTQsIC0zOV1dLFxuICAgICAgcHJvamVjdGlvbjogJ2dlb05hdHVyYWxFYXJ0aDEnLFxuICAgICAgY2VudGVyOiBudWxsLFxuICAgICAgc2NhbGU6IG51bGwsXG4gICAgICByb3RhdGU6IG51bGwsXG4gICAgfSxcbiAgICBob3Zlcl9nYXA6IDEyLjUsXG4gICAgc3Bpa2VfaGVpZ2h0OiAzNSxcbiAgICBzcGlrZV9zaXplOiAzLjUsXG4gICAgZ2V0RGF0YVJhbmdlOiAod2lkdGgpID0+ICh7IG1pbjogMCwgbWF4OiAxIH0pLFxuICAgIHNwaWtlX3N0cm9rZV93aWR0aDogMC41LFxuICAgIHNwaWtlX2hpZ2hsaWdodF9zdHJva2Vfd2lkdGg6IDIsXG4gICAgc3Bpa2VfaGlnaGxpZ2h0X2ZpbGw6IHRydWUsXG4gICAgc3Bpa2VfY29sb3Jfc2NhbGU6IGQzLnNjYWxlVGhyZXNob2xkKCkgLy8gQ2FuIHVzZSBhIHNjYWxlIGFzIGEgcHJvcCFcbiAgICAgIC5kb21haW4oWzAuNzUsIDAuOV0pXG4gICAgICAucmFuZ2UoWycjY2NjJywgJyNmNjhlMjYnLCAnI2RlMmQyNiddKSxcbiAgICBzcGlrZV9zdHJva2Vfd2lkdGhfc2NhbGU6IGQzLnNjYWxlVGhyZXNob2xkKCkgLy8gQ2FuIHVzZSBhIHNjYWxlIGFzIGEgcHJvcCFcbiAgICAgIC5kb21haW4oWzAuNzUsIDAuOV0pXG4gICAgICAucmFuZ2UoWzAuNiwgMC45LCAxLjFdKSxcbiAgICBzcGlrZV9pbmFjdGl2ZV9vcGFjaXR5OiAxLFxuICAgIGRpc3B1dGVkX2Rhc2hhcnJheTogWzUsIDNdLFxuICAgIGtleToge1xuICAgICAgdGV4dDoge1xuICAgICAgICBtYWluX3RleHQ6ICdIb3cgY2xvc2UgaXMgdGhlIGN1cnJlbnQgd2Vla2x5IGF2ZXJhZ2UgdG8gdGhlIGNvdW50cnnigJlzIHBlYWsnLFxuICAgICAgICByZWRfcGVhazogJz45MCUnLFxuICAgICAgICBvcmFuZ2VfcGVhazogJzkwIHRvIDc1JScsXG4gICAgICAgIHdoaXRlX3BlYWs6ICc8NzUlJyxcbiAgICAgIH0sXG4gICAgICB3aWR0aDogMTQwLFxuICAgIH0sXG4gICAgYW5ub3RhdGlvbnM6IHtcbiAgICAgIG5hbWU6IFtdLFxuICAgICAgdmFsdWU6IFtdLFxuICAgIH0sXG4gICAgbW9iaWxlOiB0cnVlLFxuICAgIHJlZkJveDoge1xuICAgICAgaGVpZ2h0OiA5MCxcbiAgICAgIHdpZHRoOiAxODAsXG4gICAgICBicmVha3BvaW50OiA5MDAsXG4gICAgICB1c2VXaWR0aDogKHdpZHRoLCBmYWN0b3IpID0+ICh3aWR0aCAqIGZhY3RvciksXG4gICAgICBmYWN0b3I6IDIuMixcbiAgICB9LFxuICAgIGludGVyYWN0aW9uOiB0cnVlLFxuICAgIGF0X3BlYWtfdGV4dDogJ0F0IHBlYWsnLFxuICAgIG9mX3BlYWtfdGV4dDogXCI8dHNwYW4+IHt7IHBlcmNlbnQgfX08L3RzcGFuPiA8dHNwYW4gY2xhc3M9J3NtYWxsZXInPm9mIHBlYWs8L3RzcGFuPlwiLFxuICB9O1xuXG4gIGRyYXcoKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YSgpO1xuICAgIGNvbnN0IHByb3BzID0gdGhpcy5wcm9wcygpO1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnNlbGVjdGlvbigpLm5vZGUoKTtcbiAgICBsZXQgeyB3aWR0aCB9ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCByYXRpbyA9IHByb3BzLmhlaWdodFJhdGlvKHdpZHRoLCBwcm9wcy5yZWZCb3guYnJlYWtwb2ludClcbiAgICBsZXQgdXNlV2lkdGgsIGhlaWdodDtcbiAgICBpZiAod2lkdGggPCBwcm9wcy5yZWZCb3guYnJlYWtwb2ludCAmJiBwcm9wcy5tb2JpbGUpIHtcbiAgICAgIHVzZVdpZHRoID0gcHJvcHMucmVmQm94LnVzZVdpZHRoKHdpZHRoLHByb3BzLnJlZkJveC5mYWN0b3IpO1xuICAgICAgdGhpcy5zZWxlY3Rpb24oKS5jbGFzc2VkKCdtb2JpbGUnLCB0cnVlKTtcbiAgICAgIGhlaWdodCA9IHVzZVdpZHRoICogMC41O1xuICAgIH0gZWxzZSB7XG4gICAgICB1c2VXaWR0aCA9IHdpZHRoO1xuICAgICAgdGhpcy5zZWxlY3Rpb24oKS5jbGFzc2VkKCdtb2JpbGUnLCBmYWxzZSk7XG4gICAgICBoZWlnaHQgPSB3aWR0aCAqIHJhdGlvO1xuICAgIH1cblxuICAgIGNvbnN0IHsgbWluOiBmaWx0ZXJNaW4sIG1heDogZmlsdGVyTWF4IH0gPSBwcm9wcy5nZXREYXRhUmFuZ2Uod2lkdGgpO1xuICAgIGNvbnN0IGZpbHRlcmVkRGF0YSA9IGRhdGEuZmlsdGVyKGQgPT4gZC52YWx1ZSA+PSBmaWx0ZXJNaW4gJiYgZC52YWx1ZSA8PSBmaWx0ZXJNYXgpO1xuXG4gICAgY29uc3Qgc2NhbGVZID0gZDMuc2NhbGVMaW5lYXIoKS5yYW5nZShbMCwgcHJvcHMuc3Bpa2VfaGVpZ2h0XSkuZG9tYWluKFswLCAxXSk7XG4gICAgY29uc3Qga2V5Qm94ID0gdGhpcy5zZWxlY3Rpb24oKVxuICAgICAgLmFwcGVuZFNlbGVjdCgnZGl2LmtleScpO1xuXG4gICAga2V5Qm94LmFwcGVuZFNlbGVjdCgncC5sZWZ0LXRleHQudGV4dC1pbmxpbmUua2V5LXRleHQnKVxuICAgICAgLmh0bWwocHJvcHMua2V5LnRleHQubWFpbl90ZXh0KTtcblxuICAgIGNvbnN0IGtleVN2Z0NvbnRhaW5lciA9IGtleUJveC5hcHBlbmRTZWxlY3QoJ2Rpdi5zdmctY29udGFpbmVyLnRleHQtaW5saW5lJylcbiAgICBjb25zdCBrZXlHYXAgPSBwcm9wcy5rZXkud2lkdGggLyAzO1xuICAgIC8vIGFkZCBrZXkgYm94XG4gICAgY29uc3Qga2V5U3ZnID0ga2V5U3ZnQ29udGFpbmVyLmFwcGVuZFNlbGVjdCgnc3ZnLnRleHQtaW5saW5lJylcbiAgICAgIC5hdHRyKCdoZWlnaHQnLCBwcm9wcy5zcGlrZV9oZWlnaHQgKyA2KVxuICAgICAgLnN0eWxlKCdmaWxsJywgJ25vbmUnKVxuICAgICAgLmF0dHIoJ3dpZHRoJywgcHJvcHMua2V5LndpZHRoIC0gKGtleUdhcCAqIDAuMjcpKTtcblxuICAgIGtleVN2Zy5hcHBlbmRTZWxlY3QoJ2RlZnMnKVxuICAgICAgLmFwcGVuZFNlbGVjdCgnbWFya2VyLnRvcCcpXG4gICAgICAuYXR0cignaWQnLCAnYXJyb3ctdXAnKVxuICAgICAgLmF0dHIoJ21hcmtlcldpZHRoJywgMTIpXG4gICAgICAuYXR0cignbWFya2VySGVpZ2h0JywgMTApXG4gICAgICAuYXR0cigncmVmWScsIDUpXG4gICAgICAuYXR0cigncmVmWCcsIDYpXG4gICAgICAuYXR0cignb3JpZW50JywgJ2F1dG8nKVxuICAgICAgLmFwcGVuZFNlbGVjdCgncGF0aC51cCcpXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsICd3aGl0ZScpXG4gICAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsIDAuNilcbiAgICAgIC5hdHRyKCdkJywgJ00wIDAgTDYgNSBMMCAxMCcpO1xuXG4gICAga2V5U3ZnLnNlbGVjdCgnZGVmcycpXG4gICAgICAuYXBwZW5kU2VsZWN0KCdtYXJrZXIuZG93bicpXG4gICAgICAuYXR0cignaWQnLCAnYXJyb3ctZG93bicpXG4gICAgICAuYXR0cignbWFya2VyV2lkdGgnLCAxMilcbiAgICAgIC5hdHRyKCdtYXJrZXJIZWlnaHQnLCAxMClcbiAgICAgIC5hdHRyKCdyZWZZJywgNSlcbiAgICAgIC5hdHRyKCdyZWZYJywgMClcbiAgICAgIC5hdHRyKCdvcmllbnQnLCAnYXV0bycpXG4gICAgICAuYXBwZW5kU2VsZWN0KCdwYXRoLmRvd24nKVxuICAgICAgLnN0eWxlKCdzdHJva2UnLCAnd2hpdGUnKVxuICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCAwLjYpXG4gICAgICAuYXR0cignZCcsICdNNiAwIEwwIDUgTDYgMTAnKTtcblxuICAgIC8vIGFkZCBzcGlrZSAxXG4gICAga2V5U3ZnLmFwcGVuZFNlbGVjdCgncGF0aC5yZWQtc3Bpa2UuaGlnaCcpXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsIHByb3BzLnNwaWtlX2NvbG9yX3NjYWxlKDEpKVxuICAgICAgLmF0dHIoJ2QnLCAoZCkgPT4ge1xuICAgICAgICBjb25zdCBvYmogPSBba2V5R2FwICogMC43LCBwcm9wcy5zcGlrZV9oZWlnaHRdO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHNjYWxlWSgxKTtcbiAgICAgICAgcmV0dXJuICdNJyArIChvYmpbMF0gLSBwcm9wcy5zcGlrZV9zaXplKSArICcgJyArIG9ialsxXSArICcgTCcgKyBvYmpbMF0gKyAnICcgKyAob2JqWzFdIC0gdmFsdWUpICsgJyBMJyArIChvYmpbMF0gKyBwcm9wcy5zcGlrZV9zaXplKSArICcgJyArIG9ialsxXSArICcgJztcbiAgICAgIH0pO1xuXG4gICAga2V5U3ZnLmFwcGVuZFNlbGVjdCgncGF0aC5yZWQtc3Bpa2UubG93JylcbiAgICAgIC5zdHlsZSgnc3Ryb2tlJywgcHJvcHMuc3Bpa2VfY29sb3Jfc2NhbGUoMC45KSlcbiAgICAgIC5zdHlsZSgnZmlsbCcscHJvcHMuc3Bpa2VfY29sb3Jfc2NhbGUoMC45KSlcbiAgICAgIC5hdHRyKCdkJywgKGQpID0+IHtcbiAgICAgICAgY29uc3Qgb2JqID0gW2tleUdhcCAqIDAuNyArIHByb3BzLnNwaWtlX3NpemUqMS40LCBwcm9wcy5zcGlrZV9oZWlnaHRdO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHNjYWxlWSgwLjkpO1xuICAgICAgICByZXR1cm4gJ00nICsgKG9ialswXSAtIHByb3BzLnNwaWtlX3NpemUpICsgJyAnICsgb2JqWzFdICsgJyBMJyArIG9ialswXSArICcgJyArIChvYmpbMV0gLSB2YWx1ZSkgKyAnIEwnICsgKG9ialswXSArIHByb3BzLnNwaWtlX3NpemUpICsgJyAnICsgb2JqWzFdICsgJyAnO1xuICAgICAgfSk7XG5cbiAgICBrZXlTdmcuYXBwZW5kU2VsZWN0KCdwYXRoLm9yYW5nZS1zcGlrZS5oaWdoJylcbiAgICAgIC5zdHlsZSgnc3Ryb2tlJywgcHJvcHMuc3Bpa2VfY29sb3Jfc2NhbGUoMC44OSkpXG4gICAgICAuYXR0cignZCcsIChkLCBpKSA9PiB7XG4gICAgICAgIGNvbnN0IG9iaiA9IFtrZXlHYXAgKiAxLjUsIHByb3BzLnNwaWtlX2hlaWdodF07XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc2NhbGVZKDAuODkpO1xuICAgICAgICByZXR1cm4gJ00nICsgKG9ialswXSAtIHByb3BzLnNwaWtlX3NpemUpICsgJyAnICsgb2JqWzFdICsgJyBMJyArIG9ialswXSArICcgJyArIChvYmpbMV0gLSB2YWx1ZSkgKyAnIEwnICsgKG9ialswXSArIHByb3BzLnNwaWtlX3NpemUpICsgJyAnICsgb2JqWzFdICsgJyAnO1xuICAgICAgfSk7XG5cbiAgICBrZXlTdmcuYXBwZW5kU2VsZWN0KCdwYXRoLm9yYW5nZS1zcGlrZS5sb3cnKVxuICAgICAgLnN0eWxlKCdzdHJva2UnLCBwcm9wcy5zcGlrZV9jb2xvcl9zY2FsZSgwLjc1KSlcbiAgICAgIC5zdHlsZSgnZmlsbCcscHJvcHMuc3Bpa2VfY29sb3Jfc2NhbGUoMC43NSkpXG4gICAgICAuYXR0cignZCcsIChkKSA9PiB7XG4gICAgICAgIGNvbnN0IG9iaiA9IFtrZXlHYXAgKiAxLjUrcHJvcHMuc3Bpa2Vfc2l6ZSoxLjQsIHByb3BzLnNwaWtlX2hlaWdodF07XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc2NhbGVZKDAuNzUpO1xuICAgICAgICByZXR1cm4gJ00nICsgKG9ialswXSAtIHByb3BzLnNwaWtlX3NpemUpICsgJyAnICsgb2JqWzFdICsgJyBMJyArIG9ialswXSArICcgJyArIChvYmpbMV0gLSB2YWx1ZSkgKyAnIEwnICsgKG9ialswXSArIHByb3BzLnNwaWtlX3NpemUpICsgJyAnICsgb2JqWzFdICsgJyAnO1xuICAgICAgfSk7XG5cbiAgICBrZXlTdmcuYXBwZW5kU2VsZWN0KCdwYXRoLndoaXRlLXNwaWtlLmhpZ2gnKVxuICAgICAgLnN0eWxlKCdzdHJva2UnLCBwcm9wcy5zcGlrZV9jb2xvcl9zY2FsZSgwLjc0KSlcbiAgICAgIC5hdHRyKCdkJywgKGQsIGkpID0+IHtcbiAgICAgICAgY29uc3Qgb2JqID0gW2tleUdhcCAqIDIuMywgcHJvcHMuc3Bpa2VfaGVpZ2h0XTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBzY2FsZVkoMC43NCk7XG4gICAgICAgIHJldHVybiAnTScgKyAob2JqWzBdIC0gcHJvcHMuc3Bpa2Vfc2l6ZSkgKyAnICcgKyBvYmpbMV0gKyAnIEwnICsgb2JqWzBdICsgJyAnICsgKG9ialsxXSAtIHZhbHVlKSArICcgTCcgKyAob2JqWzBdICsgcHJvcHMuc3Bpa2Vfc2l6ZSkgKyAnICcgKyBvYmpbMV0gKyAnICc7XG4gICAgICB9KTtcblxuICAgIGtleVN2Zy5hcHBlbmRTZWxlY3QoJ3BhdGgud2hpdGUtc3Bpa2UubG93JylcbiAgICAgIC5zdHlsZSgnc3Ryb2tlJywgJyNjY2MnKVxuICAgICAgLnN0eWxlKCdmaWxsJywgJyNjY2MnKVxuICAgICAgLmF0dHIoJ2QnLCAoZCwgaSkgPT4ge1xuICAgICAgICBjb25zdCBvYmogPSBba2V5R2FwICogMi4zK3Byb3BzLnNwaWtlX3NpemUqMS40LCBwcm9wcy5zcGlrZV9oZWlnaHRdO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHNjYWxlWSgwKTtcbiAgICAgICAgcmV0dXJuICdNJyArIChvYmpbMF0gLSBwcm9wcy5zcGlrZV9zaXplKSArICcgJyArIG9ialsxXSArICcgTCcgKyBvYmpbMF0gKyAnICcgKyAob2JqWzFdIC0gdmFsdWUpICsgJyBMJyArIChvYmpbMF0gKyBwcm9wcy5zcGlrZV9zaXplKSArICcgJyArIG9ialsxXSArICcgJztcbiAgICAgIH0pO1xuXG4gICAga2V5U3ZnLmFwcGVuZFNlbGVjdCgnbGluZScpXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsICd3aGl0ZScpXG4gICAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsIDAuNylcbiAgICAgIC5hdHRyKCd4MScsIDEwKVxuICAgICAgLmF0dHIoJ3gyJywgMTApXG4gICAgICAuYXR0cigneTEnLCA3KVxuICAgICAgLmF0dHIoJ3kxJywgcHJvcHMuc3Bpa2VfaGVpZ2h0KVxuICAgICAgLmF0dHIoJ21hcmtlci1lbmQnLCAndXJsKCNhcnJvdy11cCknKVxuICAgICAgLmF0dHIoJ21hcmtlci1zdGFydCcsICd1cmwoI2Fycm93LWRvd24pJyk7XG5cbiAgICBjb25zdCBib3R0b21LZXlUZXh0ID0ga2V5U3ZnQ29udGFpbmVyLmFwcGVuZFNlbGVjdCgnZGl2LmJvdHRvbS10ZXh0JylcbiAgICAgIC5zdHlsZSgncGFkZGluZy1sZWZ0JywgYCR7a2V5R2FwICogMC40fXB4YCk7XG5cbiAgICBib3R0b21LZXlUZXh0LmFwcGVuZFNlbGVjdCgncC5yZWQtdGV4dC5rZXktdGV4dC50ZXh0LWlubGluZScpXG4gICAgICAuc3R5bGUoJ3dpZHRoJywgYCR7a2V5R2FwICogMC44fXB4YClcbiAgICAgIC5odG1sKHByb3BzLmtleS50ZXh0LnJlZF9wZWFrKTtcbiAgICBib3R0b21LZXlUZXh0LmFwcGVuZFNlbGVjdCgncC5vcmFuZ2UtdGV4dC5rZXktdGV4dC50ZXh0LWlubGluZScpXG4gICAgICAuc3R5bGUoJ3dpZHRoJywgYCR7a2V5R2FwICogMC44fXB4YClcbiAgICAgIC5odG1sKHByb3BzLmtleS50ZXh0Lm9yYW5nZV9wZWFrKTtcbiAgICBib3R0b21LZXlUZXh0LmFwcGVuZFNlbGVjdCgncC53aGl0ZS10ZXh0LmtleS10ZXh0LnRleHQtaW5saW5lJylcbiAgICAgIC5zdHlsZSgnd2lkdGgnLCBgJHtrZXlHYXAgKiAwLjh9cHhgKVxuICAgICAgLmh0bWwocHJvcHMua2V5LnRleHQud2hpdGVfcGVhayk7XG5cbiAgICAvLyBTVkcgYmVnaW5zIGhlcmVcbiAgICBjb25zdCBzdmcgPSB0aGlzLnNlbGVjdGlvbigpXG4gICAgICAuYXBwZW5kU2VsZWN0KCdkaXYuY2hhcnQtY29udGFpbmVyLWRpdicpXG4gICAgICAuYXR0cignaWQnLCAnbWFwLWNvbnRhaW5lcicpXG4gICAgICAuc3R5bGUoJ292ZXJmbG93LXgnLCAnc2Nyb2xsJylcbiAgICAgIC5hcHBlbmRTZWxlY3QoJ3N2Zy5jaGFydCcpIC8vIHNlZSBkb2NzIGluIC4vdXRpbHMvZDMuanNcbiAgICAgIC5hdHRyKCd3aWR0aCcsIHVzZVdpZHRoKVxuICAgICAgLmF0dHIoJ2hlaWdodCcsIGhlaWdodCk7XG5cbiAgICBjb25zdCBnID0gc3ZnLmFwcGVuZFNlbGVjdCgnZycpO1xuXG4gICAgaWYgKCFkM1twcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLnByb2plY3Rpb25dKSB7XG4gICAgICBwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLnByb2plY3Rpb24gPSAnZ2VvTmF0dXJhbEVhcnRoMSc7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGQzW3Byb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMucHJvamVjdGlvbl0pXG5cbiAgICBjb25zdCBwcm9qZWN0aW9uID0gZDNbcHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5wcm9qZWN0aW9uXSgpO1xuICAgIGNvbnN0IGNvdW50cmllcyA9IHRvcG9qc29uLmZlYXR1cmUocHJvcHMuZ2VvLCBwcm9wcy5nZW8ub2JqZWN0cy5jb3VudHJpZXMpO1xuICAgIGxldCBkaXNwdXRlZDtcbiAgICBpZiAocHJvcHMuZ2VvLm9iamVjdHMuZGlzcHV0ZWRCb3VuZGFyaWVzKSB7XG4gICAgICBkaXNwdXRlZCA9IHRvcG9qc29uLm1lc2gocHJvcHMuZ2VvLCBwcm9wcy5nZW8ub2JqZWN0cy5kaXNwdXRlZEJvdW5kYXJpZXMpOyAgXG4gICAgfVxuXG4gICAgaWYgKHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMuY2VudGVyICYmIHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMuY2VudGVyLmxlbmd0aCA9PT0gMikge1xuICAgICAgcHJvamVjdGlvbi5jZW50ZXIocHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5jZW50ZXIpO1xuICAgIH1cblxuICAgIGlmIChwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLnJvdGF0ZSAmJiBwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLnJvdGF0ZS5sZW5ndGggPT09IDIpIHtcbiAgICAgIHByb2plY3Rpb24ucm90YXRlKHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMucm90YXRlKTtcbiAgICB9XG5cbiAgICBjb25zdCBmaWx0ZXJlZENvdW50cnlLZXlzID0gZmlsdGVyZWREYXRhLm1hcChkID0+IGQua2V5KTtcbiAgICBjb25zdCBjb3VudHJ5Q2VudHJvaWRzID0gY291bnRyaWVzLmZlYXR1cmVzXG4gICAgICAuZmlsdGVyKGMgPT4gZmlsdGVyZWRDb3VudHJ5S2V5cy5pbmNsdWRlcyhjLnByb3BlcnRpZXMuaXNvQWxwaGEyKSlcbiAgICAgIC5maWx0ZXIoYyA9PiBjLnByb3BlcnRpZXMuY2VudHJvaWQubGVuZ3RoPT0yICYmIGMucHJvcGVydGllcy5jZW50cm9pZFswXSAmJiBjLnByb3BlcnRpZXMuY2VudHJvaWRbMV0pXG4gICAgICAubWFwKCh7IHByb3BlcnRpZXMgfSkgPT4gKHtcbiAgICAgICAgdHlwZTogJ0ZlYXR1cmUnLFxuICAgICAgICBwcm9wZXJ0aWVzLFxuICAgICAgICBnZW9tZXRyeToge1xuICAgICAgICAgIHR5cGU6ICdQb2ludCcsXG4gICAgICAgICAgY29vcmRpbmF0ZXM6IHByb3BlcnRpZXMuY2VudHJvaWQsXG4gICAgICAgIH0sXG4gICAgICB9KSk7XG5cbiAgICAvLyBBZGRpbmcgc29tZSBwb2ludHMgaW4gdGhlIG9jZWFuIHRvIGNyZWF0ZSB2b3Jvbm9pIHNwYWNlcyB0aGF0IHdpbGxcbiAgICAvLyByZXNldCB0aGUgbWFwLCBzbyBhcyB5b3VyIGN1cnNvciB0cmFjZXMgbGFuZCBtYXNzZXMsIHlvdSBnZXQgaGlnaGxpZ2h0cyxcbiAgICAvLyBidXQgaW4gdGhlIG9jZWFuIHlvdSBjYW4gc2VlIHRoZSB3aG9sZSB3b3JsZCBwaWN0dXJlLi4uXG4gICAgY29uc3QgcmVzZXRQb2ludHMgPSBbXG4gICAgICBbLTQwLjI0ODEwOCwgMzguNjUzNzg4XSwgLy8gTm9ydGggQXRsYW50aWNcbiAgICAgIFstMjkuODAwMDE4LCAxNC41MzYyMjBdLCAvLyBDZW50cmFsIEF0bGFudGljXG4gICAgICBbLTE1LjQ4NTU0OCwgLTEyLjk0MTY0OF0sIC8vIFNvdXRoIEF0bGFudGljXG4gICAgICBbLTE3NC44MDg2NTksIDM1Ljg1NjEyN10sIC8vIE5vcnRoIFBhY2lmaWNcbiAgICAgIFstMTE3LjMyNDQxNCwgLTExLjEzMDgyMV0sIC8vIFNvdXRoIFBhY2lmaWNcbiAgICAgIFstMTczLjAzOTEzMSwgLTQ0LjkyMDY5N10sIC8vIFNvdXRod2VzdCBwYWNpZmljXG4gICAgICBbNjQuNDA3MDI0LCA1LjA0NTgxNV0sIC8vIE5vcnRoIEluZGlhblxuICAgICAgWzc1LjU2OTEyOCwgLTMxLjY5MTkzOV0sIC8vIFNvdXRoIEluZGlhblxuICAgICAgWy01Ljc4MzI2NiwgLTgzLjYwODA3N10sIC8vIEFudGFyY3RpY2FcbiAgICBdO1xuICAgIGNvbnN0IHZvcm9ub2lDZW50cm9pZHMgPSBjb3VudHJ5Q2VudHJvaWRzLmNvbmNhdChyZXNldFBvaW50cy5tYXAoY2VudHJvaWQgPT4gKHtcbiAgICAgIHR5cGU6ICdGZWF0dXJlJyxcbiAgICAgIHByb3BlcnRpZXM6IHsgcmVzZXQ6IHRydWUgfSxcbiAgICAgIGdlb21ldHJ5OiB7XG4gICAgICAgIHR5cGU6ICdQb2ludCcsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBjZW50cm9pZCxcbiAgICAgIH0sXG4gICAgfSkpKTtcblxuICAgIGlmIChwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLmNsaXBfYm94ICYmIChwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLmNsaXBfYm94Lmxlbmd0aCA9PT0gMiAmJiBwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLmNsaXBfYm94WzBdLmxlbmd0aCA9PT0gMiAmJiBwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLmNsaXBfYm94WzFdLmxlbmd0aCA9PT0gMikpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdjbGlwcGluZyEgOiknKTtcbiAgICAgIHByb2plY3Rpb24uZml0U2l6ZShbdXNlV2lkdGgsIGhlaWdodF0sIG1ha2VSYW5nZUJveChwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLmNsaXBfYm94KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKCdjYW50IGNsaXAgOignKTtcbiAgICAgIHByb2plY3Rpb24uZml0U2l6ZShbdXNlV2lkdGgsIGhlaWdodF0sIGNvdW50cmllcyk7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMuc2NhbGUpIHtcbiAgICAgIHByb2plY3Rpb24uc2NhbGUocHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5zY2FsZSk7XG4gICAgfVxuXG4gICAgY29uc3QgcGF0aCA9IGQzLmdlb1BhdGgoKS5wcm9qZWN0aW9uKHByb2plY3Rpb24pO1xuICAgIHN2Zy5zZWxlY3RBbGwoJy5jb3VudHJ5LC5kaXNwdXRlZCwuY2VudHJvaWQnKS5yZW1vdmUoKTtcblxuICAgIGNvbnN0IGNvdW50cnlHcm91cHMgPSBnLmFwcGVuZFNlbGVjdCgnZy5jb3VudHJpZXMnKVxuICAgICAgLnN0eWxlKCdwb2ludGVyLWV2ZW50cycsICdub25lJylcbiAgICAgIC5zdHlsZSgnZmlsbCcsIHByb3BzLm1hcF9maWxsKVxuICAgICAgLnNlbGVjdEFsbCgncGF0aC5jb3VudHJ5JylcbiAgICAgIC5kYXRhKGNvdW50cmllcy5mZWF0dXJlcy5maWx0ZXIoZCA9PiBkLnByb3BlcnRpZXMuc2x1ZyAhPT0gJ2FudGFyY3RpY2EnKSwgZCA9PiBkLnByb3BlcnRpZXMuc2x1Zyk7XG5cbiAgICBjb3VudHJ5R3JvdXBzXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmFwcGVuZCgncGF0aCcpXG4gICAgICAuYXR0cignY2xhc3MnLCBkID0+IGBjb3VudHJ5IGMtJHtkLnByb3BlcnRpZXMuc2x1Z30gbGV2ZWwtMGApXG4gICAgICAubWVyZ2UoY291bnRyeUdyb3VwcylcbiAgICAgIC5zdHlsZSgnc3Ryb2tlJywgcHJvcHMubWFwX3N0cm9rZV9jb2xvcilcbiAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgcHJvcHMubWFwX3N0cm9rZV93aWR0aClcbiAgICAgIC5hdHRyKCdkJywgcGF0aCk7XG5cbiAgICBpZiAoZGlzcHV0ZWQpIHtcbiAgICAgIGcuYXBwZW5kU2VsZWN0KCdwYXRoLmRpc3B1dGVkJylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2Rpc3B1dGVkIGxldmVsLTAnKVxuICAgICAgICAuc3R5bGUoJ3BvaW50ZXItZXZlbnRzJywgJ25vbmUnKVxuICAgICAgICAuc3R5bGUoJ3N0cm9rZScsIHByb3BzLm1hcF9zdHJva2VfY29sb3IpXG4gICAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgcHJvcHMubWFwX3N0cm9rZV93aWR0aClcbiAgICAgICAgLnN0eWxlKCdmaWxsJywgJ25vbmUnKVxuICAgICAgICAuc3R5bGUoJ3N0cm9rZS1kYXNoYXJyYXknLCBwcm9wcy5kaXNwdXRlZF9kYXNoYXJyYXkpXG4gICAgICAgIC5hdHRyKCdkJywgcGF0aChkaXNwdXRlZCkpO1xuICAgIH1cblxuICAgIGNvbnN0IHNvcnRlZENlbnRyb2lkcyA9IGNvdW50cnlDZW50cm9pZHMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgY29uc3QgYU8gPSBmaWx0ZXJlZERhdGEuZmlsdGVyKGUgPT4gYS5wcm9wZXJ0aWVzLmlzb0FscGhhMiA9PT0gZS5rZXkpWzBdO1xuICAgICAgY29uc3QgYk8gPSBmaWx0ZXJlZERhdGEuZmlsdGVyKGUgPT4gYi5wcm9wZXJ0aWVzLmlzb0FscGhhMiA9PT0gZS5rZXkpWzBdO1xuICAgICAgcmV0dXJuIGFPLnZhbHVlIC0gYk8udmFsdWU7XG4gICAgfSk7XG5cbiAgICBzb3J0ZWRDZW50cm9pZHMuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgY29uc3QgbyA9IGZpbHRlcmVkRGF0YS5maWx0ZXIoZSA9PiBkLnByb3BlcnRpZXMuaXNvQWxwaGEyID09PSBlLmtleSlbMF07XG4gICAgICBpZiAobykge1xuICAgICAgICBkLnZhbHVlID0gby52YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IHNwaWtlQ2VudHJvaWRzID0gZy5hcHBlbmRTZWxlY3QoJ2cuc3Bpa2UtbGF5ZXInKVxuICAgICAgLnN0eWxlKCdwb2ludGVyLWV2ZW50cycsICdub25lJylcbiAgICAgIC5zZWxlY3RBbGwoJ3BhdGguY2VudHJvaWQnKVxuICAgICAgLmRhdGEoc29ydGVkQ2VudHJvaWRzKTtcblxuICAgIHNwaWtlQ2VudHJvaWRzLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgZCA9PiBkLnByb3BlcnRpZXMuc2x1ZyArICcgY2VudHJvaWQnKVxuICAgICAgLm1lcmdlKHNwaWtlQ2VudHJvaWRzKVxuICAgICAgLmF0dHIoJ2QnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHByb2plY3Rpb24oZC5wcm9wZXJ0aWVzLmNlbnRyb2lkKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBzY2FsZVkoZC52YWx1ZSk7XG4gICAgICAgIHJldHVybiAnTScgKyAob2JqWzBdIC0gcHJvcHMuc3Bpa2Vfc2l6ZSkgKyAnICcgKyBvYmpbMV0gKyAnIEwnICsgb2JqWzBdICsgJyAnICsgKG9ialsxXSAtIHZhbHVlKSArICcgTCcgKyAob2JqWzBdICsgcHJvcHMuc3Bpa2Vfc2l6ZSkgKyAnICcgKyBvYmpbMV0gKyAnICc7XG4gICAgICB9KVxuICAgICAgLnN0eWxlKCdmaWxsJywgJ25vbmUnKVxuICAgICAgLnN0eWxlKCdzdHJva2UnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBkLnZhbHVlID8gcHJvcHMuc3Bpa2VfY29sb3Jfc2NhbGUoZC52YWx1ZSkgOiAnI2NjYyc7XG4gICAgICB9KVxuICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBkLnZhbHVlID8gcHJvcHMuc3Bpa2Vfc3Ryb2tlX3dpZHRoX3NjYWxlKGQudmFsdWUpIDogMC41O1xuICAgICAgfSk7XG5cbiAgICBjb25zdCBjb3VudHJ5Vm9yb25vaUNlbnRyb2lkcyA9IGcuYXBwZW5kU2VsZWN0KCdnLnZvcm9ub2knKVxuICAgICAgLnN0eWxlKCdmaWxsJywgJ25vbmUnKVxuICAgICAgLnN0eWxlKCdjdXJzb3InLCBwcm9wcy5pbnRlcmFjdGlvbj8nY3Jvc3NoYWlyJzonZGVmYXVsdCcpXG4gICAgICAuc3R5bGUoJ3BvaW50ZXItZXZlbnRzJywgJ2FsbCcpXG4gICAgICAuc2VsZWN0QWxsKCdwYXRoLnZvcm9ub2knKVxuICAgICAgLmRhdGEoZ2VvVm9yb25vaSgpLnBvbHlnb25zKHZvcm9ub2lDZW50cm9pZHMpLmZlYXR1cmVzKTtcblxuICAgIGNvdW50cnlWb3Jvbm9pQ2VudHJvaWRzLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgZCA9PiAndm9yb25vaScpXG4gICAgICAubWVyZ2UoY291bnRyeVZvcm9ub2lDZW50cm9pZHMpXG4gICAgICAuYXR0cignZCcsIHBhdGgpXG4gICAgICAub24oJ21vdXNlb3ZlcicsIGQgPT4ge1xuICAgICAgICBpZiAocHJvcHMuaW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICB0aXBPbihkKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5vbignbW91c2VvdXQnLCBkID0+IHtcbiAgICAgICAgaWYgKHByb3BzLmludGVyYWN0aW9uKSB7XG4gICAgICAgICAgdGlwT2ZmKGQpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIGNvdW50cnlWb3Jvbm9pQ2VudHJvaWRzLmV4aXQoKVxuICAgICAgLnJlbW92ZSgpO1xuXG4gICAgY29uc3QgdG9vbHRpcCA9IGcuYXBwZW5kU2VsZWN0KCdnLnRleHQtZ3JvdXAnKVxuICAgICAgLnN0eWxlKCdwb2ludGVyLWV2ZW50cycsICdub25lJylcbiAgICAgIC5hcHBlbmQoJ3RleHQnKTtcblxuICAgIGxldCBhbm5vdGF0aW9uRGF0YSA9IHByb3BzLmFubm90YXRpb25zLm5hbWUubWFwKChkKSA9PiB7XG4gICAgICBjb25zdCBjID0gQXRsYXMuZ2V0Q291bnRyeShkKTtcbiAgICAgIGNvbnN0IGdlbyA9IGNvdW50cnlDZW50cm9pZHMuZmlsdGVyKGUgPT4gZS5wcm9wZXJ0aWVzLmlzb0FscGhhMiA9PT0gYy5pc29BbHBoYTIpWzBdXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb3VudHJ5TWV0YTogYyxcbiAgICAgICAgY291bnRyeUdlbzogZ2VvLFxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIGxldCBhbm5vdGF0aW9uTnVtRGF0YSA9IHByb3BzLmFubm90YXRpb25zLnZhbHVlLm1hcCgoZCkgPT4ge1xuICAgICAgY29uc3QgYyA9IEF0bGFzLmdldENvdW50cnkoZCk7XG4gICAgICBjb25zdCBnZW8gPSBzb3J0ZWRDZW50cm9pZHMuZmlsdGVyKGUgPT4gZS5wcm9wZXJ0aWVzLmlzb0FscGhhMiA9PT0gYy5pc29BbHBoYTIpWzBdXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb3VudHJ5TWV0YTogYyxcbiAgICAgICAgY291bnRyeUdlbzogZ2VvLFxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIGFubm90YXRpb25EYXRhID0gYW5ub3RhdGlvbkRhdGEuZmlsdGVyKGQgPT4gZC5jb3VudHJ5TWV0YSAmJiBkLmNvdW50cnlHZW8pXG4gICAgYW5ub3RhdGlvbk51bURhdGEgPSBhbm5vdGF0aW9uTnVtRGF0YS5maWx0ZXIoZCA9PiBkLmNvdW50cnlNZXRhICYmIGQuY291bnRyeUdlbylcblxuICAgIGNvbnN0IGFubm90YXRpb25zID0gZy5hcHBlbmRTZWxlY3QoJ2cubmFtZS1hbm5vdGF0aW9ucycpXG4gICAgICAuc3R5bGUoJ3BvaW50ZXItZXZlbnRzJywgJ25vbmUnKVxuICAgICAgLnNlbGVjdEFsbCgndGV4dC5hbm5vdGF0aW9uJylcbiAgICAgIC5kYXRhKGFubm90YXRpb25EYXRhLCBkID0+IGQuY291bnRyeU1ldGEuaXNvQWxwaGEyKTtcblxuICAgIGFubm90YXRpb25zLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2Fubm90YXRpb24nKVxuICAgICAgLm1lcmdlKGFubm90YXRpb25zKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIChkKSA9PiB7XG4gICAgICAgIGNvbnN0IHAgPSBwcm9qZWN0aW9uKGQuY291bnRyeUdlby5nZW9tZXRyeS5jb29yZGluYXRlcyk7XG4gICAgICAgIHJldHVybiBgdHJhbnNsYXRlKCR7cFswXX0sJHtwWzFdICsgcHJvcHMuaG92ZXJfZ2FwfSlgO1xuICAgICAgfSlcbiAgICAgIC50ZXh0KChkKSA9PiB7XG4gICAgICAgIHJldHVybiBkLmNvdW50cnlNZXRhLnRyYW5zbGF0aW9uc1twcm9wcy5sb2NhbGVdO1xuICAgICAgfSk7XG5cbiAgICBhbm5vdGF0aW9ucy5leGl0KClcbiAgICAgIC5yZW1vdmUoKTtcblxuICAgIGNvbnN0IGFubm90YXRpb25zTnVtYmVycyA9IGcuYXBwZW5kU2VsZWN0KCdnLm51bWJlci1hbm5vdGF0aW9ucycpXG4gICAgICAuc3R5bGUoJ3BvaW50ZXItZXZlbnRzJywgJ25vbmUnKVxuICAgICAgLnNlbGVjdEFsbCgndGV4dC5hbm5vdGF0aW9uJylcbiAgICAgIC5kYXRhKGFubm90YXRpb25OdW1EYXRhKTtcblxuICAgIGFubm90YXRpb25zTnVtYmVycy5lbnRlcigpXG4gICAgICAuYXBwZW5kKCd0ZXh0JylcbiAgICAgIC5hdHRyKCdjbGFzcycsICdhbm5vdGF0aW9uJylcbiAgICAgIC5tZXJnZShhbm5vdGF0aW9uc051bWJlcnMpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgKGQpID0+IHtcbiAgICAgICAgY29uc3QgcCA9IHByb2plY3Rpb24oZC5jb3VudHJ5R2VvLmdlb21ldHJ5LmNvb3JkaW5hdGVzKTtcbiAgICAgICAgcmV0dXJuIGB0cmFuc2xhdGUoJHtwWzBdfSwke3BbMV0gKyBwcm9wcy5ob3Zlcl9nYXB9KWA7XG4gICAgICB9KVxuICAgICAgLmh0bWwoKGQpID0+IHtcbiAgICAgICAgcmV0dXJuIGdldFBlYWtUZXh0KGQuY291bnRyeUdlby52YWx1ZSk7XG4gICAgICB9KTtcblxuICAgIGFubm90YXRpb25zTnVtYmVycy5leGl0KClcbiAgICAgIC5yZW1vdmUoKTtcblxuICAgIGlmIChwcm9wcy5tb2JpbGUgJiYgd2lkdGggPCBwcm9wcy5yZWZCb3guYnJlYWtwb2ludCkge1xuICAgICAgLy8gUmVmIGJveCBhdCB0aGUgYm90dG9tIGZvciBtb2JpbGUgc3RhcnRzIGhlcmVcblxuICAgICAgY29uc3QgcmVmQm94Q29udGFpbmVyID0gdGhpcy5zZWxlY3Rpb24oKVxuICAgICAgICAuYXBwZW5kU2VsZWN0KCdkaXYucmVmLWJveCcpXG4gICAgICAgIC5jbGFzc2VkKCdoaWRlJywgZmFsc2UpXG4gICAgICAgIC5zdHlsZSgndGV4dC1hbGlnbicsICdjZW50ZXInKVxuICAgICAgICAuc3R5bGUoJ3dpZHRoJywgYCR7cHJvcHMucmVmQm94LndpZHRofXB4YClcbiAgICAgICAgLnN0eWxlKCdoZWlnaHQnLCBgJHtwcm9wcy5yZWZCb3guaGVpZ2h0fXB4YCk7XG5cbiAgICAgIGNvbnN0IHJlZkJveCA9IHJlZkJveENvbnRhaW5lci5hcHBlbmRTZWxlY3QoJ2NhbnZhcycpXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIHByb3BzLnJlZkJveC53aWR0aClcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHByb3BzLnJlZkJveC5oZWlnaHQpO1xuXG4gICAgICBjb25zdCBjb250ZXh0ID0gcmVmQm94Lm5vZGUoKS5nZXRDb250ZXh0KCcyZCcpO1xuXG4gICAgICBjb25zdCBwcm9qZWN0aW9uUmVmID0gZDMuZ2VvTmF0dXJhbEVhcnRoMSgpO1xuXG4gICAgICBpZiAocHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5jbGlwX2JveCAmJiAocHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5jbGlwX2JveC5sZW5ndGggPT09IDIgJiYgcHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5jbGlwX2JveFswXS5sZW5ndGggPT09IDIgJiYgcHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5jbGlwX2JveFsxXS5sZW5ndGggPT09IDIpKSB7XG4gICAgICAgIHByb2plY3Rpb25SZWYuZml0U2l6ZShbcHJvcHMucmVmQm94LndpZHRoLCBwcm9wcy5yZWZCb3guaGVpZ2h0XSwgbWFrZVJhbmdlQm94KHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMuY2xpcF9ib3gpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2plY3Rpb25SZWYuZml0U2l6ZShbcHJvcHMucmVmQm94LndpZHRoLCBwcm9wcy5yZWZCb3guaGVpZ2h0XSwgY291bnRyaWVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLnNjYWxlKSB7XG4gICAgICAgIHByb2plY3Rpb25SZWYuc2NhbGUocHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5zY2FsZSk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5jZW50ZXIgJiYgcHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5jZW50ZXIubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIHByb2plY3Rpb25SZWYuY2VudGVyKHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMuY2VudGVyKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLnJvdGF0ZSAmJiBwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLnJvdGF0ZS5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgcHJvamVjdGlvblJlZi5yb3RhdGUocHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5yb3RhdGUpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB3b0FudGFyY3RpY2EgPSB7XG4gICAgICAgIHR5cGU6IGNvdW50cmllcy50eXBlLFxuICAgICAgICBmZWF0dXJlczogY291bnRyaWVzLmZlYXR1cmVzLmZpbHRlcihlID0+IGUucHJvcGVydGllcy5zbHVnICE9PSAnYW50YXJjdGljYScpLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgcGF0aFJlZiA9IGQzLmdlb1BhdGgocHJvamVjdGlvblJlZiwgY29udGV4dCk7XG4gICAgICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCBwcm9wcy5yZWZCb3gud2lkdGgsIHByb3BzLnJlZkJveC5oZWlnaHQpO1xuICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgIHBhdGhSZWYod29BbnRhcmN0aWNhKTtcbiAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gcHJvcHMubWFwX2ZpbGw7XG4gICAgICBjb250ZXh0LmZpbGwoKTtcblxuICAgICAgY29uc3QgYWN0aXZlV2lkdGggPSB3aWR0aCAvIHVzZVdpZHRoICogcHJvcHMucmVmQm94LndpZHRoO1xuXG4gICAgICBjb25zdCBhY3RpdmVSZWdpb24gPSByZWZCb3hDb250YWluZXIuYXBwZW5kU2VsZWN0KCdkaXYnKS5hdHRyKCdjbGFzcycsICdhY3RpdmUtcmVnaW9uJylcbiAgICAgICAgLnN0eWxlKCd3aWR0aCcsIGAke2FjdGl2ZVdpZHRofXB4YClcbiAgICAgICAgLnN0eWxlKCdoZWlnaHQnLCBgJHtwcm9wcy5yZWZCb3guaGVpZ2h0fXB4YClcbiAgICAgICAgLnN0eWxlKCdsZWZ0JywgYCR7cHJvcHMucmVmQm94LndpZHRoIC8gMiAtIGFjdGl2ZVdpZHRoIC8gMn1weGApXG4gICAgICAgIC5jYWxsKGQzLmRyYWcoKVxuICAgICAgICAgIC5vbignc3RhcnQuaW50ZXJydXB0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBhY3RpdmVSZWdpb24uaW50ZXJydXB0KCk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAub24oJ3N0YXJ0IGRyYWcnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGxldCBjYWxjWCA9IGQzLmV2ZW50LnggLSAoYWN0aXZlV2lkdGggLyAyKTtcbiAgICAgICAgICAgIGlmIChkMy5ldmVudC54IDw9IGFjdGl2ZVdpZHRoIC8gMikge1xuICAgICAgICAgICAgICBjYWxjWCA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGQzLmV2ZW50LnggPj0gKHByb3BzLnJlZkJveC53aWR0aCAtIGFjdGl2ZVdpZHRoLzIpKSB7XG4gICAgICAgICAgICAgIGNhbGNYID0gcHJvcHMucmVmQm94LndpZHRoIC0gYWN0aXZlV2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY3RpdmVSZWdpb24uc3R5bGUoJ2xlZnQnLCBjYWxjWCArICdweCcpO1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcC1jb250YWluZXInKS5zY3JvbGxMZWZ0ID0gY2FsY1gvcHJvcHMucmVmQm94LndpZHRoKnVzZVdpZHRoXG4gICAgICAgICAgfSkpO1xuXG4gICAgICBjb25zdCBtYXBFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXAtY29udGFpbmVyJylcbiAgICAgIG1hcEVsLnNjcm9sbExlZnQgPSB1c2VXaWR0aCAvIDIgLSB3aWR0aCAvIDJcbiAgICAgIG1hcEVsLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgY29uc3QgcG9zID0gKGQudGFyZ2V0LnNjcm9sbExlZnQpO1xuICAgICAgICBhY3RpdmVSZWdpb24uc3R5bGUoJ2xlZnQnLCBwb3MvdXNlV2lkdGgqcHJvcHMucmVmQm94LndpZHRoICsgJ3B4Jyk7XG4gICAgICB9KTtcbiAgICAgIC8vIFJlZmJveCBlbmRzIGhlcmVcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZWxlY3Rpb24oKS5zZWxlY3QoJy5yZWYtYm94JykuY2xhc3NlZCgnaGlkZScsIHRydWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRpcE9uKHZvcm9ub2lQYXRoKSB7XG4gICAgICBjb25zdCB7IHByb3BlcnRpZXMgfSA9IHZvcm9ub2lQYXRoLnByb3BlcnRpZXMuc2l0ZTtcbiAgICAgIGlmIChwcm9wZXJ0aWVzLnJlc2V0KSByZXR1cm47XG4gICAgICBjb25zdCB7IHZhbHVlIH0gPSBmaWx0ZXJlZERhdGEuZmluZChlID0+IHByb3BlcnRpZXMuaXNvQWxwaGEyID09PSBlLmtleSk7XG5cbiAgICAgIGlmICghdmFsdWUgJiYgdmFsdWUgIT09IGZpbHRlck1pbikgcmV0dXJuO1xuICAgICAgZy5zZWxlY3RBbGwoJ3BhdGguY2VudHJvaWQnKVxuICAgICAgICAuc3R5bGUoJ2ZpbGwnLCAnbm9uZScpXG4gICAgICAgIC5zdHlsZSgnb3BhY2l0eScsIHByb3BzLnNwaWtlX2luYWN0aXZlX29wYWNpdHkpO1xuXG4gICAgICBnLnNlbGVjdEFsbCgnLm5hbWUtYW5ub3RhdGlvbnMsLm51bWJlci1hbm5vdGF0aW9ucycpXG4gICAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDApO1xuXG4gICAgICBnLnNlbGVjdEFsbChgcGF0aC5jZW50cm9pZC4ke3Byb3BlcnRpZXMuc2x1Z31gKVxuICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCAxKVxuICAgICAgICAuc3R5bGUoJ2ZpbGwnLCAoZCkgPT4ge1xuICAgICAgICAgIHJldHVybiBkLnZhbHVlID8gcHJvcHMuc3Bpa2VfY29sb3Jfc2NhbGUoZC52YWx1ZSkgOiBudWxsO1xuICAgICAgICB9KVxuICAgICAgICAuY2xhc3NlZCgnYWN0aXZlJywgdHJ1ZSlcbiAgICAgICAgLnJhaXNlKCk7XG5cbiAgICAgIHRvb2x0aXBcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICBjb25zdCBvID0gcHJvamVjdGlvbihwcm9wZXJ0aWVzLmNlbnRyb2lkKTtcbiAgICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke29bMF19LCR7b1sxXSArIHByb3BzLmhvdmVyX2dhcH0pYDtcbiAgICAgICAgfSlcbiAgICAgICAgLnN0eWxlKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICAgICAgICAuaHRtbChkID0+IGBcbiAgICAgICAgICA8dHNwYW4geD1cIjBcIiB5PVwiMFwiPiR7cHJvcGVydGllcy50cmFuc2xhdGlvbnNbcHJvcHMubG9jYWxlXX08L3RzcGFuPlxuICAgICAgICAgICR7Z2V0UGVha1RleHQodmFsdWUpfWApO1xuXG4gICAgICBnLnNlbGVjdEFsbChgLmNvdW50cnkuYy0ke3Byb3BlcnRpZXMuc2x1Z31gKVxuICAgICAgICAuY2xhc3NlZCgnYWN0aXZlJywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGlwT2ZmKHZvcm9ub2lQYXRoKSB7XG5cbiAgICAgIGNvbnN0IHsgcHJvcGVydGllcyB9ID0gdm9yb25vaVBhdGgucHJvcGVydGllcy5zaXRlO1xuICAgICAgY29uc3QgY291bnRyeSA9IGcuc2VsZWN0QWxsKGAuY291bnRyeS5jLSR7cHJvcGVydGllcy5zbHVnfWApO1xuXG4gICAgICBnLnNlbGVjdEFsbCgncGF0aC5jZW50cm9pZCcpLnN0eWxlKCdvcGFjaXR5JywgMSlcbiAgICAgICAgLmNsYXNzZWQoJ2FjdGl2ZScsIGZhbHNlKVxuICAgICAgICAuc3R5bGUoJ2ZpbGwnLCAnbm9uZScpO1xuXG4gICAgICBnLnNlbGVjdEFsbCgnLm5hbWUtYW5ub3RhdGlvbnMsLm51bWJlci1hbm5vdGF0aW9ucycpXG4gICAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDEpO1xuXG4gICAgICB0b29sdGlwLmh0bWwoJycpO1xuXG4gICAgICBjb3VudHJ5LmNsYXNzZWQoJ2FjdGl2ZScsIGZhbHNlKVxuICAgICAgICAuc3R5bGUoJ3N0cm9rZScsIHByb3BzLm1hcF9zdHJva2VfY29sb3IpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBlYWtUZXh0KHZhbHVlKSB7XG4gICAgICB2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUgKiAxMDApO1xuICAgICAgbGV0IHRleHRWYXI7XG4gICAgICBpZiAodmFsdWUgPCAxMDAgJiYgdmFsdWUgPj0gMSkge1xuICAgICAgICB0ZXh0VmFyID0gTXVzdGFjaGUucmVuZGVyKHByb3BzLm9mX3BlYWtfdGV4dCwgeyBwZXJjZW50OiB2YWx1ZS50b0xvY2FsZVN0cmluZyhwcm9wcy5sb2NhbGUpKyclJyB9KVxuICAgICAgfSBlbHNlIGlmICh2YWx1ZSA8IDEpIHtcbiAgICAgICAgdGV4dFZhciA9IE11c3RhY2hlLnJlbmRlcihwcm9wcy5vZl9wZWFrX3RleHQsIHsgcGVyY2VudDogJzwxJScgfSlcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IDEwMCkge1xuICAgICAgICB0ZXh0VmFyID0gYDx0c3Bhbj4ke3Byb3BzLmF0X3BlYWtfdGV4dH08L3RzcGFuPmA7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGV4dFZhci5yZXBsYWNlKCc8dHNwYW4+JywgJzx0c3BhbiBkeT1cIjFlbVwiIHg9XCIwXCI+JylcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5mdW5jdGlvbiBtYWtlUmFuZ2VCb3gob3B0cykge1xuICB2YXIgbG9uMCA9IG9wdHNbMF1bMF07XG4gIHZhciBsb24xID0gb3B0c1sxXVswXTtcbiAgdmFyIGxhdDAgPSBvcHRzWzBdWzFdO1xuICB2YXIgbGF0MSA9IG9wdHNbMV1bMV07XG5cbiAgLy8gdG8gY3Jvc3MgYW50aW1lcmlkaWFuIHcvbyBhbWJpZ3VpdHlcbiAgaWYgKGxvbjAgPiAwICYmIGxvbjEgPCAwKSB7XG4gICAgbG9uMSArPSAzNjA7XG4gIH1cblxuICAvLyB0byBtYWtlIGxhdCBzcGFuIHVuYW1iaWd1b3VzXG4gIGlmIChsYXQwID4gbGF0MSkge1xuICAgIHZhciB0bXAgPSBsYXQwO1xuICAgIGxhdDAgPSBsYXQxO1xuICAgIGxhdDEgPSB0bXA7XG4gIH1cblxuICB2YXIgZGxvbjQgPSAobG9uMSAtIGxvbjApIC8gNDtcblxuICByZXR1cm4ge1xuICAgIHR5cGU6ICdQb2x5Z29uJyxcbiAgICBjb29yZGluYXRlczogW1tcbiAgICAgIFtsb24wLCBsYXQwXSxcbiAgICAgIFtsb24wLCBsYXQxXSxcbiAgICAgIFtsb24wICsgZGxvbjQsIGxhdDFdLFxuICAgICAgW2xvbjAgKyAyICogZGxvbjQsIGxhdDFdLFxuICAgICAgW2xvbjAgKyAzICogZGxvbjQsIGxhdDFdLFxuICAgICAgW2xvbjEsIGxhdDFdLFxuICAgICAgW2xvbjEsIGxhdDBdLFxuICAgICAgW2xvbjEgLSBkbG9uNCwgbGF0MF0sXG4gICAgICBbbG9uMSAtIDIgKiBkbG9uNCwgbGF0MF0sXG4gICAgICBbbG9uMSAtIDMgKiBkbG9uNCwgbGF0MF0sXG4gICAgICBbbG9uMCwgbGF0MF0sXG4gICAgXV0sXG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCBHbG9iYWxSYXRlTWFwO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/lib/chart.js\n");

/***/ })

})