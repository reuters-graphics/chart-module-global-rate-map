webpackHotUpdate("static/development/pages/index.js",{

/***/ "./src/lib/chart.js":
/*!**************************!*\
  !*** ./src/lib/chart.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ \"./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inherits */ \"./node_modules/@babel/runtime/helpers/esm/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var topojson_client__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! topojson-client */ \"./node_modules/topojson-client/index.js\");\n/* harmony import */ var _reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @reuters-graphics/graphics-atlas-client */ \"./node_modules/@reuters-graphics/graphics-atlas-client/dist/index.js\");\n/* harmony import */ var _reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _base_ChartComponent__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./base/ChartComponent */ \"./src/lib/base/ChartComponent.js\");\n/* harmony import */ var _utils_d3__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/d3 */ \"./src/lib/utils/d3.js\");\n/* harmony import */ var d3_geo_voronoi__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! d3-geo-voronoi */ \"./node_modules/d3-geo-voronoi/index.js\");\n/* harmony import */ var mustache__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! mustache */ \"./node_modules/mustache/mustache.js\");\n/* harmony import */ var mustache__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(mustache__WEBPACK_IMPORTED_MODULE_12__);\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\n\n\nvar Atlas = new _reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_8___default.a(); // import topology from '@reuters-graphics/graphics-atlas-client/topojson/global.110m.json';\n\nvar GlobalRateMap = /*#__PURE__*/function (_ChartComponent) {\n  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(GlobalRateMap, _ChartComponent);\n\n  var _super = _createSuper(GlobalRateMap);\n\n  function GlobalRateMap() {\n    var _this;\n\n    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, GlobalRateMap);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_this), \"defaultProps\", {\n      map_stroke_width: 1,\n      map_stroke_color: '#2f353f',\n      map_highlight_stroke_width: 1.2,\n      map_fill: 'rgba(153,153,153,0.25)',\n      map_stroke_color_active: 'rgba(255, 255, 255, 0.75)',\n      spike_color: '#eec331',\n      heightRatio: function heightRatio(width, breakpoint) {\n        return width < breakpoint ? 0.8 : 0.5;\n      },\n      locale: 'en',\n      map_custom_projections: {\n        clip_box: [[-130, 70], [194, -39]],\n        projection: 'geoNaturalEarth1',\n        center: null,\n        scale: null,\n        rotate: null\n      },\n      hover_gap: 12.5,\n      spike_height: 35,\n      spike_size: 3.5,\n      getDataRange: function getDataRange(width) {\n        return {\n          min: 0,\n          max: 1\n        };\n      },\n      spike_stroke_width: 0.5,\n      spike_highlight_stroke_width: 2,\n      spike_highlight_fill: true,\n      spike_color_scale: _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].scaleThreshold() // Can use a scale as a prop!\n      .domain([0.75, 0.9]).range(['#ccc', '#f68e26', '#de2d26']),\n      spike_stroke_width_scale: _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].scaleThreshold() // Can use a scale as a prop!\n      .domain([0.75, 0.9]).range([0.6, 0.9, 1.1]),\n      spike_inactive_opacity: 1,\n      disputed_dasharray: [5, 3],\n      key: {\n        text: {\n          main_text: 'How close is the current weekly average to the countryâ€™s peak',\n          red_peak: '>90%',\n          orange_peak: '90 to 75%',\n          white_peak: '<75%'\n        },\n        width: 140\n      },\n      annotations: {\n        name: [],\n        value: []\n      },\n      mobile: true,\n      refBox: {\n        height: 90,\n        width: 180,\n        breakpoint: 900,\n        useWidth: function useWidth(width, factor) {\n          return width * factor;\n        },\n        factor: 2.2\n      },\n      interaction: true,\n      at_peak_text: 'At peak',\n      of_peak_text: \"<tspan> {{ percent }}</tspan> <tspan class='smaller'>of peak</tspan>\"\n    });\n\n    return _this;\n  }\n\n  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(GlobalRateMap, [{\n    key: \"draw\",\n    value: function draw() {\n      var data = this.data();\n      var props = this.props();\n      var topo = this.topojson();\n      if (!topo) return this;\n      var node = this.selection().node();\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          width = _node$getBoundingClie.width;\n\n      var ratio = props.heightRatio(width, props.refBox.breakpoint);\n      var useWidth, height;\n\n      if (width < props.refBox.breakpoint && props.mobile) {\n        useWidth = props.refBox.useWidth(width, props.refBox.factor);\n        this.selection().classed('mobile', true);\n        height = useWidth * 0.5;\n      } else {\n        useWidth = width;\n        this.selection().classed('mobile', false);\n        height = width * ratio;\n      }\n\n      var _props$getDataRange = props.getDataRange(width),\n          filterMin = _props$getDataRange.min,\n          filterMax = _props$getDataRange.max;\n\n      var filteredData = data.filter(function (d) {\n        return d.value >= filterMin && d.value <= filterMax;\n      });\n      var scaleY = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].scaleLinear().range([0, props.spike_height]).domain([0, 1]);\n      var keyBox = this.selection().appendSelect('div.key');\n      keyBox.appendSelect('p.left-text.text-inline.key-text').html(props.key.text.main_text);\n      var keySvgContainer = keyBox.appendSelect('div.svg-container.text-inline');\n      var keyGap = props.key.width / 3; // add key box\n\n      var keySvg = keySvgContainer.appendSelect('svg.text-inline').attr('height', props.spike_height + 6).style('fill', 'none').attr('width', props.key.width - keyGap * 0.27);\n      keySvg.appendSelect('defs').appendSelect('marker.top').attr('id', 'arrow-up').attr('markerWidth', 12).attr('markerHeight', 10).attr('refY', 5).attr('refX', 6).attr('orient', 'auto').appendSelect('path.up').style('stroke', 'white').style('stroke-width', 0.6).attr('d', 'M0 0 L6 5 L0 10');\n      keySvg.select('defs').appendSelect('marker.down').attr('id', 'arrow-down').attr('markerWidth', 12).attr('markerHeight', 10).attr('refY', 5).attr('refX', 0).attr('orient', 'auto').appendSelect('path.down').style('stroke', 'white').style('stroke-width', 0.6).attr('d', 'M6 0 L0 5 L6 10'); // add spike 1\n\n      keySvg.appendSelect('path.red-spike.high').style('stroke', props.spike_color_scale(1)).attr('d', function (d) {\n        var obj = [keyGap * 0.7, props.spike_height];\n        var value = scaleY(1);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('path.red-spike.low').style('stroke', props.spike_color_scale(0.9)).style('fill', props.spike_color_scale(0.9)).attr('d', function (d) {\n        var obj = [keyGap * 0.7 + props.spike_size * 1.4, props.spike_height];\n        var value = scaleY(0.9);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('path.orange-spike.high').style('stroke', props.spike_color_scale(0.89)).attr('d', function (d, i) {\n        var obj = [keyGap * 1.5, props.spike_height];\n        var value = scaleY(0.89);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('path.orange-spike.low').style('stroke', props.spike_color_scale(0.75)).style('fill', props.spike_color_scale(0.75)).attr('d', function (d) {\n        var obj = [keyGap * 1.5 + props.spike_size * 1.4, props.spike_height];\n        var value = scaleY(0.75);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('path.white-spike.high').style('stroke', props.spike_color_scale(0.74)).attr('d', function (d, i) {\n        var obj = [keyGap * 2.3, props.spike_height];\n        var value = scaleY(0.74);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('path.white-spike.low').style('stroke', '#ccc').style('fill', '#ccc').attr('d', function (d, i) {\n        var obj = [keyGap * 2.3 + props.spike_size * 1.4, props.spike_height];\n        var value = scaleY(0);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('line').style('stroke', 'white').style('stroke-width', 0.7).attr('x1', 10).attr('x2', 10).attr('y1', 7).attr('y1', props.spike_height).attr('marker-end', 'url(#arrow-up)').attr('marker-start', 'url(#arrow-down)');\n      var bottomKeyText = keySvgContainer.appendSelect('div.bottom-text').style('padding-left', \"\".concat(keyGap * 0.4, \"px\"));\n      bottomKeyText.appendSelect('p.red-text.key-text.text-inline').style('width', \"\".concat(keyGap * 0.8, \"px\")).html(props.key.text.red_peak);\n      bottomKeyText.appendSelect('p.orange-text.key-text.text-inline').style('width', \"\".concat(keyGap * 0.8, \"px\")).html(props.key.text.orange_peak);\n      bottomKeyText.appendSelect('p.white-text.key-text.text-inline').style('width', \"\".concat(keyGap * 0.8, \"px\")).html(props.key.text.white_peak); // SVG begins here\n\n      var svg = this.selection().appendSelect('div.chart-container-div').attr('id', 'map-container').style('overflow-x', 'scroll').appendSelect('svg.chart') // see docs in ./utils/d3.js\n      .attr('width', useWidth).attr('height', height);\n      var g = svg.appendSelect('g');\n\n      if (!_utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"][props.map_custom_projections.projection]) {\n        props.map_custom_projections.projection = 'geoNaturalEarth1';\n      }\n\n      var projection = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"][props.map_custom_projections.projection]();\n      var countries = topojson_client__WEBPACK_IMPORTED_MODULE_7__[\"feature\"](topo, topo.objects.countries);\n      var disputed;\n\n      if (topo.objects.disputedBoundaries) {\n        disputed = topojson_client__WEBPACK_IMPORTED_MODULE_7__[\"mesh\"](topo, topo.objects.disputedBoundaries);\n      }\n\n      if (props.map_custom_projections.center && props.map_custom_projections.center.length === 2) {\n        projection.center(props.map_custom_projections.center);\n      }\n\n      if (props.map_custom_projections.rotate && props.map_custom_projections.rotate.length === 2) {\n        projection.rotate(props.map_custom_projections.rotate);\n      }\n\n      var filteredCountryKeys = filteredData.map(function (d) {\n        return d.key;\n      });\n      var countryCentroids = countries.features.filter(function (c) {\n        return filteredCountryKeys.includes(c.properties.isoAlpha2);\n      }).filter(function (c) {\n        return c.properties.centroid.length == 2 && c.properties.centroid[0] && c.properties.centroid[1];\n      }).map(function (_ref) {\n        var properties = _ref.properties;\n        return {\n          type: 'Feature',\n          properties: properties,\n          geometry: {\n            type: 'Point',\n            coordinates: properties.centroid\n          }\n        };\n      }); // Adding some points in the ocean to create voronoi spaces that will\n      // reset the map, so as your cursor traces land masses, you get highlights,\n      // but in the ocean you can see the whole world picture...\n\n      var resetPoints = [[-40.248108, 38.653788], // North Atlantic\n      [-29.800018, 14.536220], // Central Atlantic\n      [-15.485548, -12.941648], // South Atlantic\n      [-174.808659, 35.856127], // North Pacific\n      [-117.324414, -11.130821], // South Pacific\n      [-173.039131, -44.920697], // Southwest pacific\n      [64.407024, 5.045815], // North Indian\n      [75.569128, -31.691939], // South Indian\n      [-5.783266, -83.608077] // Antarctica\n      ];\n      var voronoiCentroids = countryCentroids.concat(resetPoints.map(function (centroid) {\n        return {\n          type: 'Feature',\n          properties: {\n            reset: true\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: centroid\n          }\n        };\n      }));\n\n      if (props.map_custom_projections.clip_box && props.map_custom_projections.clip_box.length === 2 && props.map_custom_projections.clip_box[0].length === 2 && props.map_custom_projections.clip_box[1].length === 2) {\n        projection.fitSize([useWidth, height], makeRangeBox(props.map_custom_projections.clip_box));\n      } else {\n        projection.fitSize([useWidth, height], countries);\n      }\n\n      if (props.map_custom_projections.scale) {\n        projection.scale(props.map_custom_projections.scale);\n      }\n\n      var path = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].geoPath().projection(projection);\n      svg.selectAll('.country,.disputed,.centroid').remove();\n      var countryGroups = g.appendSelect('g.countries').style('pointer-events', 'none').style('fill', props.map_fill).selectAll('path.country').data(countries.features.filter(function (d) {\n        return d.properties.slug !== 'antarctica';\n      }), function (d) {\n        return d.properties.slug;\n      });\n      countryGroups.enter().append('path').attr('class', function (d) {\n        return \"country c-\".concat(d.properties.slug, \" level-0\");\n      }).merge(countryGroups).style('stroke', props.map_stroke_color).style('stroke-width', props.map_stroke_width).attr('d', path);\n\n      if (disputed) {\n        g.appendSelect('path.disputed').attr('class', 'disputed level-0').style('pointer-events', 'none').style('stroke', props.map_stroke_color).style('stroke-width', props.map_stroke_width).style('fill', 'none').style('stroke-dasharray', props.disputed_dasharray).attr('d', path(disputed));\n      }\n\n      var sortedCentroids = countryCentroids.sort(function (a, b) {\n        var aO = filteredData.filter(function (e) {\n          return a.properties.isoAlpha2 === e.key;\n        })[0];\n        var bO = filteredData.filter(function (e) {\n          return b.properties.isoAlpha2 === e.key;\n        })[0];\n        return aO.value - bO.value;\n      });\n      sortedCentroids.forEach(function (d) {\n        var o = filteredData.filter(function (e) {\n          return d.properties.isoAlpha2 === e.key;\n        })[0];\n\n        if (o) {\n          d.value = o.value;\n        }\n      });\n      var spikeCentroids = g.appendSelect('g.spike-layer').style('pointer-events', 'none').selectAll('path.centroid').data(sortedCentroids);\n      spikeCentroids.enter().append('path').attr('class', function (d) {\n        return d.properties.slug + ' centroid';\n      }).merge(spikeCentroids).attr('d', function (d) {\n        var obj = projection(d.properties.centroid);\n        var value = scaleY(d.value);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      }).style('fill', 'none').style('stroke', function (d) {\n        return d.value ? props.spike_color_scale(d.value) : '#ccc';\n      }).style('stroke-width', function (d) {\n        return d.value ? props.spike_stroke_width_scale(d.value) : 0.5;\n      });\n      var countryVoronoiCentroids = g.appendSelect('g.voronoi').style('fill', 'none').style('cursor', props.interaction ? 'crosshair' : 'default').style('pointer-events', 'all').selectAll('path.voronoi').data(Object(d3_geo_voronoi__WEBPACK_IMPORTED_MODULE_11__[\"geoVoronoi\"])().polygons(voronoiCentroids).features);\n      countryVoronoiCentroids.enter().append('path').attr('class', function (d) {\n        return 'voronoi';\n      }).merge(countryVoronoiCentroids).attr('d', path).on('mouseover', function (d) {\n        if (props.interaction) {\n          tipOn(d);\n        }\n      }).on('mouseout', function (d) {\n        if (props.interaction) {// tipOff(d);\n        }\n      });\n      countryVoronoiCentroids.exit().remove();\n      var tooltip = g.appendSelect('g.text-group').style('pointer-events', 'none').append('text');\n      var annotationData = props.annotations.name.map(function (d) {\n        var c = Atlas.getCountry(d);\n        var geo = countryCentroids.filter(function (e) {\n          return e.properties.isoAlpha2 === c.isoAlpha2;\n        })[0];\n        return {\n          countryMeta: c,\n          countryGeo: geo\n        };\n      });\n      var annotationNumData = props.annotations.value.map(function (d) {\n        var c = Atlas.getCountry(d);\n        var geo = sortedCentroids.filter(function (e) {\n          return e.properties.isoAlpha2 === c.isoAlpha2;\n        })[0];\n        return {\n          countryMeta: c,\n          countryGeo: geo\n        };\n      });\n      annotationData = annotationData.filter(function (d) {\n        return d.countryMeta && d.countryGeo;\n      });\n      annotationNumData = annotationNumData.filter(function (d) {\n        return d.countryMeta && d.countryGeo;\n      });\n      var annotations = g.appendSelect('g.name-annotations').style('pointer-events', 'none').selectAll('text.annotation').data(annotationData, function (d) {\n        return d.countryMeta.isoAlpha2;\n      });\n      annotations.enter().append('text').attr('class', 'annotation').merge(annotations).attr('transform', function (d) {\n        var p = projection(d.countryGeo.geometry.coordinates);\n        return \"translate(\".concat(p[0], \",\").concat(p[1] + props.hover_gap, \")\");\n      }).html(function (d) {\n        return \"<tspan x=\\\"0\\\" y=\\\"0\\\">\".concat(d.countryMeta.translations[props.locale], \"</tspan>\");\n      });\n      annotations.exit().remove();\n      var annotationsNumbers = g.appendSelect('g.number-annotations').style('pointer-events', 'none').selectAll('text.annotation').data(annotationNumData);\n      annotationsNumbers.enter().append('text').attr('class', 'annotation').merge(annotationsNumbers).attr('transform', function (d) {\n        var p = projection(d.countryGeo.geometry.coordinates);\n        return \"translate(\".concat(p[0], \",\").concat(p[1] + props.hover_gap, \")\");\n      }).html(function (d) {\n        return getPeakText(d.countryGeo.value);\n      });\n      annotationsNumbers.exit().remove();\n\n      if (props.mobile && width < props.refBox.breakpoint) {\n        // Ref box at the bottom for mobile starts here\n        var refBoxContainer = this.selection().appendSelect('div.ref-box').classed('hide', false).style('text-align', 'center').style('width', \"\".concat(props.refBox.width, \"px\")).style('height', \"\".concat(props.refBox.height, \"px\"));\n        var refBox = refBoxContainer.appendSelect('canvas').attr('width', props.refBox.width).attr('height', props.refBox.height);\n        var context = refBox.node().getContext('2d');\n        var projectionRef = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].geoNaturalEarth1();\n\n        if (props.map_custom_projections.clip_box && props.map_custom_projections.clip_box.length === 2 && props.map_custom_projections.clip_box[0].length === 2 && props.map_custom_projections.clip_box[1].length === 2) {\n          projectionRef.fitSize([props.refBox.width, props.refBox.height], makeRangeBox(props.map_custom_projections.clip_box));\n        } else {\n          projectionRef.fitSize([props.refBox.width, props.refBox.height], countries);\n        }\n\n        if (props.map_custom_projections.scale) {\n          projectionRef.scale(props.map_custom_projections.scale);\n        }\n\n        if (props.map_custom_projections.center && props.map_custom_projections.center.length === 2) {\n          projectionRef.center(props.map_custom_projections.center);\n        }\n\n        if (props.map_custom_projections.rotate && props.map_custom_projections.rotate.length === 2) {\n          projectionRef.rotate(props.map_custom_projections.rotate);\n        }\n\n        var woAntarctica = {\n          type: countries.type,\n          features: countries.features.filter(function (e) {\n            return e.properties.slug !== 'antarctica';\n          })\n        };\n        var pathRef = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].geoPath(projectionRef, context);\n        context.clearRect(0, 0, props.refBox.width, props.refBox.height);\n        context.beginPath();\n        pathRef(woAntarctica);\n        context.fillStyle = props.map_fill;\n        context.fill();\n        var activeWidth = width / useWidth * props.refBox.width;\n        var activeRegion = refBoxContainer.appendSelect('div').attr('class', 'active-region').style('width', \"\".concat(activeWidth, \"px\")).style('height', \"\".concat(props.refBox.height, \"px\")).style('left', \"\".concat(props.refBox.width / 2 - activeWidth / 2, \"px\")).call(_utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].drag().on('start.interrupt', function () {\n          activeRegion.interrupt();\n        }).on('start drag', function () {\n          var calcX = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].event.x - activeWidth / 2;\n\n          if (_utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].event.x <= activeWidth / 2) {\n            calcX = 0;\n          } else if (_utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].event.x >= props.refBox.width - activeWidth / 2) {\n            calcX = props.refBox.width - activeWidth;\n          }\n\n          activeRegion.style('left', calcX + 'px');\n          document.getElementById('map-container').scrollLeft = calcX / props.refBox.width * useWidth;\n        }));\n        var mapEl = document.getElementById('map-container');\n        mapEl.scrollLeft = useWidth / 2 - width / 2;\n        mapEl.addEventListener('scroll', function (d) {\n          var pos = d.target.scrollLeft;\n          activeRegion.style('left', pos / useWidth * props.refBox.width + 'px');\n        }); // Refbox ends here\n      } else {\n        this.selection().select('.ref-box').classed('hide', true);\n      }\n\n      function tipOn(voronoiPath) {\n        var properties = voronoiPath.properties.site.properties;\n        if (properties.reset) return;\n\n        var _filteredData$find = filteredData.find(function (e) {\n          return properties.isoAlpha2 === e.key;\n        }),\n            value = _filteredData$find.value;\n\n        if (!value && value !== filterMin) return;\n        g.selectAll('path.centroid').style('fill', 'none').style('opacity', props.spike_inactive_opacity);\n        g.selectAll('.name-annotations,.number-annotations').style('opacity', 0);\n        g.selectAll(\"path.centroid.\".concat(properties.slug)).style('opacity', 1).style('fill', function (d) {\n          return d.value ? props.spike_color_scale(d.value) : null;\n        }).classed('active', true).raise();\n        tooltip.attr('transform', function (d) {\n          var o = projection(properties.centroid);\n          return \"translate(\".concat(o[0], \",\").concat(o[1] + props.hover_gap, \")\");\n        }).style('text-anchor', 'middle').html(function (d) {\n          return \"\\n          <tspan x=\\\"0\\\" y=\\\"0\\\">\".concat(properties.translations[props.locale], \"</tspan>\\n          \").concat(getPeakText(value));\n        });\n        g.selectAll(\".country.c-\".concat(properties.slug)).classed('active', true);\n      }\n\n      function tipOff(voronoiPath) {\n        var properties = voronoiPath.properties.site.properties;\n        var country = g.selectAll(\".country.c-\".concat(properties.slug));\n        g.selectAll('path.centroid').style('opacity', 1).classed('active', false).style('fill', 'none');\n        g.selectAll('.name-annotations,.number-annotations').style('opacity', 1);\n        tooltip.html('');\n        country.classed('active', false).style('stroke', props.map_stroke_color);\n      }\n\n      function getPeakText(value) {\n        value = Math.round(value * 100);\n        var textVar;\n\n        if (value < 100 && value >= 1) {\n          textVar = mustache__WEBPACK_IMPORTED_MODULE_12___default.a.render(props.of_peak_text, {\n            percent: value.toLocaleString(props.locale) + '%'\n          });\n        } else if (value < 1) {\n          textVar = mustache__WEBPACK_IMPORTED_MODULE_12___default.a.render(props.of_peak_text, {\n            percent: '<1%'\n          });\n        } else if (value === 100) {\n          textVar = \"<tspan>\".concat(props.at_peak_text, \"</tspan>\");\n        }\n\n        return textVar.replace('<tspan>', '<tspan dy=\"1em\" x=\"0\">');\n      }\n\n      return this;\n    }\n  }]);\n\n  return GlobalRateMap;\n}(_base_ChartComponent__WEBPACK_IMPORTED_MODULE_9__[\"default\"]);\n\nfunction makeRangeBox(opts) {\n  var lon0 = opts[0][0];\n  var lon1 = opts[1][0];\n  var lat0 = opts[0][1];\n  var lat1 = opts[1][1]; // to cross antimeridian w/o ambiguity\n\n  if (lon0 > 0 && lon1 < 0) {\n    lon1 += 360;\n  } // to make lat span unambiguous\n\n\n  if (lat0 > lat1) {\n    var tmp = lat0;\n    lat0 = lat1;\n    lat1 = tmp;\n  }\n\n  var dlon4 = (lon1 - lon0) / 4;\n  return {\n    type: 'Polygon',\n    coordinates: [[[lon0, lat0], [lon0, lat1], [lon0 + dlon4, lat1], [lon0 + 2 * dlon4, lat1], [lon0 + 3 * dlon4, lat1], [lon1, lat1], [lon1, lat0], [lon1 - dlon4, lat0], [lon1 - 2 * dlon4, lat0], [lon1 - 3 * dlon4, lat0], [lon0, lat0]]]\n  };\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (GlobalRateMap);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/chart.js\n");

/***/ })

})