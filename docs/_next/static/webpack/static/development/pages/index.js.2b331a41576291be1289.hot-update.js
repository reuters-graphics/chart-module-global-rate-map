webpackHotUpdate("static/development/pages/index.js",{

/***/ "./src/lib/chart.js":
/*!**************************!*\
  !*** ./src/lib/chart.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ \"./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inherits */ \"./node_modules/@babel/runtime/helpers/esm/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var topojson_client__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! topojson-client */ \"./node_modules/topojson-client/index.js\");\n/* harmony import */ var _reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @reuters-graphics/graphics-atlas-client */ \"./node_modules/@reuters-graphics/graphics-atlas-client/dist/index.js\");\n/* harmony import */ var _reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _base_ChartComponent__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./base/ChartComponent */ \"./src/lib/base/ChartComponent.js\");\n/* harmony import */ var _utils_d3__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/d3 */ \"./src/lib/utils/d3.js\");\n/* harmony import */ var d3_geo_voronoi__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! d3-geo-voronoi */ \"./node_modules/d3-geo-voronoi/index.js\");\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\n\nvar Atlas = new _reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_8___default.a(); // import topology from '@reuters-graphics/graphics-atlas-client/topojson/global.110m.json';\n\nvar GlobalRateMap = /*#__PURE__*/function (_ChartComponent) {\n  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(GlobalRateMap, _ChartComponent);\n\n  var _super = _createSuper(GlobalRateMap);\n\n  function GlobalRateMap() {\n    var _this;\n\n    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, GlobalRateMap);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_this), \"defaultProps\", {\n      map_stroke_width: 1,\n      map_stroke_color: '#2f353f',\n      map_highlight_stroke_width: 1.2,\n      map_fill: 'rgba(153,153,153,0.25)',\n      map_stroke_color_active: 'rgba(255, 255, 255, 0.75)',\n      spike_color: '#eec331',\n      heightRatio: function heightRatio(width, breakpoint) {\n        return width < breakpoint ? 0.8 : 0.5;\n      },\n      geo: false,\n      locale: 'en',\n      map_custom_projections: {\n        clip_box: [[-130, 70], [194, -39]],\n        projection: 'geoNaturalEarth1',\n        center: null,\n        scale: null,\n        rotate: null\n      },\n      hover_gap: 12.5,\n      spike_height: 35,\n      spike_size: 3.5,\n      getDataRange: function getDataRange(width) {\n        return {\n          min: 0,\n          max: 1\n        };\n      },\n      spike_stroke_width: 0.5,\n      spike_highlight_stroke_width: 2,\n      spike_highlight_fill: true,\n      spike_color_scale: _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].scaleThreshold() // Can use a scale as a prop!\n      .domain([0.75, 0.9]).range(['#ccc', '#f68e26', '#de2d26']),\n      spike_stroke_width_scale: _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].scaleThreshold() // Can use a scale as a prop!\n      .domain([0.75, 0.9]).range([0.6, 0.9, 1.1]),\n      spike_inactive_opacity: 1,\n      disputed_dasharray: [5, 3],\n      key: {\n        text: {\n          main_text: 'How close is the current weekly average to the countryâ€™s peak',\n          red_peak: '>90%',\n          orange_peak: '90 to 75%',\n          white_peak: '<75%'\n        },\n        width: 140\n      },\n      annotations: {\n        name: [],\n        value: []\n      },\n      mobile: true,\n      refBox: {\n        height: 90,\n        width: 180,\n        breakpoint: 900,\n        useWidth: function useWidth(width) {\n          return width * 2;\n        }\n      },\n      interaction: true,\n      at_peak_text: 'At peak',\n      of_peak_text: 'of peak'\n    });\n\n    return _this;\n  }\n\n  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(GlobalRateMap, [{\n    key: \"draw\",\n    value: function draw() {\n      var data = this.data();\n      var props = this.props();\n      var node = this.selection().node();\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          width = _node$getBoundingClie.width;\n\n      var ratio = props.heightRatio(width, props.refBox.breakpoint);\n      var useWidth, height;\n\n      if (width < props.refBox.breakpoint) {\n        useWidth = props.refBox.useWidth(width);\n        this.selection().classed('mobile', true);\n        height = useWidth * 0.5;\n      } else {\n        useWidth = width;\n        this.selection().classed('mobile', false);\n        height = width * ratio;\n      }\n\n      var _props$getDataRange = props.getDataRange(width),\n          filterMin = _props$getDataRange.min,\n          filterMax = _props$getDataRange.max;\n\n      var filteredData = data.filter(function (d) {\n        return d.value >= filterMin && d.value <= filterMax;\n      });\n      var scaleY = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].scaleLinear().range([0, props.spike_height]).domain([0, 1]);\n      var keyBox = this.selection().appendSelect('div.key');\n      keyBox.appendSelect('p.left-text.text-inline.key-text').html(props.key.text.main_text);\n      var keySvgContainer = keyBox.appendSelect('div.svg-container.text-inline');\n      var keyGap = props.key.width / 3; // add key box\n\n      var keySvg = keySvgContainer.appendSelect('svg.text-inline').attr('height', props.spike_height + 6).style('fill', 'none').attr('width', props.key.width - keyGap * 0.27);\n      keySvg.appendSelect('defs').appendSelect('marker.top').attr('id', 'arrow-up').attr('markerWidth', 12).attr('markerHeight', 10).attr('refY', 5).attr('refX', 6).attr('orient', 'auto').appendSelect('path.up').style('stroke', 'white').style('stroke-width', 0.6).attr('d', 'M0 0 L6 5 L0 10');\n      keySvg.select('defs').appendSelect('marker.down').attr('id', 'arrow-down').attr('markerWidth', 12).attr('markerHeight', 10).attr('refY', 5).attr('refX', 0).attr('orient', 'auto').appendSelect('path.down').style('stroke', 'white').style('stroke-width', 0.6).attr('d', 'M6 0 L0 5 L6 10'); // add spike 1\n\n      keySvg.appendSelect('path.red-spike.high').style('stroke', props.spike_color_scale(1)).attr('d', function (d) {\n        var obj = [keyGap * 0.7, props.spike_height];\n        var value = scaleY(1);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('path.red-spike.low').style('stroke', props.spike_color_scale(0.9)).style('fill', props.spike_color_scale(0.9)).attr('d', function (d) {\n        var obj = [keyGap * 0.7 + props.spike_size * 1.4, props.spike_height];\n        var value = scaleY(0.9);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('path.orange-spike.high').style('stroke', props.spike_color_scale(0.89)).attr('d', function (d, i) {\n        var obj = [keyGap * 1.5, props.spike_height];\n        var value = scaleY(0.89);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('path.orange-spike.low').style('stroke', props.spike_color_scale(0.75)).style('fill', props.spike_color_scale(0.75)).attr('d', function (d) {\n        var obj = [keyGap * 1.5 + props.spike_size * 1.4, props.spike_height];\n        var value = scaleY(0.75);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('path.white-spike.high').style('stroke', props.spike_color_scale(0.74)).attr('d', function (d, i) {\n        var obj = [keyGap * 2.3, props.spike_height];\n        var value = scaleY(0.74);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('path.white-spike.low').style('stroke', '#ccc').style('fill', '#ccc').attr('d', function (d, i) {\n        var obj = [keyGap * 2.3 + props.spike_size * 1.4, props.spike_height];\n        var value = scaleY(0);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('line').style('stroke', 'white').style('stroke-width', .7).attr('x1', 10).attr('x2', 10).attr('y1', 7).attr('y1', props.spike_height).attr('marker-end', 'url(#arrow-up)').attr('marker-start', 'url(#arrow-down)');\n      var bottomKeyText = keySvgContainer.appendSelect('div.bottom-text').style('padding-left', \"\".concat(keyGap * 0.4, \"px\"));\n      bottomKeyText.appendSelect('p.red-text.key-text.text-inline').style('width', \"\".concat(keyGap * 0.8, \"px\")).html(props.key.text.red_peak);\n      bottomKeyText.appendSelect('p.orange-text.key-text.text-inline').style('width', \"\".concat(keyGap * 0.8, \"px\")).html(props.key.text.orange_peak);\n      bottomKeyText.appendSelect('p.white-text.key-text.text-inline').style('width', \"\".concat(keyGap * 0.8, \"px\")).html(props.key.text.white_peak); // SVG begins here\n\n      var svg = this.selection().appendSelect('div.chart-container-div').attr('id', 'map-container').style('overflow-x', 'scroll').appendSelect('svg.chart') // see docs in ./utils/d3.js\n      .attr('width', useWidth).attr('height', height);\n      var g = svg.appendSelect('g');\n\n      if (!_utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"][props.map_custom_projections.projection]) {\n        props.map_custom_projections.projection = 'geoNaturalEarth1';\n      }\n\n      var projection = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"][props.map_custom_projections.projection]();\n      var countries = topojson_client__WEBPACK_IMPORTED_MODULE_7__[\"feature\"](props.geo, props.geo.objects.countries);\n      var disputed;\n\n      if (props.geo.objects.disputedBoundaries) {\n        disputed = topojson_client__WEBPACK_IMPORTED_MODULE_7__[\"mesh\"](props.geo, props.geo.objects.disputedBoundaries);\n      }\n\n      if (props.map_custom_projections.center && props.map_custom_projections.center.length === 2) {\n        projection.center(props.map_custom_projections.center);\n      }\n\n      if (props.map_custom_projections.rotate && props.map_custom_projections.rotate.length === 2) {\n        projection.rotate(props.map_custom_projections.rotate);\n      }\n\n      var filteredCountryKeys = filteredData.map(function (d) {\n        return d.key;\n      });\n      var countryCentroids = countries.features.filter(function (c) {\n        return filteredCountryKeys.includes(c.properties.isoAlpha2);\n      }).filter(function (c) {\n        return c.properties.centroid.length == 2 && c.properties.centroid[0] && c.properties.centroid[1];\n      }).map(function (_ref) {\n        var properties = _ref.properties;\n        return {\n          type: 'Feature',\n          properties: properties,\n          geometry: {\n            type: 'Point',\n            coordinates: properties.centroid\n          }\n        };\n      }); // Adding some points in the ocean to create voronoi spaces that will\n      // reset the map, so as your cursor traces land masses, you get highlights,\n      // but in the ocean you can see the whole world picture...\n\n      var resetPoints = [[-40.248108, 38.653788], // North Atlantic\n      [-29.800018, 14.536220], // Central Atlantic\n      [-15.485548, -12.941648], // South Atlantic\n      [-174.808659, 35.856127], // North Pacific\n      [-117.324414, -11.130821], // South Pacific\n      [-173.039131, -44.920697], // Southwest pacific\n      [64.407024, 5.045815], // North Indian\n      [75.569128, -31.691939], // South Indian\n      [-5.783266, -83.608077] // Antarctica\n      ];\n      var voronoiCentroids = countryCentroids.concat(resetPoints.map(function (centroid) {\n        return {\n          type: 'Feature',\n          properties: {\n            reset: true\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: centroid\n          }\n        };\n      }));\n\n      if (props.map_custom_projections.clip_box && props.map_custom_projections.clip_box.length === 2 && props.map_custom_projections.clip_box[0].length === 2 && props.map_custom_projections.clip_box[1].length === 2) {\n        console.log('clipping! :)');\n        projection.fitSize([useWidth, height], makeRangeBox(props.map_custom_projections.clip_box));\n      } else {\n        console.log('cant clip :(');\n        projection.fitSize([useWidth, height], countries);\n      }\n\n      if (props.map_custom_projections.scale) {\n        projection.scale(props.map_custom_projections.scale);\n      }\n\n      var path = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].geoPath().projection(projection);\n      svg.selectAll('.country,.disputed,.centroid').remove();\n      var countryGroups = g.appendSelect('g.countries').style('pointer-events', 'none').style('fill', props.map_fill).selectAll('path.country').data(countries.features.filter(function (d) {\n        return d.properties.slug !== 'antarctica';\n      }), function (d) {\n        return d.properties.slug;\n      });\n      countryGroups.enter().append('path').attr('class', function (d) {\n        return \"country c-\".concat(d.properties.slug, \" level-0\");\n      }).merge(countryGroups).style('stroke', props.map_stroke_color).style('stroke-width', props.map_stroke_width).attr('d', path);\n      console.log(g.select('.countries').node().getBoundingClientRect());\n\n      if (disputed) {\n        g.appendSelect('path.disputed').attr('class', 'disputed level-0').style('pointer-events', 'none').style('stroke', props.map_stroke_color).style('stroke-width', props.map_stroke_width).style('fill', 'none').style('stroke-dasharray', props.disputed_dasharray).attr('d', path(disputed));\n      }\n\n      var sortedCentroids = countryCentroids.sort(function (a, b) {\n        var aO = filteredData.filter(function (e) {\n          return a.properties.isoAlpha2 === e.key;\n        })[0];\n        var bO = filteredData.filter(function (e) {\n          return b.properties.isoAlpha2 === e.key;\n        })[0];\n        return aO.value - bO.value;\n      });\n      sortedCentroids.forEach(function (d) {\n        var o = filteredData.filter(function (e) {\n          return d.properties.isoAlpha2 === e.key;\n        })[0];\n\n        if (o) {\n          d.value = o.value;\n        }\n      });\n      var spikeCentroids = g.appendSelect('g.spike-layer').style('pointer-events', 'none').selectAll('path.centroid').data(sortedCentroids);\n      spikeCentroids.enter().append('path').attr('class', function (d) {\n        return d.properties.slug + ' centroid';\n      }).merge(spikeCentroids).attr('d', function (d) {\n        var obj = projection(d.properties.centroid);\n        var value = scaleY(d.value);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      }).style('fill', 'none').style('stroke', function (d) {\n        return d.value ? props.spike_color_scale(d.value) : '#ccc';\n      }).style('stroke-width', function (d) {\n        return d.value ? props.spike_stroke_width_scale(d.value) : 0.5;\n      });\n      var countryVoronoiCentroids = g.appendSelect('g.voronoi').style('fill', 'none').style('cursor', props.interaction ? 'crosshair' : 'default').style('pointer-events', 'all').selectAll('path.voronoi').data(Object(d3_geo_voronoi__WEBPACK_IMPORTED_MODULE_11__[\"geoVoronoi\"])().polygons(voronoiCentroids).features);\n      countryVoronoiCentroids.enter().append('path').attr('class', function (d) {\n        return 'voronoi';\n      }).merge(countryVoronoiCentroids).attr('d', path).on('mouseover', function (d) {\n        if (props.interaction) {\n          tipOn(d);\n        }\n      }).on('mouseout', function (d) {\n        if (props.interaction) {\n          tipOff(d);\n        }\n      });\n      countryVoronoiCentroids.exit().remove();\n      var tooltip = g.appendSelect('g.text-group').style('pointer-events', 'none').append('text');\n      var annotationData = props.annotations.name.map(function (d) {\n        var c = Atlas.getCountry(d);\n        var geo = countryCentroids.filter(function (e) {\n          return e.properties.isoAlpha2 === c.isoAlpha2;\n        })[0];\n        return {\n          countryMeta: c,\n          countryGeo: geo\n        };\n      });\n      var annotationNumData = props.annotations.value.map(function (d) {\n        var c = Atlas.getCountry(d);\n        var geo = sortedCentroids.filter(function (e) {\n          return e.properties.isoAlpha2 === c.isoAlpha2;\n        })[0];\n        return {\n          countryMeta: c,\n          countryGeo: geo\n        };\n      });\n      annotationData = annotationData.filter(function (d) {\n        return d.countryMeta && d.countryGeo;\n      });\n      annotationNumData = annotationNumData.filter(function (d) {\n        return d.countryMeta && d.countryGeo;\n      });\n      var annotations = g.appendSelect('g.name-annotations').style('pointer-events', 'none').selectAll('text.annotation').data(annotationData, function (d) {\n        return d.countryMeta.isoAlpha2;\n      });\n      annotations.enter().append('text').attr('class', 'annotation').merge(annotations).attr('transform', function (d) {\n        var p = projection(d.countryGeo.geometry.coordinates);\n        return \"translate(\".concat(p[0], \",\").concat(p[1] + props.hover_gap, \")\");\n      }).text(function (d) {\n        return d.countryMeta.translations[props.locale];\n      });\n      annotations.exit().remove();\n      var annotationsNumbers = g.appendSelect('g.number-annotations').style('pointer-events', 'none').selectAll('text.annotation').data(annotationNumData);\n      annotationsNumbers.enter().append('text').attr('class', 'annotation').merge(annotationsNumbers).attr('transform', function (d) {\n        var p = projection(d.countryGeo.geometry.coordinates);\n        return \"translate(\".concat(p[0], \",\").concat(p[1] + props.hover_gap, \")\");\n      }).html(function (d) {\n        return getPeakText(d.countryGeo.value);\n      });\n      annotationsNumbers.exit().remove();\n\n      if (props.mobile && width < props.refBox.breakpoint) {\n        // Ref box at the bottom for mobile starts here\n        var land = topojson_client__WEBPACK_IMPORTED_MODULE_7__[\"feature\"](props.geo, props.geo.objects.land);\n        var refBoxContainer = this.selection().appendSelect('div.ref-box').classed('hide', false).style('text-align', 'center').style('width', \"\".concat(props.refBox.width, \"px\")).style('height', \"\".concat(props.refBox.height, \"px\"));\n        var refBox = refBoxContainer.appendSelect('svg').style('border', \"\".concat(props.map_fill, \" solid 1px\")).attr('width', props.refBox.width).attr('height', props.refBox.height);\n        var projectionRef = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].geoNaturalEarth1().fitSize([props.refBox.width, props.refBox.height], makeRangeBox(props.map_custom_projections.clip_box));\n        var pathRef = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].geoPath().projection(projectionRef);\n        refBox.appendSelect('path').attr('d', pathRef(land)).attr('fill', props.map_fill);\n        var activeWidth = width / useWidth * props.refBox.width;\n        var activeRegion = refBoxContainer.appendSelect('div').attr('class', 'active-region').style('width', \"\".concat(activeWidth, \"px\")).style('height', \"\".concat(props.refBox.height, \"px\")).call(_utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].drag().on('start.interrupt', function () {\n          activeRegion.interrupt();\n          console.log('stop');\n        }).on('start drag', function () {\n          var calcX = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].event.x - activeWidth / 2;\n\n          if (_utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].event.x <= activeWidth / 2) {\n            calcX = 0;\n          } else if (_utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].event.x >= props.refBox.width - activeWidth / 2) {\n            calcX = activeWidth;\n          }\n\n          activeRegion.style('left', calcX + 'px');\n          document.getElementById('map-container').scrollLeft = calcX / props.refBox.width * useWidth;\n        })); // Refbox ends here\n      } else {\n        this.selection().select('.ref-box').classed('hide', true);\n      }\n\n      function tipOn(voronoiPath) {\n        var properties = voronoiPath.properties.site.properties;\n        if (properties.reset) return;\n\n        var _filteredData$find = filteredData.find(function (e) {\n          return properties.isoAlpha2 === e.key;\n        }),\n            value = _filteredData$find.value;\n\n        if (!value && value !== filterMin) return;\n        g.selectAll('path.centroid').style('fill', 'none').style('opacity', props.spike_inactive_opacity);\n        g.selectAll('.name-annotations,.number-annotations').style('opacity', 0);\n        g.selectAll(\"path.centroid.\".concat(properties.slug)).style('opacity', 1).style('fill', function (d) {\n          return d.value ? props.spike_color_scale(d.value) : null;\n        }).classed('active', true).raise();\n        tooltip.attr('transform', function (d) {\n          var o = projection(properties.centroid);\n          return \"translate(\".concat(o[0], \",\").concat(o[1] + props.hover_gap, \")\");\n        }).style('text-anchor', 'middle').html(function (d) {\n          return \"\\n          <tspan x=\\\"0\\\" y=\\\"0\\\">\".concat(properties.translations[props.locale], \"</tspan>\\n          \").concat(getPeakText(value));\n        });\n        g.selectAll(\".country.c-\".concat(properties.slug)).classed('active', true);\n      }\n\n      function tipOff(voronoiPath) {\n        var properties = voronoiPath.properties.site.properties;\n        var country = g.selectAll(\".country.c-\".concat(properties.slug));\n        g.selectAll('path.centroid').style('opacity', 1).classed('active', false).style('fill', 'none');\n        g.selectAll('.name-annotations,.number-annotations').style('opacity', 1);\n        tooltip.html('');\n        country.classed('active', false).style('stroke', props.map_stroke_color);\n      }\n\n      function getPeakText(value) {\n        value = Math.round(value * 100);\n\n        if (value < 100 && value >= 1) {\n          return \"<tspan dy=\\\"1em\\\" x=\\\"0\\\">\".concat(value.toLocaleString(props.locale), \"%</tspan> <tspan class=\\\"smaller\\\">\").concat(props.of_peak_text, \"</tspan>\");\n        } else if (value < 1) {\n          return \"<tspan dy=\\\"1em\\\" x=\\\"0\\\"><1%</tspan> <tspan class=\\\"smaller\\\">\".concat(props.of_peak_text, \"</tspan>\");\n        } else if (value === 100) {\n          return \"<tspan dy=\\\"1em\\\" x=\\\"0\\\">\".concat(props.at_peak_text, \"</tspan>\");\n        }\n      }\n\n      return this;\n    }\n  }]);\n\n  return GlobalRateMap;\n}(_base_ChartComponent__WEBPACK_IMPORTED_MODULE_9__[\"default\"]);\n\nfunction makeRangeBox(opts) {\n  var lon0 = opts[0][0];\n  var lon1 = opts[1][0];\n  var lat0 = opts[0][1];\n  var lat1 = opts[1][1]; // to cross antimeridian w/o ambiguity\n\n  if (lon0 > 0 && lon1 < 0) {\n    lon1 += 360;\n  } // to make lat span unambiguous\n\n\n  if (lat0 > lat1) {\n    var tmp = lat0;\n    lat0 = lat1;\n    lat1 = tmp;\n  }\n\n  var dlon4 = (lon1 - lon0) / 4;\n  return {\n    type: 'Polygon',\n    coordinates: [[[lon0, lat0], [lon0, lat1], [lon0 + dlon4, lat1], [lon0 + 2 * dlon4, lat1], [lon0 + 3 * dlon4, lat1], [lon1, lat1], [lon1, lat0], [lon1 - dlon4, lat0], [lon1 - 2 * dlon4, lat0], [lon1 - 3 * dlon4, lat0], [lon0, lat0]]]\n  };\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (GlobalRateMap);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NoYXJ0LmpzPzdiYjgiXSwibmFtZXMiOlsiQXRsYXMiLCJBdGxhc01ldGFkYXRhQ2xpZW50IiwiR2xvYmFsUmF0ZU1hcCIsIm1hcF9zdHJva2Vfd2lkdGgiLCJtYXBfc3Ryb2tlX2NvbG9yIiwibWFwX2hpZ2hsaWdodF9zdHJva2Vfd2lkdGgiLCJtYXBfZmlsbCIsIm1hcF9zdHJva2VfY29sb3JfYWN0aXZlIiwic3Bpa2VfY29sb3IiLCJoZWlnaHRSYXRpbyIsIndpZHRoIiwiYnJlYWtwb2ludCIsImdlbyIsImxvY2FsZSIsIm1hcF9jdXN0b21fcHJvamVjdGlvbnMiLCJjbGlwX2JveCIsInByb2plY3Rpb24iLCJjZW50ZXIiLCJzY2FsZSIsInJvdGF0ZSIsImhvdmVyX2dhcCIsInNwaWtlX2hlaWdodCIsInNwaWtlX3NpemUiLCJnZXREYXRhUmFuZ2UiLCJtaW4iLCJtYXgiLCJzcGlrZV9zdHJva2Vfd2lkdGgiLCJzcGlrZV9oaWdobGlnaHRfc3Ryb2tlX3dpZHRoIiwic3Bpa2VfaGlnaGxpZ2h0X2ZpbGwiLCJzcGlrZV9jb2xvcl9zY2FsZSIsImQzIiwic2NhbGVUaHJlc2hvbGQiLCJkb21haW4iLCJyYW5nZSIsInNwaWtlX3N0cm9rZV93aWR0aF9zY2FsZSIsInNwaWtlX2luYWN0aXZlX29wYWNpdHkiLCJkaXNwdXRlZF9kYXNoYXJyYXkiLCJrZXkiLCJ0ZXh0IiwibWFpbl90ZXh0IiwicmVkX3BlYWsiLCJvcmFuZ2VfcGVhayIsIndoaXRlX3BlYWsiLCJhbm5vdGF0aW9ucyIsIm5hbWUiLCJ2YWx1ZSIsIm1vYmlsZSIsInJlZkJveCIsImhlaWdodCIsInVzZVdpZHRoIiwiaW50ZXJhY3Rpb24iLCJhdF9wZWFrX3RleHQiLCJvZl9wZWFrX3RleHQiLCJkYXRhIiwicHJvcHMiLCJub2RlIiwic2VsZWN0aW9uIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmF0aW8iLCJjbGFzc2VkIiwiZmlsdGVyTWluIiwiZmlsdGVyTWF4IiwiZmlsdGVyZWREYXRhIiwiZmlsdGVyIiwiZCIsInNjYWxlWSIsInNjYWxlTGluZWFyIiwia2V5Qm94IiwiYXBwZW5kU2VsZWN0IiwiaHRtbCIsImtleVN2Z0NvbnRhaW5lciIsImtleUdhcCIsImtleVN2ZyIsImF0dHIiLCJzdHlsZSIsInNlbGVjdCIsIm9iaiIsImkiLCJib3R0b21LZXlUZXh0Iiwic3ZnIiwiZyIsImNvdW50cmllcyIsInRvcG9qc29uIiwib2JqZWN0cyIsImRpc3B1dGVkIiwiZGlzcHV0ZWRCb3VuZGFyaWVzIiwibGVuZ3RoIiwiZmlsdGVyZWRDb3VudHJ5S2V5cyIsIm1hcCIsImNvdW50cnlDZW50cm9pZHMiLCJmZWF0dXJlcyIsImMiLCJpbmNsdWRlcyIsInByb3BlcnRpZXMiLCJpc29BbHBoYTIiLCJjZW50cm9pZCIsInR5cGUiLCJnZW9tZXRyeSIsImNvb3JkaW5hdGVzIiwicmVzZXRQb2ludHMiLCJ2b3Jvbm9pQ2VudHJvaWRzIiwiY29uY2F0IiwicmVzZXQiLCJjb25zb2xlIiwibG9nIiwiZml0U2l6ZSIsIm1ha2VSYW5nZUJveCIsInBhdGgiLCJnZW9QYXRoIiwic2VsZWN0QWxsIiwicmVtb3ZlIiwiY291bnRyeUdyb3VwcyIsInNsdWciLCJlbnRlciIsImFwcGVuZCIsIm1lcmdlIiwic29ydGVkQ2VudHJvaWRzIiwic29ydCIsImEiLCJiIiwiYU8iLCJlIiwiYk8iLCJmb3JFYWNoIiwibyIsInNwaWtlQ2VudHJvaWRzIiwiY291bnRyeVZvcm9ub2lDZW50cm9pZHMiLCJnZW9Wb3Jvbm9pIiwicG9seWdvbnMiLCJvbiIsInRpcE9uIiwidGlwT2ZmIiwiZXhpdCIsInRvb2x0aXAiLCJhbm5vdGF0aW9uRGF0YSIsImdldENvdW50cnkiLCJjb3VudHJ5TWV0YSIsImNvdW50cnlHZW8iLCJhbm5vdGF0aW9uTnVtRGF0YSIsInAiLCJ0cmFuc2xhdGlvbnMiLCJhbm5vdGF0aW9uc051bWJlcnMiLCJnZXRQZWFrVGV4dCIsImxhbmQiLCJyZWZCb3hDb250YWluZXIiLCJwcm9qZWN0aW9uUmVmIiwiZ2VvTmF0dXJhbEVhcnRoMSIsInBhdGhSZWYiLCJhY3RpdmVXaWR0aCIsImFjdGl2ZVJlZ2lvbiIsImNhbGwiLCJkcmFnIiwiaW50ZXJydXB0IiwiY2FsY1giLCJldmVudCIsIngiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwic2Nyb2xsTGVmdCIsInZvcm9ub2lQYXRoIiwic2l0ZSIsImZpbmQiLCJyYWlzZSIsImNvdW50cnkiLCJNYXRoIiwicm91bmQiLCJ0b0xvY2FsZVN0cmluZyIsIkNoYXJ0Q29tcG9uZW50Iiwib3B0cyIsImxvbjAiLCJsb24xIiwibGF0MCIsImxhdDEiLCJ0bXAiLCJkbG9uNCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsSUFBTUEsS0FBSyxHQUFHLElBQUlDLDhFQUFKLEVBQWQsQyxDQUNBOztJQUVNQyxhOzs7Ozs7Ozs7Ozs7Ozs7O3VOQUNXO0FBQ2JDLHNCQUFnQixFQUFFLENBREw7QUFFYkMsc0JBQWdCLEVBQUUsU0FGTDtBQUdiQyxnQ0FBMEIsRUFBRSxHQUhmO0FBSWJDLGNBQVEsRUFBRSx3QkFKRztBQUtiQyw2QkFBdUIsRUFBRSwyQkFMWjtBQU1iQyxpQkFBVyxFQUFFLFNBTkE7QUFPYkMsaUJBQVcsRUFBRSxxQkFBQ0MsS0FBRCxFQUFRQyxVQUFSO0FBQUEsZUFBd0JELEtBQUssR0FBQ0MsVUFBTixHQUFpQixHQUFqQixHQUFxQixHQUE3QztBQUFBLE9BUEE7QUFRYkMsU0FBRyxFQUFFLEtBUlE7QUFTYkMsWUFBTSxFQUFFLElBVEs7QUFVYkMsNEJBQXNCLEVBQUU7QUFDdEJDLGdCQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRixFQUFPLEVBQVAsQ0FBRCxFQUFhLENBQUMsR0FBRCxFQUFNLENBQUMsRUFBUCxDQUFiLENBRFk7QUFFdEJDLGtCQUFVLEVBQUUsa0JBRlU7QUFHdEJDLGNBQU0sRUFBRSxJQUhjO0FBSXRCQyxhQUFLLEVBQUUs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Q0FBQ0osSUFBSSxHQUFHRCxJQUFSLElBQWdCLENBQTVCO0FBRUEsU0FBTztBQUNMekUsUUFBSSxFQUFFLFNBREQ7QUFFTEUsZUFBVyxFQUFFLENBQUMsQ0FDWixDQUFDdUUsSUFBRCxFQUFPRSxJQUFQLENBRFksRUFFWixDQUFDRixJQUFELEVBQU9HLElBQVAsQ0FGWSxFQUdaLENBQUNILElBQUksR0FBR0ssS0FBUixFQUFlRixJQUFmLENBSFksRUFJWixDQUFDSCxJQUFJLEdBQUcsSUFBSUssS0FBWixFQUFtQkYsSUFBbkIsQ0FKWSxFQUtaLENBQUNILElBQUksR0FBRyxJQUFJSyxLQUFaLEVBQW1CRixJQUFuQixDQUxZLEVBTVosQ0FBQ0YsSUFBRCxFQUFPRSxJQUFQLENBTlksRUFPWixDQUFDRixJQUFELEVBQU9DLElBQVAsQ0FQWSxFQVFaLENBQUNELElBQUksR0FBR0ksS0FBUixFQUFlSCxJQUFmLENBUlksRUFTWixDQUFDRCxJQUFJLEdBQUcsSUFBSUksS0FBWixFQUFtQkgsSUFBbkIsQ0FUWSxFQVVaLENBQUNELElBQUksR0FBRyxJQUFJSSxLQUFaLEVBQW1CSCxJQUFuQixDQVZZLEVBV1osQ0FBQ0YsSUFBRCxFQUFPRSxJQUFQLENBWFksQ0FBRDtBQUZSLEdBQVA7QUFnQkQ7O0FBQ2N6Syw0RUFBZiIsImZpbGUiOiIuL3NyYy9saWIvY2hhcnQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB0b3BvanNvbiBmcm9tICd0b3BvanNvbi1jbGllbnQnO1xuXG5pbXBvcnQgQXRsYXNNZXRhZGF0YUNsaWVudCBmcm9tICdAcmV1dGVycy1ncmFwaGljcy9ncmFwaGljcy1hdGxhcy1jbGllbnQnO1xuaW1wb3J0IENoYXJ0Q29tcG9uZW50IGZyb20gJy4vYmFzZS9DaGFydENvbXBvbmVudCc7XG5pbXBvcnQgZDMgZnJvbSAnLi91dGlscy9kMyc7XG5pbXBvcnQgeyBnZW9Wb3Jvbm9pIH0gZnJvbSAnZDMtZ2VvLXZvcm9ub2knO1xuXG5jb25zdCBBdGxhcyA9IG5ldyBBdGxhc01ldGFkYXRhQ2xpZW50KCk7XG4vLyBpbXBvcnQgdG9wb2xvZ3kgZnJvbSAnQHJldXRlcnMtZ3JhcGhpY3MvZ3JhcGhpY3MtYXRsYXMtY2xpZW50L3RvcG9qc29uL2dsb2JhbC4xMTBtLmpzb24nO1xuXG5jbGFzcyBHbG9iYWxSYXRlTWFwIGV4dGVuZHMgQ2hhcnRDb21wb25lbnQge1xuICBkZWZhdWx0UHJvcHMgPSB7XG4gICAgbWFwX3N0cm9rZV93aWR0aDogMSxcbiAgICBtYXBfc3Ryb2tlX2NvbG9yOiAnIzJmMzUzZicsXG4gICAgbWFwX2hpZ2hsaWdodF9zdHJva2Vfd2lkdGg6IDEuMixcbiAgICBtYXBfZmlsbDogJ3JnYmEoMTUzLDE1MywxNTMsMC4yNSknLFxuICAgIG1hcF9zdHJva2VfY29sb3JfYWN0aXZlOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjc1KScsXG4gICAgc3Bpa2VfY29sb3I6ICcjZWVjMzMxJyxcbiAgICBoZWlnaHRSYXRpbzogKHdpZHRoLCBicmVha3BvaW50KSA9PiAod2lkdGg8YnJlYWtwb2ludD8wLjg6MC41KSxcbiAgICBnZW86IGZhbHNlLFxuICAgIGxvY2FsZTogJ2VuJyxcbiAgICBtYXBfY3VzdG9tX3Byb2plY3Rpb25zOiB7XG4gICAgICBjbGlwX2JveDogW1stMTMwLCA3MF0sIFsxOTQsIC0zOV1dLFxuICAgICAgcHJvamVjdGlvbjogJ2dlb05hdHVyYWxFYXJ0aDEnLFxuICAgICAgY2VudGVyOiBudWxsLFxuICAgICAgc2NhbGU6IG51bGwsXG4gICAgICByb3RhdGU6IG51bGwsXG4gICAgfSxcbiAgICBob3Zlcl9nYXA6IDEyLjUsXG4gICAgc3Bpa2VfaGVpZ2h0OiAzNSxcbiAgICBzcGlrZV9zaXplOiAzLjUsXG4gICAgZ2V0RGF0YVJhbmdlOiAod2lkdGgpID0+ICh7IG1pbjogMCwgbWF4OiAxIH0pLFxuICAgIHNwaWtlX3N0cm9rZV93aWR0aDogMC41LFxuICAgIHNwaWtlX2hpZ2hsaWdodF9zdHJva2Vfd2lkdGg6IDIsXG4gICAgc3Bpa2VfaGlnaGxpZ2h0X2ZpbGw6IHRydWUsXG4gICAgc3Bpa2VfY29sb3Jfc2NhbGU6IGQzLnNjYWxlVGhyZXNob2xkKCkgLy8gQ2FuIHVzZSBhIHNjYWxlIGFzIGEgcHJvcCFcbiAgICAgIC5kb21haW4oWzAuNzUsIDAuOV0pXG4gICAgICAucmFuZ2UoWycjY2NjJywgJyNmNjhlMjYnLCAnI2RlMmQyNiddKSxcbiAgICBzcGlrZV9zdHJva2Vfd2lkdGhfc2NhbGU6IGQzLnNjYWxlVGhyZXNob2xkKCkgLy8gQ2FuIHVzZSBhIHNjYWxlIGFzIGEgcHJvcCFcbiAgICAgIC5kb21haW4oWzAuNzUsIDAuOV0pXG4gICAgICAucmFuZ2UoWzAuNiwgMC45LCAxLjFdKSxcbiAgICBzcGlrZV9pbmFjdGl2ZV9vcGFjaXR5OiAxLFxuICAgIGRpc3B1dGVkX2Rhc2hhcnJheTogWzUsIDNdLFxuICAgIGtleToge1xuICAgICAgdGV4dDoge1xuICAgICAgICBtYWluX3RleHQ6ICdIb3cgY2xvc2UgaXMgdGhlIGN1cnJlbnQgd2Vla2x5IGF2ZXJhZ2UgdG8gdGhlIGNvdW50cnnigJlzIHBlYWsnLFxuICAgICAgICByZWRfcGVhazogJz45MCUnLFxuICAgICAgICBvcmFuZ2VfcGVhazogJzkwIHRvIDc1JScsXG4gICAgICAgIHdoaXRlX3BlYWs6ICc8NzUlJyxcbiAgICAgIH0sXG4gICAgICB3aWR0aDogMTQwLFxuICAgIH0sXG4gICAgYW5ub3RhdGlvbnM6IHtcbiAgICAgIG5hbWU6IFtdLFxuICAgICAgdmFsdWU6IFtdLFxuICAgIH0sXG4gICAgbW9iaWxlOiB0cnVlLFxuICAgIHJlZkJveDoge1xuICAgICAgaGVpZ2h0OiA5MCxcbiAgICAgIHdpZHRoOiAxODAsXG4gICAgICBicmVha3BvaW50OiA5MDAsXG4gICAgICB1c2VXaWR0aDogKHdpZHRoKSA9PiAod2lkdGggKiAyKVxuICAgIH0sXG4gICAgaW50ZXJhY3Rpb246IHRydWUsXG4gICAgYXRfcGVha190ZXh0OiAnQXQgcGVhaycsXG4gICAgb2ZfcGVha190ZXh0OiAnb2YgcGVhaycsXG4gIH07XG5cbiAgZHJhdygpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5kYXRhKCk7XG4gICAgY29uc3QgcHJvcHMgPSB0aGlzLnByb3BzKCk7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc2VsZWN0aW9uKCkubm9kZSgpO1xuICAgIGxldCB7IHdpZHRoIH0gPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IHJhdGlvID0gcHJvcHMuaGVpZ2h0UmF0aW8od2lkdGgsIHByb3BzLnJlZkJveC5icmVha3BvaW50KVxuICAgIGxldCB1c2VXaWR0aCwgaGVpZ2h0O1xuICAgIGlmICh3aWR0aCA8IHByb3BzLnJlZkJveC5icmVha3BvaW50KSB7XG4gICAgICB1c2VXaWR0aCA9IHByb3BzLnJlZkJveC51c2VXaWR0aCh3aWR0aCk7XG4gICAgICB0aGlzLnNlbGVjdGlvbigpLmNsYXNzZWQoJ21vYmlsZScsIHRydWUpO1xuICAgICAgaGVpZ2h0ID0gdXNlV2lkdGggKiAwLjU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVzZVdpZHRoID0gd2lkdGg7XG4gICAgICB0aGlzLnNlbGVjdGlvbigpLmNsYXNzZWQoJ21vYmlsZScsIGZhbHNlKTtcbiAgICAgIGhlaWdodCA9IHdpZHRoICogcmF0aW87XG4gICAgfVxuXG4gICAgY29uc3QgeyBtaW46IGZpbHRlck1pbiwgbWF4OiBmaWx0ZXJNYXggfSA9IHByb3BzLmdldERhdGFSYW5nZSh3aWR0aCk7XG4gICAgY29uc3QgZmlsdGVyZWREYXRhID0gZGF0YS5maWx0ZXIoZCA9PiBkLnZhbHVlID49IGZpbHRlck1pbiAmJiBkLnZhbHVlIDw9IGZpbHRlck1heCk7XG5cbiAgICBjb25zdCBzY2FsZVkgPSBkMy5zY2FsZUxpbmVhcigpLnJhbmdlKFswLCBwcm9wcy5zcGlrZV9oZWlnaHRdKS5kb21haW4oWzAsIDFdKTtcbiAgICBjb25zdCBrZXlCb3ggPSB0aGlzLnNlbGVjdGlvbigpXG4gICAgICAuYXBwZW5kU2VsZWN0KCdkaXYua2V5Jyk7XG5cbiAgICBrZXlCb3guYXBwZW5kU2VsZWN0KCdwLmxlZnQtdGV4dC50ZXh0LWlubGluZS5rZXktdGV4dCcpXG4gICAgICAuaHRtbChwcm9wcy5rZXkudGV4dC5tYWluX3RleHQpO1xuXG4gICAgY29uc3Qga2V5U3ZnQ29udGFpbmVyID0ga2V5Qm94LmFwcGVuZFNlbGVjdCgnZGl2LnN2Zy1jb250YWluZXIudGV4dC1pbmxpbmUnKVxuICAgIGNvbnN0IGtleUdhcCA9IHByb3BzLmtleS53aWR0aCAvIDM7XG4gICAgLy8gYWRkIGtleSBib3hcbiAgICBjb25zdCBrZXlTdmcgPSBrZXlTdmdDb250YWluZXIuYXBwZW5kU2VsZWN0KCdzdmcudGV4dC1pbmxpbmUnKVxuICAgICAgLmF0dHIoJ2hlaWdodCcsIHByb3BzLnNwaWtlX2hlaWdodCArIDYpXG4gICAgICAuc3R5bGUoJ2ZpbGwnLCAnbm9uZScpXG4gICAgICAuYXR0cignd2lkdGgnLCBwcm9wcy5rZXkud2lkdGggLSAoa2V5R2FwICogMC4yNykpO1xuXG4gICAga2V5U3ZnLmFwcGVuZFNlbGVjdCgnZGVmcycpXG4gICAgICAuYXBwZW5kU2VsZWN0KCdtYXJrZXIudG9wJylcbiAgICAgIC5hdHRyKCdpZCcsICdhcnJvdy11cCcpXG4gICAgICAuYXR0cignbWFya2VyV2lkdGgnLCAxMilcbiAgICAgIC5hdHRyKCdtYXJrZXJIZWlnaHQnLCAxMClcbiAgICAgIC5hdHRyKCdyZWZZJywgNSlcbiAgICAgIC5hdHRyKCdyZWZYJywgNilcbiAgICAgIC5hdHRyKCdvcmllbnQnLCAnYXV0bycpXG4gICAgICAuYXBwZW5kU2VsZWN0KCdwYXRoLnVwJylcbiAgICAgIC5zdHlsZSgnc3Ryb2tlJywgJ3doaXRlJylcbiAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgMC42KVxuICAgICAgLmF0dHIoJ2QnLCAnTTAgMCBMNiA1IEwwIDEwJyk7XG5cbiAgICBrZXlTdmcuc2VsZWN0KCdkZWZzJylcbiAgICAgIC5hcHBlbmRTZWxlY3QoJ21hcmtlci5kb3duJylcbiAgICAgIC5hdHRyKCdpZCcsICdhcnJvdy1kb3duJylcbiAgICAgIC5hdHRyKCdtYXJrZXJXaWR0aCcsIDEyKVxuICAgICAgLmF0dHIoJ21hcmtlckhlaWdodCcsIDEwKVxuICAgICAgLmF0dHIoJ3JlZlknLCA1KVxuICAgICAgLmF0dHIoJ3JlZlgnLCAwKVxuICAgICAgLmF0dHIoJ29yaWVudCcsICdhdXRvJylcbiAgICAgIC5hcHBlbmRTZWxlY3QoJ3BhdGguZG93bicpXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsICd3aGl0ZScpXG4gICAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsIDAuNilcbiAgICAgIC5hdHRyKCdkJywgJ002IDAgTDAgNSBMNiAxMCcpO1xuXG4gICAgLy8gYWRkIHNwaWtlIDFcbiAgICBrZXlTdmcuYXBwZW5kU2VsZWN0KCdwYXRoLnJlZC1zcGlrZS5oaWdoJylcbiAgICAgIC5zdHlsZSgnc3Ryb2tlJywgcHJvcHMuc3Bpa2VfY29sb3Jfc2NhbGUoMSkpXG4gICAgICAuYXR0cignZCcsIChkKSA9PiB7XG4gICAgICAgIGNvbnN0IG9iaiA9IFtrZXlHYXAgKiAwLjcsIHByb3BzLnNwaWtlX2hlaWdodF07XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc2NhbGVZKDEpO1xuICAgICAgICByZXR1cm4gJ00nICsgKG9ialswXSAtIHByb3BzLnNwaWtlX3NpemUpICsgJyAnICsgb2JqWzFdICsgJyBMJyArIG9ialswXSArICcgJyArIChvYmpbMV0gLSB2YWx1ZSkgKyAnIEwnICsgKG9ialswXSArIHByb3BzLnNwaWtlX3NpemUpICsgJyAnICsgb2JqWzFdICsgJyAnO1xuICAgICAgfSk7XG5cbiAgICBrZXlTdmcuYXBwZW5kU2VsZWN0KCdwYXRoLnJlZC1zcGlrZS5sb3cnKVxuICAgICAgLnN0eWxlKCdzdHJva2UnLCBwcm9wcy5zcGlrZV9jb2xvcl9zY2FsZSgwLjkpKVxuICAgICAgLnN0eWxlKCdmaWxsJyxwcm9wcy5zcGlrZV9jb2xvcl9zY2FsZSgwLjkpKVxuICAgICAgLmF0dHIoJ2QnLCAoZCkgPT4ge1xuICAgICAgICBjb25zdCBvYmogPSBba2V5R2FwICogMC43ICsgcHJvcHMuc3Bpa2Vfc2l6ZSoxLjQsIHByb3BzLnNwaWtlX2hlaWdodF07XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc2NhbGVZKDAuOSk7XG4gICAgICAgIHJldHVybiAnTScgKyAob2JqWzBdIC0gcHJvcHMuc3Bpa2Vfc2l6ZSkgKyAnICcgKyBvYmpbMV0gKyAnIEwnICsgb2JqWzBdICsgJyAnICsgKG9ialsxXSAtIHZhbHVlKSArICcgTCcgKyAob2JqWzBdICsgcHJvcHMuc3Bpa2Vfc2l6ZSkgKyAnICcgKyBvYmpbMV0gKyAnICc7XG4gICAgICB9KTtcblxuICAgIGtleVN2Zy5hcHBlbmRTZWxlY3QoJ3BhdGgub3JhbmdlLXNwaWtlLmhpZ2gnKVxuICAgICAgLnN0eWxlKCdzdHJva2UnLCBwcm9wcy5zcGlrZV9jb2xvcl9zY2FsZSgwLjg5KSlcbiAgICAgIC5hdHRyKCdkJywgKGQsIGkpID0+IHtcbiAgICAgICAgY29uc3Qgb2JqID0gW2tleUdhcCAqIDEuNSwgcHJvcHMuc3Bpa2VfaGVpZ2h0XTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBzY2FsZVkoMC44OSk7XG4gICAgICAgIHJldHVybiAnTScgKyAob2JqWzBdIC0gcHJvcHMuc3Bpa2Vfc2l6ZSkgKyAnICcgKyBvYmpbMV0gKyAnIEwnICsgb2JqWzBdICsgJyAnICsgKG9ialsxXSAtIHZhbHVlKSArICcgTCcgKyAob2JqWzBdICsgcHJvcHMuc3Bpa2Vfc2l6ZSkgKyAnICcgKyBvYmpbMV0gKyAnICc7XG4gICAgICB9KTtcblxuICAgIGtleVN2Zy5hcHBlbmRTZWxlY3QoJ3BhdGgub3JhbmdlLXNwaWtlLmxvdycpXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsIHByb3BzLnNwaWtlX2NvbG9yX3NjYWxlKDAuNzUpKVxuICAgICAgLnN0eWxlKCdmaWxsJyxwcm9wcy5zcGlrZV9jb2xvcl9zY2FsZSgwLjc1KSlcbiAgICAgIC5hdHRyKCdkJywgKGQpID0+IHtcbiAgICAgICAgY29uc3Qgb2JqID0gW2tleUdhcCAqIDEuNStwcm9wcy5zcGlrZV9zaXplKjEuNCwgcHJvcHMuc3Bpa2VfaGVpZ2h0XTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBzY2FsZVkoMC43NSk7XG4gICAgICAgIHJldHVybiAnTScgKyAob2JqWzBdIC0gcHJvcHMuc3Bpa2Vfc2l6ZSkgKyAnICcgKyBvYmpbMV0gKyAnIEwnICsgb2JqWzBdICsgJyAnICsgKG9ialsxXSAtIHZhbHVlKSArICcgTCcgKyAob2JqWzBdICsgcHJvcHMuc3Bpa2Vfc2l6ZSkgKyAnICcgKyBvYmpbMV0gKyAnICc7XG4gICAgICB9KTtcblxuICAgIGtleVN2Zy5hcHBlbmRTZWxlY3QoJ3BhdGgud2hpdGUtc3Bpa2UuaGlnaCcpXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsIHByb3BzLnNwaWtlX2NvbG9yX3NjYWxlKDAuNzQpKVxuICAgICAgLmF0dHIoJ2QnLCAoZCwgaSkgPT4ge1xuICAgICAgICBjb25zdCBvYmogPSBba2V5R2FwICogMi4zLCBwcm9wcy5zcGlrZV9oZWlnaHRdO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHNjYWxlWSgwLjc0KTtcbiAgICAgICAgcmV0dXJuICdNJyArIChvYmpbMF0gLSBwcm9wcy5zcGlrZV9zaXplKSArICcgJyArIG9ialsxXSArICcgTCcgKyBvYmpbMF0gKyAnICcgKyAob2JqWzFdIC0gdmFsdWUpICsgJyBMJyArIChvYmpbMF0gKyBwcm9wcy5zcGlrZV9zaXplKSArICcgJyArIG9ialsxXSArICcgJztcbiAgICAgIH0pO1xuXG4gICAga2V5U3ZnLmFwcGVuZFNlbGVjdCgncGF0aC53aGl0ZS1zcGlrZS5sb3cnKVxuICAgICAgLnN0eWxlKCdzdHJva2UnLCAnI2NjYycpXG4gICAgICAuc3R5bGUoJ2ZpbGwnLCAnI2NjYycpXG4gICAgICAuYXR0cignZCcsIChkLCBpKSA9PiB7XG4gICAgICAgIGNvbnN0IG9iaiA9IFtrZXlHYXAgKiAyLjMrcHJvcHMuc3Bpa2Vfc2l6ZSoxLjQsIHByb3BzLnNwaWtlX2hlaWdodF07XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc2NhbGVZKDApO1xuICAgICAgICByZXR1cm4gJ00nICsgKG9ialswXSAtIHByb3BzLnNwaWtlX3NpemUpICsgJyAnICsgb2JqWzFdICsgJyBMJyArIG9ialswXSArICcgJyArIChvYmpbMV0gLSB2YWx1ZSkgKyAnIEwnICsgKG9ialswXSArIHByb3BzLnNwaWtlX3NpemUpICsgJyAnICsgb2JqWzFdICsgJyAnO1xuICAgICAgfSk7XG5cbiAgICBrZXlTdmcuYXBwZW5kU2VsZWN0KCdsaW5lJylcbiAgICAgIC5zdHlsZSgnc3Ryb2tlJywgJ3doaXRlJylcbiAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgLjcpXG4gICAgICAuYXR0cigneDEnLCAxMClcbiAgICAgIC5hdHRyKCd4MicsIDEwKVxuICAgICAgLmF0dHIoJ3kxJywgNylcbiAgICAgIC5hdHRyKCd5MScsIHByb3BzLnNwaWtlX2hlaWdodClcbiAgICAgIC5hdHRyKCdtYXJrZXItZW5kJywgJ3VybCgjYXJyb3ctdXApJylcbiAgICAgIC5hdHRyKCdtYXJrZXItc3RhcnQnLCAndXJsKCNhcnJvdy1kb3duKScpO1xuXG4gICAgY29uc3QgYm90dG9tS2V5VGV4dCA9IGtleVN2Z0NvbnRhaW5lci5hcHBlbmRTZWxlY3QoJ2Rpdi5ib3R0b20tdGV4dCcpXG4gICAgICAuc3R5bGUoJ3BhZGRpbmctbGVmdCcsIGAke2tleUdhcCAqIDAuNH1weGApO1xuXG4gICAgYm90dG9tS2V5VGV4dC5hcHBlbmRTZWxlY3QoJ3AucmVkLXRleHQua2V5LXRleHQudGV4dC1pbmxpbmUnKVxuICAgICAgLnN0eWxlKCd3aWR0aCcsIGAke2tleUdhcCAqIDAuOH1weGApXG4gICAgICAuaHRtbChwcm9wcy5rZXkudGV4dC5yZWRfcGVhayk7XG4gICAgYm90dG9tS2V5VGV4dC5hcHBlbmRTZWxlY3QoJ3Aub3JhbmdlLXRleHQua2V5LXRleHQudGV4dC1pbmxpbmUnKVxuICAgICAgLnN0eWxlKCd3aWR0aCcsIGAke2tleUdhcCAqIDAuOH1weGApXG4gICAgICAuaHRtbChwcm9wcy5rZXkudGV4dC5vcmFuZ2VfcGVhayk7XG4gICAgYm90dG9tS2V5VGV4dC5hcHBlbmRTZWxlY3QoJ3Aud2hpdGUtdGV4dC5rZXktdGV4dC50ZXh0LWlubGluZScpXG4gICAgICAuc3R5bGUoJ3dpZHRoJywgYCR7a2V5R2FwICogMC44fXB4YClcbiAgICAgIC5odG1sKHByb3BzLmtleS50ZXh0LndoaXRlX3BlYWspO1xuXG4gICAgLy8gU1ZHIGJlZ2lucyBoZXJlXG4gICAgY29uc3Qgc3ZnID0gdGhpcy5zZWxlY3Rpb24oKVxuICAgICAgLmFwcGVuZFNlbGVjdCgnZGl2LmNoYXJ0LWNvbnRhaW5lci1kaXYnKVxuICAgICAgLmF0dHIoJ2lkJywgJ21hcC1jb250YWluZXInKVxuICAgICAgLnN0eWxlKCdvdmVyZmxvdy14JywgJ3Njcm9sbCcpXG4gICAgICAuYXBwZW5kU2VsZWN0KCdzdmcuY2hhcnQnKSAvLyBzZWUgZG9jcyBpbiAuL3V0aWxzL2QzLmpzXG4gICAgICAuYXR0cignd2lkdGgnLCB1c2VXaWR0aClcbiAgICAgIC5hdHRyKCdoZWlnaHQnLCBoZWlnaHQpO1xuXG4gICAgY29uc3QgZyA9IHN2Zy5hcHBlbmRTZWxlY3QoJ2cnKTtcblxuICAgIGlmICghZDNbcHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5wcm9qZWN0aW9uXSkge1xuICAgICAgcHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5wcm9qZWN0aW9uID0gJ2dlb05hdHVyYWxFYXJ0aDEnO1xuICAgIH1cblxuICAgIGNvbnN0IHByb2plY3Rpb24gPSBkM1twcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLnByb2plY3Rpb25dKCk7XG4gICAgY29uc3QgY291bnRyaWVzID0gdG9wb2pzb24uZmVhdHVyZShwcm9wcy5nZW8sIHByb3BzLmdlby5vYmplY3RzLmNvdW50cmllcyk7XG4gICAgbGV0IGRpc3B1dGVkO1xuICAgIGlmIChwcm9wcy5nZW8ub2JqZWN0cy5kaXNwdXRlZEJvdW5kYXJpZXMpIHtcbiAgICAgIGRpc3B1dGVkID0gdG9wb2pzb24ubWVzaChwcm9wcy5nZW8sIHByb3BzLmdlby5vYmplY3RzLmRpc3B1dGVkQm91bmRhcmllcyk7ICBcbiAgICB9XG5cbiAgICBpZiAocHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5jZW50ZXIgJiYgcHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5jZW50ZXIubGVuZ3RoID09PSAyKSB7XG4gICAgICBwcm9qZWN0aW9uLmNlbnRlcihwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLmNlbnRlcik7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMucm90YXRlICYmIHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMucm90YXRlLmxlbmd0aCA9PT0gMikge1xuICAgICAgcHJvamVjdGlvbi5yb3RhdGUocHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5yb3RhdGUpO1xuICAgIH1cblxuICAgIGNvbnN0IGZpbHRlcmVkQ291bnRyeUtleXMgPSBmaWx0ZXJlZERhdGEubWFwKGQgPT4gZC5rZXkpO1xuICAgIGNvbnN0IGNvdW50cnlDZW50cm9pZHMgPSBjb3VudHJpZXMuZmVhdHVyZXNcbiAgICAgIC5maWx0ZXIoYyA9PiBmaWx0ZXJlZENvdW50cnlLZXlzLmluY2x1ZGVzKGMucHJvcGVydGllcy5pc29BbHBoYTIpKVxuICAgICAgLmZpbHRlcihjID0+IGMucHJvcGVydGllcy5jZW50cm9pZC5sZW5ndGg9PTIgJiYgYy5wcm9wZXJ0aWVzLmNlbnRyb2lkWzBdICYmIGMucHJvcGVydGllcy5jZW50cm9pZFsxXSlcbiAgICAgIC5tYXAoKHsgcHJvcGVydGllcyB9KSA9PiAoe1xuICAgICAgICB0eXBlOiAnRmVhdHVyZScsXG4gICAgICAgIHByb3BlcnRpZXMsXG4gICAgICAgIGdlb21ldHJ5OiB7XG4gICAgICAgICAgdHlwZTogJ1BvaW50JyxcbiAgICAgICAgICBjb29yZGluYXRlczogcHJvcGVydGllcy5jZW50cm9pZCxcbiAgICAgICAgfSxcbiAgICAgIH0pKTtcblxuICAgIC8vIEFkZGluZyBzb21lIHBvaW50cyBpbiB0aGUgb2NlYW4gdG8gY3JlYXRlIHZvcm9ub2kgc3BhY2VzIHRoYXQgd2lsbFxuICAgIC8vIHJlc2V0IHRoZSBtYXAsIHNvIGFzIHlvdXIgY3Vyc29yIHRyYWNlcyBsYW5kIG1hc3NlcywgeW91IGdldCBoaWdobGlnaHRzLFxuICAgIC8vIGJ1dCBpbiB0aGUgb2NlYW4geW91IGNhbiBzZWUgdGhlIHdob2xlIHdvcmxkIHBpY3R1cmUuLi5cbiAgICBjb25zdCByZXNldFBvaW50cyA9IFtcbiAgICAgIFstNDAuMjQ4MTA4LCAzOC42NTM3ODhdLCAvLyBOb3J0aCBBdGxhbnRpY1xuICAgICAgWy0yOS44MDAwMTgsIDE0LjUzNjIyMF0sIC8vIENlbnRyYWwgQXRsYW50aWNcbiAgICAgIFstMTUuNDg1NTQ4LCAtMTIuOTQxNjQ4XSwgLy8gU291dGggQXRsYW50aWNcbiAgICAgIFstMTc0LjgwODY1OSwgMzUuODU2MTI3XSwgLy8gTm9ydGggUGFjaWZpY1xuICAgICAgWy0xMTcuMzI0NDE0LCAtMTEuMTMwODIxXSwgLy8gU291dGggUGFjaWZpY1xuICAgICAgWy0xNzMuMDM5MTMxLCAtNDQuOTIwNjk3XSwgLy8gU291dGh3ZXN0IHBhY2lmaWNcbiAgICAgIFs2NC40MDcwMjQsIDUuMDQ1ODE1XSwgLy8gTm9ydGggSW5kaWFuXG4gICAgICBbNzUuNTY5MTI4LCAtMzEuNjkxOTM5XSwgLy8gU291dGggSW5kaWFuXG4gICAgICBbLTUuNzgzMjY2LCAtODMuNjA4MDc3XSwgLy8gQW50YXJjdGljYVxuICAgIF07XG4gICAgY29uc3Qgdm9yb25vaUNlbnRyb2lkcyA9IGNvdW50cnlDZW50cm9pZHMuY29uY2F0KHJlc2V0UG9pbnRzLm1hcChjZW50cm9pZCA9PiAoe1xuICAgICAgdHlwZTogJ0ZlYXR1cmUnLFxuICAgICAgcHJvcGVydGllczogeyByZXNldDogdHJ1ZSB9LFxuICAgICAgZ2VvbWV0cnk6IHtcbiAgICAgICAgdHlwZTogJ1BvaW50JyxcbiAgICAgICAgY29vcmRpbmF0ZXM6IGNlbnRyb2lkLFxuICAgICAgfSxcbiAgICB9KSkpO1xuXG4gICAgaWYgKHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMuY2xpcF9ib3ggJiYgKHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMuY2xpcF9ib3gubGVuZ3RoID09PSAyICYmIHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMuY2xpcF9ib3hbMF0ubGVuZ3RoID09PSAyICYmIHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMuY2xpcF9ib3hbMV0ubGVuZ3RoID09PSAyKSkge1xuICAgICAgY29uc29sZS5sb2coJ2NsaXBwaW5nISA6KScpO1xuICAgICAgcHJvamVjdGlvbi5maXRTaXplKFt1c2VXaWR0aCwgaGVpZ2h0XSwgbWFrZVJhbmdlQm94KHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMuY2xpcF9ib3gpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coJ2NhbnQgY2xpcCA6KCcpO1xuICAgICAgcHJvamVjdGlvbi5maXRTaXplKFt1c2VXaWR0aCwgaGVpZ2h0XSwgY291bnRyaWVzKTtcbiAgICB9XG5cbiAgICBpZiAocHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5zY2FsZSkge1xuICAgICAgcHJvamVjdGlvbi5zY2FsZShwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLnNjYWxlKTtcbiAgICB9XG5cbiAgICBjb25zdCBwYXRoID0gZDMuZ2VvUGF0aCgpLnByb2plY3Rpb24ocHJvamVjdGlvbik7XG4gICAgc3ZnLnNlbGVjdEFsbCgnLmNvdW50cnksLmRpc3B1dGVkLC5jZW50cm9pZCcpLnJlbW92ZSgpO1xuXG4gICAgY29uc3QgY291bnRyeUdyb3VwcyA9IGcuYXBwZW5kU2VsZWN0KCdnLmNvdW50cmllcycpXG4gICAgICAuc3R5bGUoJ3BvaW50ZXItZXZlbnRzJywgJ25vbmUnKVxuICAgICAgLnN0eWxlKCdmaWxsJywgcHJvcHMubWFwX2ZpbGwpXG4gICAgICAuc2VsZWN0QWxsKCdwYXRoLmNvdW50cnknKVxuICAgICAgLmRhdGEoY291bnRyaWVzLmZlYXR1cmVzLmZpbHRlcihkID0+IGQucHJvcGVydGllcy5zbHVnICE9PSAnYW50YXJjdGljYScpLCBkID0+IGQucHJvcGVydGllcy5zbHVnKTtcblxuICAgIGNvdW50cnlHcm91cHNcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgIC5hdHRyKCdjbGFzcycsIGQgPT4gYGNvdW50cnkgYy0ke2QucHJvcGVydGllcy5zbHVnfSBsZXZlbC0wYClcbiAgICAgIC5tZXJnZShjb3VudHJ5R3JvdXBzKVxuICAgICAgLnN0eWxlKCdzdHJva2UnLCBwcm9wcy5tYXBfc3Ryb2tlX2NvbG9yKVxuICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCBwcm9wcy5tYXBfc3Ryb2tlX3dpZHRoKVxuICAgICAgLmF0dHIoJ2QnLCBwYXRoKTtcblxuICAgIGNvbnNvbGUubG9nKGcuc2VsZWN0KCcuY291bnRyaWVzJykubm9kZSgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKTtcbiAgICBpZiAoZGlzcHV0ZWQpIHtcbiAgICAgIGcuYXBwZW5kU2VsZWN0KCdwYXRoLmRpc3B1dGVkJylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2Rpc3B1dGVkIGxldmVsLTAnKVxuICAgICAgICAuc3R5bGUoJ3BvaW50ZXItZXZlbnRzJywgJ25vbmUnKVxuICAgICAgICAuc3R5bGUoJ3N0cm9rZScsIHByb3BzLm1hcF9zdHJva2VfY29sb3IpXG4gICAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgcHJvcHMubWFwX3N0cm9rZV93aWR0aClcbiAgICAgICAgLnN0eWxlKCdmaWxsJywgJ25vbmUnKVxuICAgICAgICAuc3R5bGUoJ3N0cm9rZS1kYXNoYXJyYXknLCBwcm9wcy5kaXNwdXRlZF9kYXNoYXJyYXkpXG4gICAgICAgIC5hdHRyKCdkJywgcGF0aChkaXNwdXRlZCkpO1xuICAgIH1cblxuICAgIGNvbnN0IHNvcnRlZENlbnRyb2lkcyA9IGNvdW50cnlDZW50cm9pZHMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgY29uc3QgYU8gPSBmaWx0ZXJlZERhdGEuZmlsdGVyKGUgPT4gYS5wcm9wZXJ0aWVzLmlzb0FscGhhMiA9PT0gZS5rZXkpWzBdO1xuICAgICAgY29uc3QgYk8gPSBmaWx0ZXJlZERhdGEuZmlsdGVyKGUgPT4gYi5wcm9wZXJ0aWVzLmlzb0FscGhhMiA9PT0gZS5rZXkpWzBdO1xuICAgICAgcmV0dXJuIGFPLnZhbHVlIC0gYk8udmFsdWU7XG4gICAgfSk7XG5cbiAgICBzb3J0ZWRDZW50cm9pZHMuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgY29uc3QgbyA9IGZpbHRlcmVkRGF0YS5maWx0ZXIoZSA9PiBkLnByb3BlcnRpZXMuaXNvQWxwaGEyID09PSBlLmtleSlbMF07XG4gICAgICBpZiAobykge1xuICAgICAgICBkLnZhbHVlID0gby52YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IHNwaWtlQ2VudHJvaWRzID0gZy5hcHBlbmRTZWxlY3QoJ2cuc3Bpa2UtbGF5ZXInKVxuICAgICAgLnN0eWxlKCdwb2ludGVyLWV2ZW50cycsICdub25lJylcbiAgICAgIC5zZWxlY3RBbGwoJ3BhdGguY2VudHJvaWQnKVxuICAgICAgLmRhdGEoc29ydGVkQ2VudHJvaWRzKTtcblxuICAgIHNwaWtlQ2VudHJvaWRzLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgZCA9PiBkLnByb3BlcnRpZXMuc2x1ZyArICcgY2VudHJvaWQnKVxuICAgICAgLm1lcmdlKHNwaWtlQ2VudHJvaWRzKVxuICAgICAgLmF0dHIoJ2QnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHByb2plY3Rpb24oZC5wcm9wZXJ0aWVzLmNlbnRyb2lkKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBzY2FsZVkoZC52YWx1ZSk7XG4gICAgICAgIHJldHVybiAnTScgKyAob2JqWzBdIC0gcHJvcHMuc3Bpa2Vfc2l6ZSkgKyAnICcgKyBvYmpbMV0gKyAnIEwnICsgb2JqWzBdICsgJyAnICsgKG9ialsxXSAtIHZhbHVlKSArICcgTCcgKyAob2JqWzBdICsgcHJvcHMuc3Bpa2Vfc2l6ZSkgKyAnICcgKyBvYmpbMV0gKyAnICc7XG4gICAgICB9KVxuICAgICAgLnN0eWxlKCdmaWxsJywgJ25vbmUnKVxuICAgICAgLnN0eWxlKCdzdHJva2UnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBkLnZhbHVlID8gcHJvcHMuc3Bpa2VfY29sb3Jfc2NhbGUoZC52YWx1ZSkgOiAnI2NjYyc7XG4gICAgICB9KVxuICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBkLnZhbHVlID8gcHJvcHMuc3Bpa2Vfc3Ryb2tlX3dpZHRoX3NjYWxlKGQudmFsdWUpIDogMC41O1xuICAgICAgfSk7XG5cbiAgICBjb25zdCBjb3VudHJ5Vm9yb25vaUNlbnRyb2lkcyA9IGcuYXBwZW5kU2VsZWN0KCdnLnZvcm9ub2knKVxuICAgICAgLnN0eWxlKCdmaWxsJywgJ25vbmUnKVxuICAgICAgLnN0eWxlKCdjdXJzb3InLCBwcm9wcy5pbnRlcmFjdGlvbj8nY3Jvc3NoYWlyJzonZGVmYXVsdCcpXG4gICAgICAuc3R5bGUoJ3BvaW50ZXItZXZlbnRzJywgJ2FsbCcpXG4gICAgICAuc2VsZWN0QWxsKCdwYXRoLnZvcm9ub2knKVxuICAgICAgLmRhdGEoZ2VvVm9yb25vaSgpLnBvbHlnb25zKHZvcm9ub2lDZW50cm9pZHMpLmZlYXR1cmVzKTtcblxuICAgIGNvdW50cnlWb3Jvbm9pQ2VudHJvaWRzLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgZCA9PiAndm9yb25vaScpXG4gICAgICAubWVyZ2UoY291bnRyeVZvcm9ub2lDZW50cm9pZHMpXG4gICAgICAuYXR0cignZCcsIHBhdGgpXG4gICAgICAub24oJ21vdXNlb3ZlcicsIGQgPT4ge1xuICAgICAgICBpZiAocHJvcHMuaW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICB0aXBPbihkKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5vbignbW91c2VvdXQnLCBkID0+IHtcbiAgICAgICAgaWYgKHByb3BzLmludGVyYWN0aW9uKSB7XG4gICAgICAgICAgdGlwT2ZmKGQpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIGNvdW50cnlWb3Jvbm9pQ2VudHJvaWRzLmV4aXQoKVxuICAgICAgLnJlbW92ZSgpO1xuXG4gICAgY29uc3QgdG9vbHRpcCA9IGcuYXBwZW5kU2VsZWN0KCdnLnRleHQtZ3JvdXAnKVxuICAgICAgLnN0eWxlKCdwb2ludGVyLWV2ZW50cycsICdub25lJylcbiAgICAgIC5hcHBlbmQoJ3RleHQnKTtcblxuICAgIGxldCBhbm5vdGF0aW9uRGF0YSA9IHByb3BzLmFubm90YXRpb25zLm5hbWUubWFwKChkKSA9PiB7XG4gICAgICBjb25zdCBjID0gQXRsYXMuZ2V0Q291bnRyeShkKTtcbiAgICAgIGNvbnN0IGdlbyA9IGNvdW50cnlDZW50cm9pZHMuZmlsdGVyKGUgPT4gZS5wcm9wZXJ0aWVzLmlzb0FscGhhMiA9PT0gYy5pc29BbHBoYTIpWzBdXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb3VudHJ5TWV0YTogYyxcbiAgICAgICAgY291bnRyeUdlbzogZ2VvLFxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIGxldCBhbm5vdGF0aW9uTnVtRGF0YSA9IHByb3BzLmFubm90YXRpb25zLnZhbHVlLm1hcCgoZCkgPT4ge1xuICAgICAgY29uc3QgYyA9IEF0bGFzLmdldENvdW50cnkoZCk7XG4gICAgICBjb25zdCBnZW8gPSBzb3J0ZWRDZW50cm9pZHMuZmlsdGVyKGUgPT4gZS5wcm9wZXJ0aWVzLmlzb0FscGhhMiA9PT0gYy5pc29BbHBoYTIpWzBdXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb3VudHJ5TWV0YTogYyxcbiAgICAgICAgY291bnRyeUdlbzogZ2VvLFxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIGFubm90YXRpb25EYXRhID0gYW5ub3RhdGlvbkRhdGEuZmlsdGVyKGQgPT4gZC5jb3VudHJ5TWV0YSAmJiBkLmNvdW50cnlHZW8pXG4gICAgYW5ub3RhdGlvbk51bURhdGEgPSBhbm5vdGF0aW9uTnVtRGF0YS5maWx0ZXIoZCA9PiBkLmNvdW50cnlNZXRhICYmIGQuY291bnRyeUdlbylcblxuICAgIGNvbnN0IGFubm90YXRpb25zID0gZy5hcHBlbmRTZWxlY3QoJ2cubmFtZS1hbm5vdGF0aW9ucycpXG4gICAgICAuc3R5bGUoJ3BvaW50ZXItZXZlbnRzJywgJ25vbmUnKVxuICAgICAgLnNlbGVjdEFsbCgndGV4dC5hbm5vdGF0aW9uJylcbiAgICAgIC5kYXRhKGFubm90YXRpb25EYXRhLCBkID0+IGQuY291bnRyeU1ldGEuaXNvQWxwaGEyKTtcblxuICAgIGFubm90YXRpb25zLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2Fubm90YXRpb24nKVxuICAgICAgLm1lcmdlKGFubm90YXRpb25zKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIChkKSA9PiB7XG4gICAgICAgIGNvbnN0IHAgPSBwcm9qZWN0aW9uKGQuY291bnRyeUdlby5nZW9tZXRyeS5jb29yZGluYXRlcyk7XG4gICAgICAgIHJldHVybiBgdHJhbnNsYXRlKCR7cFswXX0sJHtwWzFdICsgcHJvcHMuaG92ZXJfZ2FwfSlgO1xuICAgICAgfSlcbiAgICAgIC50ZXh0KChkKSA9PiB7XG4gICAgICAgIHJldHVybiBkLmNvdW50cnlNZXRhLnRyYW5zbGF0aW9uc1twcm9wcy5sb2NhbGVdO1xuICAgICAgfSk7XG5cbiAgICBhbm5vdGF0aW9ucy5leGl0KClcbiAgICAgIC5yZW1vdmUoKTtcblxuICAgIGNvbnN0IGFubm90YXRpb25zTnVtYmVycyA9IGcuYXBwZW5kU2VsZWN0KCdnLm51bWJlci1hbm5vdGF0aW9ucycpXG4gICAgICAuc3R5bGUoJ3BvaW50ZXItZXZlbnRzJywgJ25vbmUnKVxuICAgICAgLnNlbGVjdEFsbCgndGV4dC5hbm5vdGF0aW9uJylcbiAgICAgIC5kYXRhKGFubm90YXRpb25OdW1EYXRhKTtcblxuICAgIGFubm90YXRpb25zTnVtYmVycy5lbnRlcigpXG4gICAgICAuYXBwZW5kKCd0ZXh0JylcbiAgICAgIC5hdHRyKCdjbGFzcycsICdhbm5vdGF0aW9uJylcbiAgICAgIC5tZXJnZShhbm5vdGF0aW9uc051bWJlcnMpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgKGQpID0+IHtcbiAgICAgICAgY29uc3QgcCA9IHByb2plY3Rpb24oZC5jb3VudHJ5R2VvLmdlb21ldHJ5LmNvb3JkaW5hdGVzKTtcbiAgICAgICAgcmV0dXJuIGB0cmFuc2xhdGUoJHtwWzBdfSwke3BbMV0gKyBwcm9wcy5ob3Zlcl9nYXB9KWA7XG4gICAgICB9KVxuICAgICAgLmh0bWwoKGQpID0+IHtcbiAgICAgICAgcmV0dXJuIGdldFBlYWtUZXh0KGQuY291bnRyeUdlby52YWx1ZSk7XG4gICAgICB9KTtcblxuICAgIGFubm90YXRpb25zTnVtYmVycy5leGl0KClcbiAgICAgIC5yZW1vdmUoKTtcblxuICAgIGlmIChwcm9wcy5tb2JpbGUgJiYgd2lkdGggPCBwcm9wcy5yZWZCb3guYnJlYWtwb2ludCkge1xuICAgICAgLy8gUmVmIGJveCBhdCB0aGUgYm90dG9tIGZvciBtb2JpbGUgc3RhcnRzIGhlcmVcbiAgICAgIGNvbnN0IGxhbmQgPSB0b3BvanNvbi5mZWF0dXJlKHByb3BzLmdlbywgcHJvcHMuZ2VvLm9iamVjdHMubGFuZCk7XG5cbiAgICAgIGNvbnN0IHJlZkJveENvbnRhaW5lciA9IHRoaXMuc2VsZWN0aW9uKClcbiAgICAgICAgLmFwcGVuZFNlbGVjdCgnZGl2LnJlZi1ib3gnKVxuICAgICAgICAuY2xhc3NlZCgnaGlkZScsIGZhbHNlKVxuICAgICAgICAuc3R5bGUoJ3RleHQtYWxpZ24nLCAnY2VudGVyJylcbiAgICAgICAgLnN0eWxlKCd3aWR0aCcsIGAke3Byb3BzLnJlZkJveC53aWR0aH1weGApXG4gICAgICAgIC5zdHlsZSgnaGVpZ2h0JywgYCR7cHJvcHMucmVmQm94LmhlaWdodH1weGApXG5cbiAgICAgIGNvbnN0IHJlZkJveCA9IHJlZkJveENvbnRhaW5lci5hcHBlbmRTZWxlY3QoJ3N2ZycpXG4gICAgICAgIC5zdHlsZSgnYm9yZGVyJywgYCR7cHJvcHMubWFwX2ZpbGx9IHNvbGlkIDFweGApXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIHByb3BzLnJlZkJveC53aWR0aClcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHByb3BzLnJlZkJveC5oZWlnaHQpO1xuXG4gICAgICBjb25zdCBwcm9qZWN0aW9uUmVmID0gZDMuZ2VvTmF0dXJhbEVhcnRoMSgpXG4gICAgICAgIC5maXRTaXplKFtwcm9wcy5yZWZCb3gud2lkdGgsIHByb3BzLnJlZkJveC5oZWlnaHRdLCBtYWtlUmFuZ2VCb3gocHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5jbGlwX2JveCkpXG5cbiAgICAgIGNvbnN0IHBhdGhSZWYgPSBkMy5nZW9QYXRoKCkucHJvamVjdGlvbihwcm9qZWN0aW9uUmVmKTtcblxuICAgICAgcmVmQm94LmFwcGVuZFNlbGVjdCgncGF0aCcpLmF0dHIoJ2QnLCBwYXRoUmVmKGxhbmQpKS5hdHRyKCdmaWxsJywgcHJvcHMubWFwX2ZpbGwpO1xuICAgICAgY29uc3QgYWN0aXZlV2lkdGggPSB3aWR0aCAvIHVzZVdpZHRoICogcHJvcHMucmVmQm94LndpZHRoO1xuICAgICAgY29uc3QgYWN0aXZlUmVnaW9uID0gcmVmQm94Q29udGFpbmVyLmFwcGVuZFNlbGVjdCgnZGl2JykuYXR0cignY2xhc3MnLCAnYWN0aXZlLXJlZ2lvbicpXG4gICAgICAgIC5zdHlsZSgnd2lkdGgnLCBgJHthY3RpdmVXaWR0aH1weGApXG4gICAgICAgIC5zdHlsZSgnaGVpZ2h0JywgYCR7cHJvcHMucmVmQm94LmhlaWdodH1weGApXG4gICAgICAgIC5jYWxsKGQzLmRyYWcoKVxuICAgICAgICAgIC5vbignc3RhcnQuaW50ZXJydXB0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBhY3RpdmVSZWdpb24uaW50ZXJydXB0KCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnc3RvcCcpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLm9uKCdzdGFydCBkcmFnJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsZXQgY2FsY1ggPSBkMy5ldmVudC54IC0gKGFjdGl2ZVdpZHRoIC8gMilcbiAgICAgICAgICAgIGlmIChkMy5ldmVudC54IDw9IGFjdGl2ZVdpZHRoIC8gMikge1xuICAgICAgICAgICAgICBjYWxjWCA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGQzLmV2ZW50LnggPj0gKHByb3BzLnJlZkJveC53aWR0aCAtIGFjdGl2ZVdpZHRoLzIpKSB7XG4gICAgICAgICAgICAgIGNhbGNYID0gYWN0aXZlV2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY3RpdmVSZWdpb24uc3R5bGUoJ2xlZnQnLCBjYWxjWCArICdweCcpO1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcC1jb250YWluZXInKS5zY3JvbGxMZWZ0ID0gY2FsY1gvcHJvcHMucmVmQm94LndpZHRoKnVzZVdpZHRoXG4gICAgICAgICAgfSkpO1xuICAgICAgLy8gUmVmYm94IGVuZHMgaGVyZVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNlbGVjdGlvbigpLnNlbGVjdCgnLnJlZi1ib3gnKS5jbGFzc2VkKCdoaWRlJywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGlwT24odm9yb25vaVBhdGgpIHtcbiAgICAgIGNvbnN0IHsgcHJvcGVydGllcyB9ID0gdm9yb25vaVBhdGgucHJvcGVydGllcy5zaXRlO1xuICAgICAgaWYgKHByb3BlcnRpZXMucmVzZXQpIHJldHVybjtcbiAgICAgIGNvbnN0IHsgdmFsdWUgfSA9IGZpbHRlcmVkRGF0YS5maW5kKGUgPT4gcHJvcGVydGllcy5pc29BbHBoYTIgPT09IGUua2V5KTtcblxuICAgICAgaWYgKCF2YWx1ZSAmJiB2YWx1ZSAhPT0gZmlsdGVyTWluKSByZXR1cm47XG4gICAgICBnLnNlbGVjdEFsbCgncGF0aC5jZW50cm9pZCcpXG4gICAgICAgIC5zdHlsZSgnZmlsbCcsICdub25lJylcbiAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywgcHJvcHMuc3Bpa2VfaW5hY3RpdmVfb3BhY2l0eSk7XG5cbiAgICAgIGcuc2VsZWN0QWxsKCcubmFtZS1hbm5vdGF0aW9ucywubnVtYmVyLWFubm90YXRpb25zJylcbiAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMClcblxuICAgICAgZy5zZWxlY3RBbGwoYHBhdGguY2VudHJvaWQuJHtwcm9wZXJ0aWVzLnNsdWd9YClcbiAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMSlcbiAgICAgICAgLnN0eWxlKCdmaWxsJywgKGQpID0+IHtcbiAgICAgICAgICByZXR1cm4gZC52YWx1ZSA/IHByb3BzLnNwaWtlX2NvbG9yX3NjYWxlKGQudmFsdWUpIDogbnVsbDtcbiAgICAgICAgfSlcbiAgICAgICAgLmNsYXNzZWQoJ2FjdGl2ZScsIHRydWUpXG4gICAgICAgIC5yYWlzZSgpO1xuXG4gICAgICB0b29sdGlwXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgY29uc3QgbyA9IHByb2plY3Rpb24ocHJvcGVydGllcy5jZW50cm9pZCk7XG4gICAgICAgICAgcmV0dXJuIGB0cmFuc2xhdGUoJHtvWzBdfSwke29bMV0gKyBwcm9wcy5ob3Zlcl9nYXB9KWA7XG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZSgndGV4dC1hbmNob3InLCAnbWlkZGxlJylcbiAgICAgICAgLmh0bWwoZCA9PiBgXG4gICAgICAgICAgPHRzcGFuIHg9XCIwXCIgeT1cIjBcIj4ke3Byb3BlcnRpZXMudHJhbnNsYXRpb25zW3Byb3BzLmxvY2FsZV19PC90c3Bhbj5cbiAgICAgICAgICAke2dldFBlYWtUZXh0KHZhbHVlKX1gKTtcblxuICAgICAgZy5zZWxlY3RBbGwoYC5jb3VudHJ5LmMtJHtwcm9wZXJ0aWVzLnNsdWd9YClcbiAgICAgICAgLmNsYXNzZWQoJ2FjdGl2ZScsIHRydWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRpcE9mZih2b3Jvbm9pUGF0aCkge1xuXG4gICAgICBjb25zdCB7IHByb3BlcnRpZXMgfSA9IHZvcm9ub2lQYXRoLnByb3BlcnRpZXMuc2l0ZTtcbiAgICAgIGNvbnN0IGNvdW50cnkgPSBnLnNlbGVjdEFsbChgLmNvdW50cnkuYy0ke3Byb3BlcnRpZXMuc2x1Z31gKTtcblxuICAgICAgZy5zZWxlY3RBbGwoJ3BhdGguY2VudHJvaWQnKS5zdHlsZSgnb3BhY2l0eScsIDEpXG4gICAgICAgIC5jbGFzc2VkKCdhY3RpdmUnLCBmYWxzZSlcbiAgICAgICAgLnN0eWxlKCdmaWxsJywgJ25vbmUnKTtcblxuICAgICAgZy5zZWxlY3RBbGwoJy5uYW1lLWFubm90YXRpb25zLC5udW1iZXItYW5ub3RhdGlvbnMnKVxuICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCAxKTtcblxuICAgICAgdG9vbHRpcC5odG1sKCcnKTtcblxuICAgICAgY291bnRyeS5jbGFzc2VkKCdhY3RpdmUnLCBmYWxzZSlcbiAgICAgICAgLnN0eWxlKCdzdHJva2UnLCBwcm9wcy5tYXBfc3Ryb2tlX2NvbG9yKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQZWFrVGV4dCh2YWx1ZSkge1xuICAgICAgdmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlICogMTAwKTtcbiAgICAgIGlmICh2YWx1ZSA8IDEwMCAmJiB2YWx1ZSA+PSAxKSB7XG4gICAgICAgIHJldHVybiBgPHRzcGFuIGR5PVwiMWVtXCIgeD1cIjBcIj4ke3ZhbHVlLnRvTG9jYWxlU3RyaW5nKHByb3BzLmxvY2FsZSl9JTwvdHNwYW4+IDx0c3BhbiBjbGFzcz1cInNtYWxsZXJcIj4ke3Byb3BzLm9mX3BlYWtfdGV4dH08L3RzcGFuPmBcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPCAxKSB7XG4gICAgICAgIHJldHVybiBgPHRzcGFuIGR5PVwiMWVtXCIgeD1cIjBcIj48MSU8L3RzcGFuPiA8dHNwYW4gY2xhc3M9XCJzbWFsbGVyXCI+JHtwcm9wcy5vZl9wZWFrX3RleHR9PC90c3Bhbj5gXG4gICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAxMDApIHtcbiAgICAgICAgcmV0dXJuIGA8dHNwYW4gZHk9XCIxZW1cIiB4PVwiMFwiPiR7cHJvcHMuYXRfcGVha190ZXh0fTwvdHNwYW4+YFxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VSYW5nZUJveChvcHRzKSB7XG4gIHZhciBsb24wID0gb3B0c1swXVswXTtcbiAgdmFyIGxvbjEgPSBvcHRzWzFdWzBdO1xuICB2YXIgbGF0MCA9IG9wdHNbMF1bMV07XG4gIHZhciBsYXQxID0gb3B0c1sxXVsxXTtcblxuICAvLyB0byBjcm9zcyBhbnRpbWVyaWRpYW4gdy9vIGFtYmlndWl0eVxuICBpZiAobG9uMCA+IDAgJiYgbG9uMSA8IDApIHtcbiAgICBsb24xICs9IDM2MDtcbiAgfVxuXG4gIC8vIHRvIG1ha2UgbGF0IHNwYW4gdW5hbWJpZ3VvdXNcbiAgaWYgKGxhdDAgPiBsYXQxKSB7XG4gICAgdmFyIHRtcCA9IGxhdDA7XG4gICAgbGF0MCA9IGxhdDE7XG4gICAgbGF0MSA9IHRtcDtcbiAgfVxuXG4gIHZhciBkbG9uNCA9IChsb24xIC0gbG9uMCkgLyA0O1xuXG4gIHJldHVybiB7XG4gICAgdHlwZTogJ1BvbHlnb24nLFxuICAgIGNvb3JkaW5hdGVzOiBbW1xuICAgICAgW2xvbjAsIGxhdDBdLFxuICAgICAgW2xvbjAsIGxhdDFdLFxuICAgICAgW2xvbjAgKyBkbG9uNCwgbGF0MV0sXG4gICAgICBbbG9uMCArIDIgKiBkbG9uNCwgbGF0MV0sXG4gICAgICBbbG9uMCArIDMgKiBkbG9uNCwgbGF0MV0sXG4gICAgICBbbG9uMSwgbGF0MV0sXG4gICAgICBbbG9uMSwgbGF0MF0sXG4gICAgICBbbG9uMSAtIGRsb240LCBsYXQwXSxcbiAgICAgIFtsb24xIC0gMiAqIGRsb240LCBsYXQwXSxcbiAgICAgIFtsb24xIC0gMyAqIGRsb240LCBsYXQwXSxcbiAgICAgIFtsb24wLCBsYXQwXSxcbiAgICBdXSxcbiAgfTtcbn1cbmV4cG9ydCBkZWZhdWx0IEdsb2JhbFJhdGVNYXA7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/lib/chart.js\n");

/***/ })

})