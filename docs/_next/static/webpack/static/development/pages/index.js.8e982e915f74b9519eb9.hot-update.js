webpackHotUpdate("static/development/pages/index.js",{

/***/ "./src/lib/chart.js":
/*!**************************!*\
  !*** ./src/lib/chart.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ \"./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inherits */ \"./node_modules/@babel/runtime/helpers/esm/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var topojson_client__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! topojson-client */ \"./node_modules/topojson-client/index.js\");\n/* harmony import */ var _reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @reuters-graphics/graphics-atlas-client */ \"./node_modules/@reuters-graphics/graphics-atlas-client/dist/index.js\");\n/* harmony import */ var _reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _base_ChartComponent__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./base/ChartComponent */ \"./src/lib/base/ChartComponent.js\");\n/* harmony import */ var _utils_d3__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/d3 */ \"./src/lib/utils/d3.js\");\n/* harmony import */ var d3_geo_voronoi__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! d3-geo-voronoi */ \"./node_modules/d3-geo-voronoi/index.js\");\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\n\nvar Atlas = new _reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_8___default.a(); // import topology from '@reuters-graphics/graphics-atlas-client/topojson/global.110m.json';\n\nvar GlobalRateMap = /*#__PURE__*/function (_ChartComponent) {\n  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(GlobalRateMap, _ChartComponent);\n\n  var _super = _createSuper(GlobalRateMap);\n\n  function GlobalRateMap() {\n    var _this;\n\n    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, GlobalRateMap);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_this), \"defaultProps\", {\n      map_stroke_width: 1,\n      map_stroke_color: '#2f353f',\n      map_highlight_stroke_width: 1.2,\n      map_fill: 'rgba(153,153,153,0.25)',\n      map_stroke_color_active: 'rgba(255, 255, 255, 0.75)',\n      spike_color: '#eec331',\n      heightRatio: function heightRatio(width, breakpoint) {\n        return width < breakpoint ? 0.8 : 0.5;\n      },\n      geo: false,\n      locale: 'en',\n      map_custom_projections: {\n        clip_box: [[-130, 70], [194, -39]],\n        projection: 'geoNaturalEarth1',\n        center: null,\n        scale: null,\n        rotate: null\n      },\n      hover_gap: 12.5,\n      spike_height: 35,\n      spike_size: 3.5,\n      getDataRange: function getDataRange(width) {\n        return {\n          min: 0,\n          max: 1\n        };\n      },\n      spike_stroke_width: 0.5,\n      spike_highlight_stroke_width: 2,\n      spike_highlight_fill: true,\n      spike_color_scale: _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].scaleThreshold() // Can use a scale as a prop!\n      .domain([0.75, 0.9]).range(['#ccc', '#f68e26', '#de2d26']),\n      spike_stroke_width_scale: _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].scaleThreshold() // Can use a scale as a prop!\n      .domain([0.75, 0.9]).range([0.6, 0.9, 1.1]),\n      spike_inactive_opacity: 1,\n      disputed_dasharray: [5, 3],\n      key: {\n        text: {\n          main_text: 'How close is the current weekly average to the countryâ€™s peak',\n          red_peak: '>90%',\n          orange_peak: '90 to 75%',\n          white_peak: '<75%'\n        },\n        width: 140\n      },\n      annotations: {\n        name: [],\n        value: []\n      },\n      mobile: true,\n      refBox: {\n        height: 90,\n        width: 180,\n        breakpoint: 900,\n        useWidth: function useWidth(width, factor) {\n          return width * factor;\n        },\n        factor: 2.2\n      },\n      interaction: true,\n      at_peak_text: 'At peak',\n      of_peak_text: 'of peak'\n    });\n\n    return _this;\n  }\n\n  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(GlobalRateMap, [{\n    key: \"draw\",\n    value: function draw() {\n      var data = this.data();\n      var props = this.props();\n      var node = this.selection().node();\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          width = _node$getBoundingClie.width;\n\n      var ratio = props.heightRatio(width, props.refBox.breakpoint);\n      var useWidth, height;\n\n      if (width < props.refBox.breakpoint && props.mobile) {\n        useWidth = props.refBox.useWidth(width, props.refBox.factor);\n        this.selection().classed('mobile', true);\n        height = useWidth * 0.5;\n      } else {\n        useWidth = width;\n        this.selection().classed('mobile', false);\n        height = width * ratio;\n      }\n\n      var _props$getDataRange = props.getDataRange(width),\n          filterMin = _props$getDataRange.min,\n          filterMax = _props$getDataRange.max;\n\n      var filteredData = data.filter(function (d) {\n        return d.value >= filterMin && d.value <= filterMax;\n      });\n      var scaleY = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].scaleLinear().range([0, props.spike_height]).domain([0, 1]);\n      var keyBox = this.selection().appendSelect('div.key');\n      keyBox.appendSelect('p.left-text.text-inline.key-text').html(props.key.text.main_text);\n      var keySvgContainer = keyBox.appendSelect('div.svg-container.text-inline');\n      var keyGap = props.key.width / 3; // add key box\n\n      var keySvg = keySvgContainer.appendSelect('svg.text-inline').attr('height', props.spike_height + 6).style('fill', 'none').attr('width', props.key.width - keyGap * 0.27);\n      keySvg.appendSelect('defs').appendSelect('marker.top').attr('id', 'arrow-up').attr('markerWidth', 12).attr('markerHeight', 10).attr('refY', 5).attr('refX', 6).attr('orient', 'auto').appendSelect('path.up').style('stroke', 'white').style('stroke-width', 0.6).attr('d', 'M0 0 L6 5 L0 10');\n      keySvg.select('defs').appendSelect('marker.down').attr('id', 'arrow-down').attr('markerWidth', 12).attr('markerHeight', 10).attr('refY', 5).attr('refX', 0).attr('orient', 'auto').appendSelect('path.down').style('stroke', 'white').style('stroke-width', 0.6).attr('d', 'M6 0 L0 5 L6 10'); // add spike 1\n\n      keySvg.appendSelect('path.red-spike.high').style('stroke', props.spike_color_scale(1)).attr('d', function (d) {\n        var obj = [keyGap * 0.7, props.spike_height];\n        var value = scaleY(1);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('path.red-spike.low').style('stroke', props.spike_color_scale(0.9)).style('fill', props.spike_color_scale(0.9)).attr('d', function (d) {\n        var obj = [keyGap * 0.7 + props.spike_size * 1.4, props.spike_height];\n        var value = scaleY(0.9);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('path.orange-spike.high').style('stroke', props.spike_color_scale(0.89)).attr('d', function (d, i) {\n        var obj = [keyGap * 1.5, props.spike_height];\n        var value = scaleY(0.89);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('path.orange-spike.low').style('stroke', props.spike_color_scale(0.75)).style('fill', props.spike_color_scale(0.75)).attr('d', function (d) {\n        var obj = [keyGap * 1.5 + props.spike_size * 1.4, props.spike_height];\n        var value = scaleY(0.75);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('path.white-spike.high').style('stroke', props.spike_color_scale(0.74)).attr('d', function (d, i) {\n        var obj = [keyGap * 2.3, props.spike_height];\n        var value = scaleY(0.74);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('path.white-spike.low').style('stroke', '#ccc').style('fill', '#ccc').attr('d', function (d, i) {\n        var obj = [keyGap * 2.3 + props.spike_size * 1.4, props.spike_height];\n        var value = scaleY(0);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      });\n      keySvg.appendSelect('line').style('stroke', 'white').style('stroke-width', 0.7).attr('x1', 10).attr('x2', 10).attr('y1', 7).attr('y1', props.spike_height).attr('marker-end', 'url(#arrow-up)').attr('marker-start', 'url(#arrow-down)');\n      var bottomKeyText = keySvgContainer.appendSelect('div.bottom-text').style('padding-left', \"\".concat(keyGap * 0.4, \"px\"));\n      bottomKeyText.appendSelect('p.red-text.key-text.text-inline').style('width', \"\".concat(keyGap * 0.8, \"px\")).html(props.key.text.red_peak);\n      bottomKeyText.appendSelect('p.orange-text.key-text.text-inline').style('width', \"\".concat(keyGap * 0.8, \"px\")).html(props.key.text.orange_peak);\n      bottomKeyText.appendSelect('p.white-text.key-text.text-inline').style('width', \"\".concat(keyGap * 0.8, \"px\")).html(props.key.text.white_peak); // SVG begins here\n\n      var svg = this.selection().appendSelect('div.chart-container-div').attr('id', 'map-container').style('overflow-x', 'scroll').appendSelect('svg.chart') // see docs in ./utils/d3.js\n      .attr('width', useWidth).attr('height', height);\n      var g = svg.appendSelect('g');\n\n      if (!_utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"][props.map_custom_projections.projection]) {\n        props.map_custom_projections.projection = 'geoNaturalEarth1';\n      }\n\n      var projection = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"][props.map_custom_projections.projection]();\n      var countries = topojson_client__WEBPACK_IMPORTED_MODULE_7__[\"feature\"](props.geo, props.geo.objects.countries);\n      var disputed;\n\n      if (props.geo.objects.disputedBoundaries) {\n        disputed = topojson_client__WEBPACK_IMPORTED_MODULE_7__[\"mesh\"](props.geo, props.geo.objects.disputedBoundaries);\n      }\n\n      if (props.map_custom_projections.center && props.map_custom_projections.center.length === 2) {\n        projection.center(props.map_custom_projections.center);\n      }\n\n      if (props.map_custom_projections.rotate && props.map_custom_projections.rotate.length === 2) {\n        projection.rotate(props.map_custom_projections.rotate);\n      }\n\n      var filteredCountryKeys = filteredData.map(function (d) {\n        return d.key;\n      });\n      var countryCentroids = countries.features.filter(function (c) {\n        return filteredCountryKeys.includes(c.properties.isoAlpha2);\n      }).filter(function (c) {\n        return c.properties.centroid.length == 2 && c.properties.centroid[0] && c.properties.centroid[1];\n      }).map(function (_ref) {\n        var properties = _ref.properties;\n        return {\n          type: 'Feature',\n          properties: properties,\n          geometry: {\n            type: 'Point',\n            coordinates: properties.centroid\n          }\n        };\n      }); // Adding some points in the ocean to create voronoi spaces that will\n      // reset the map, so as your cursor traces land masses, you get highlights,\n      // but in the ocean you can see the whole world picture...\n\n      var resetPoints = [[-40.248108, 38.653788], // North Atlantic\n      [-29.800018, 14.536220], // Central Atlantic\n      [-15.485548, -12.941648], // South Atlantic\n      [-174.808659, 35.856127], // North Pacific\n      [-117.324414, -11.130821], // South Pacific\n      [-173.039131, -44.920697], // Southwest pacific\n      [64.407024, 5.045815], // North Indian\n      [75.569128, -31.691939], // South Indian\n      [-5.783266, -83.608077] // Antarctica\n      ];\n      var voronoiCentroids = countryCentroids.concat(resetPoints.map(function (centroid) {\n        return {\n          type: 'Feature',\n          properties: {\n            reset: true\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: centroid\n          }\n        };\n      }));\n\n      if (props.map_custom_projections.clip_box && props.map_custom_projections.clip_box.length === 2 && props.map_custom_projections.clip_box[0].length === 2 && props.map_custom_projections.clip_box[1].length === 2) {\n        console.log('clipping! :)');\n        projection.fitSize([useWidth, height], makeRangeBox(props.map_custom_projections.clip_box));\n      } else {\n        console.log('cant clip :(');\n        projection.fitSize([useWidth, height], countries);\n      }\n\n      if (props.map_custom_projections.scale) {\n        projection.scale(props.map_custom_projections.scale);\n      }\n\n      var path = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].geoPath().projection(projection);\n      svg.selectAll('.country,.disputed,.centroid').remove();\n      var countryGroups = g.appendSelect('g.countries').style('pointer-events', 'none').style('fill', props.map_fill).selectAll('path.country').data(countries.features.filter(function (d) {\n        return d.properties.slug !== 'antarctica';\n      }), function (d) {\n        return d.properties.slug;\n      });\n      countryGroups.enter().append('path').attr('class', function (d) {\n        return \"country c-\".concat(d.properties.slug, \" level-0\");\n      }).merge(countryGroups).style('stroke', props.map_stroke_color).style('stroke-width', props.map_stroke_width).attr('d', path);\n\n      if (disputed) {\n        g.appendSelect('path.disputed').attr('class', 'disputed level-0').style('pointer-events', 'none').style('stroke', props.map_stroke_color).style('stroke-width', props.map_stroke_width).style('fill', 'none').style('stroke-dasharray', props.disputed_dasharray).attr('d', path(disputed));\n      }\n\n      var sortedCentroids = countryCentroids.sort(function (a, b) {\n        var aO = filteredData.filter(function (e) {\n          return a.properties.isoAlpha2 === e.key;\n        })[0];\n        var bO = filteredData.filter(function (e) {\n          return b.properties.isoAlpha2 === e.key;\n        })[0];\n        return aO.value - bO.value;\n      });\n      sortedCentroids.forEach(function (d) {\n        var o = filteredData.filter(function (e) {\n          return d.properties.isoAlpha2 === e.key;\n        })[0];\n\n        if (o) {\n          d.value = o.value;\n        }\n      });\n      var spikeCentroids = g.appendSelect('g.spike-layer').style('pointer-events', 'none').selectAll('path.centroid').data(sortedCentroids);\n      spikeCentroids.enter().append('path').attr('class', function (d) {\n        return d.properties.slug + ' centroid';\n      }).merge(spikeCentroids).attr('d', function (d) {\n        var obj = projection(d.properties.centroid);\n        var value = scaleY(d.value);\n        return 'M' + (obj[0] - props.spike_size) + ' ' + obj[1] + ' L' + obj[0] + ' ' + (obj[1] - value) + ' L' + (obj[0] + props.spike_size) + ' ' + obj[1] + ' ';\n      }).style('fill', 'none').style('stroke', function (d) {\n        return d.value ? props.spike_color_scale(d.value) : '#ccc';\n      }).style('stroke-width', function (d) {\n        return d.value ? props.spike_stroke_width_scale(d.value) : 0.5;\n      });\n      var countryVoronoiCentroids = g.appendSelect('g.voronoi').style('fill', 'none').style('cursor', props.interaction ? 'crosshair' : 'default').style('pointer-events', 'all').selectAll('path.voronoi').data(Object(d3_geo_voronoi__WEBPACK_IMPORTED_MODULE_11__[\"geoVoronoi\"])().polygons(voronoiCentroids).features);\n      countryVoronoiCentroids.enter().append('path').attr('class', function (d) {\n        return 'voronoi';\n      }).merge(countryVoronoiCentroids).attr('d', path).on('mouseover', function (d) {\n        if (props.interaction) {\n          tipOn(d);\n        }\n      }).on('mouseout', function (d) {\n        if (props.interaction) {\n          tipOff(d);\n        }\n      });\n      countryVoronoiCentroids.exit().remove();\n      var tooltip = g.appendSelect('g.text-group').style('pointer-events', 'none').append('text');\n      var annotationData = props.annotations.name.map(function (d) {\n        var c = Atlas.getCountry(d);\n        var geo = countryCentroids.filter(function (e) {\n          return e.properties.isoAlpha2 === c.isoAlpha2;\n        })[0];\n        return {\n          countryMeta: c,\n          countryGeo: geo\n        };\n      });\n      var annotationNumData = props.annotations.value.map(function (d) {\n        var c = Atlas.getCountry(d);\n        var geo = sortedCentroids.filter(function (e) {\n          return e.properties.isoAlpha2 === c.isoAlpha2;\n        })[0];\n        return {\n          countryMeta: c,\n          countryGeo: geo\n        };\n      });\n      annotationData = annotationData.filter(function (d) {\n        return d.countryMeta && d.countryGeo;\n      });\n      annotationNumData = annotationNumData.filter(function (d) {\n        return d.countryMeta && d.countryGeo;\n      });\n      var annotations = g.appendSelect('g.name-annotations').style('pointer-events', 'none').selectAll('text.annotation').data(annotationData, function (d) {\n        return d.countryMeta.isoAlpha2;\n      });\n      annotations.enter().append('text').attr('class', 'annotation').merge(annotations).attr('transform', function (d) {\n        var p = projection(d.countryGeo.geometry.coordinates);\n        return \"translate(\".concat(p[0], \",\").concat(p[1] + props.hover_gap, \")\");\n      }).text(function (d) {\n        return d.countryMeta.translations[props.locale];\n      });\n      annotations.exit().remove();\n      var annotationsNumbers = g.appendSelect('g.number-annotations').style('pointer-events', 'none').selectAll('text.annotation').data(annotationNumData);\n      annotationsNumbers.enter().append('text').attr('class', 'annotation').merge(annotationsNumbers).attr('transform', function (d) {\n        var p = projection(d.countryGeo.geometry.coordinates);\n        return \"translate(\".concat(p[0], \",\").concat(p[1] + props.hover_gap, \")\");\n      }).html(function (d) {\n        return getPeakText(d.countryGeo.value);\n      });\n      annotationsNumbers.exit().remove();\n\n      if (props.mobile && width < props.refBox.breakpoint) {\n        // Ref box at the bottom for mobile starts here\n        var refBoxContainer = this.selection().appendSelect('div.ref-box').classed('hide', false).style('text-align', 'center').style('width', \"\".concat(props.refBox.width, \"px\")).style('height', \"\".concat(props.refBox.height, \"px\"));\n        var refBox = refBoxContainer.appendSelect('canvas').attr('width', props.refBox.width).attr('height', props.refBox.height);\n        var context = refBox.node().getContext('2d');\n        var projectionRef = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].geoNaturalEarth1();\n\n        if (props.map_custom_projections.clip_box && props.map_custom_projections.clip_box.length === 2 && props.map_custom_projections.clip_box[0].length === 2 && props.map_custom_projections.clip_box[1].length === 2) {\n          projectionRef.fitSize([props.refBox.width, props.refBox.height], makeRangeBox(props.map_custom_projections.clip_box));\n        } else {\n          projectionRef.fitSize([props.refBox.width, props.refBox.height], countries);\n        }\n\n        if (props.map_custom_projections.scale) {\n          projectionRef.scale(props.map_custom_projections.scale);\n        }\n\n        if (props.map_custom_projections.center && props.map_custom_projections.center.length === 2) {\n          projectionRef.center(props.map_custom_projections.center);\n        }\n\n        if (props.map_custom_projections.rotate && props.map_custom_projections.rotate.length === 2) {\n          projectionRef.rotate(props.map_custom_projections.rotate);\n        }\n\n        var woAntarctica = {\n          type: countries.type,\n          features: countries.features.filter(function (e) {\n            return e.properties.slug !== 'antarctica';\n          })\n        };\n        var pathRef = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].geoPath(projectionRef, context);\n        context.clearRect(0, 0, props.refBox.width, props.refBox.height);\n        context.beginPath();\n        pathRef(woAntarctica);\n        context.fillStyle = props.map_fill;\n        context.fill();\n        var activeWidth = width / useWidth * props.refBox.width;\n        var activeRegion = refBoxContainer.appendSelect('div').attr('class', 'active-region').style('width', \"\".concat(activeWidth, \"px\")).style('height', \"\".concat(props.refBox.height, \"px\")).style('left', \"\".concat(props.refBox.height / 2 - activeWidth / 2, \"px\")).call(_utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].drag().on('start.interrupt', function () {\n          activeRegion.interrupt();\n        }).on('start drag', function () {\n          var calcX = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].event.x - activeWidth / 2;\n\n          if (_utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].event.x <= activeWidth / 2) {\n            calcX = 0;\n          } else if (_utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].event.x >= props.refBox.width - activeWidth / 2) {\n            calcX = props.refBox.width - activeWidth;\n          }\n\n          activeRegion.style('left', calcX + 'px');\n          document.getElementById('map-container').scrollLeft = calcX / props.refBox.width * useWidth;\n        }));\n        document.getElementById('map-container').addEventListener('scroll', function (d) {\n          var pos = d.target.scrollLeft;\n          activeRegion.style('left', pos / useWidth * props.refBox.width + 'px');\n        }); // Refbox ends here\n      } else {\n        this.selection().select('.ref-box').classed('hide', true);\n      }\n\n      function tipOn(voronoiPath) {\n        var properties = voronoiPath.properties.site.properties;\n        if (properties.reset) return;\n\n        var _filteredData$find = filteredData.find(function (e) {\n          return properties.isoAlpha2 === e.key;\n        }),\n            value = _filteredData$find.value;\n\n        if (!value && value !== filterMin) return;\n        g.selectAll('path.centroid').style('fill', 'none').style('opacity', props.spike_inactive_opacity);\n        g.selectAll('.name-annotations,.number-annotations').style('opacity', 0);\n        g.selectAll(\"path.centroid.\".concat(properties.slug)).style('opacity', 1).style('fill', function (d) {\n          return d.value ? props.spike_color_scale(d.value) : null;\n        }).classed('active', true).raise();\n        tooltip.attr('transform', function (d) {\n          var o = projection(properties.centroid);\n          return \"translate(\".concat(o[0], \",\").concat(o[1] + props.hover_gap, \")\");\n        }).style('text-anchor', 'middle').html(function (d) {\n          return \"\\n          <tspan x=\\\"0\\\" y=\\\"0\\\">\".concat(properties.translations[props.locale], \"</tspan>\\n          \").concat(getPeakText(value));\n        });\n        g.selectAll(\".country.c-\".concat(properties.slug)).classed('active', true);\n      }\n\n      function tipOff(voronoiPath) {\n        var properties = voronoiPath.properties.site.properties;\n        var country = g.selectAll(\".country.c-\".concat(properties.slug));\n        g.selectAll('path.centroid').style('opacity', 1).classed('active', false).style('fill', 'none');\n        g.selectAll('.name-annotations,.number-annotations').style('opacity', 1);\n        tooltip.html('');\n        country.classed('active', false).style('stroke', props.map_stroke_color);\n      }\n\n      function getPeakText(value) {\n        value = Math.round(value * 100);\n\n        if (value < 100 && value >= 1) {\n          return \"<tspan dy=\\\"1em\\\" x=\\\"0\\\">\".concat(value.toLocaleString(props.locale), \"%</tspan> <tspan class=\\\"smaller\\\">\").concat(props.of_peak_text, \"</tspan>\");\n        } else if (value < 1) {\n          return \"<tspan dy=\\\"1em\\\" x=\\\"0\\\"><1%</tspan> <tspan class=\\\"smaller\\\">\".concat(props.of_peak_text, \"</tspan>\");\n        } else if (value === 100) {\n          return \"<tspan dy=\\\"1em\\\" x=\\\"0\\\">\".concat(props.at_peak_text, \"</tspan>\");\n        }\n      }\n\n      return this;\n    }\n  }]);\n\n  return GlobalRateMap;\n}(_base_ChartComponent__WEBPACK_IMPORTED_MODULE_9__[\"default\"]);\n\nfunction makeRangeBox(opts) {\n  var lon0 = opts[0][0];\n  var lon1 = opts[1][0];\n  var lat0 = opts[0][1];\n  var lat1 = opts[1][1]; // to cross antimeridian w/o ambiguity\n\n  if (lon0 > 0 && lon1 < 0) {\n    lon1 += 360;\n  } // to make lat span unambiguous\n\n\n  if (lat0 > lat1) {\n    var tmp = lat0;\n    lat0 = lat1;\n    lat1 = tmp;\n  }\n\n  var dlon4 = (lon1 - lon0) / 4;\n  return {\n    type: 'Polygon',\n    coordinates: [[[lon0, lat0], [lon0, lat1], [lon0 + dlon4, lat1], [lon0 + 2 * dlon4, lat1], [lon0 + 3 * dlon4, lat1], [lon1, lat1], [lon1, lat0], [lon1 - dlon4, lat0], [lon1 - 2 * dlon4, lat0], [lon1 - 3 * dlon4, lat0], [lon0, lat0]]]\n  };\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (GlobalRateMap);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NoYXJ0LmpzPzdiYjgiXSwibmFtZXMiOlsiQXRsYXMiLCJBdGxhc01ldGFkYXRhQ2xpZW50IiwiR2xvYmFsUmF0ZU1hcCIsIm1hcF9zdHJva2Vfd2lkdGgiLCJtYXBfc3Ryb2tlX2NvbG9yIiwibWFwX2hpZ2hsaWdodF9zdHJva2Vfd2lkdGgiLCJtYXBfZmlsbCIsIm1hcF9zdHJva2VfY29sb3JfYWN0aXZlIiwic3Bpa2VfY29sb3IiLCJoZWlnaHRSYXRpbyIsIndpZHRoIiwiYnJlYWtwb2ludCIsImdlbyIsImxvY2FsZSIsIm1hcF9jdXN0b21fcHJvamVjdGlvbnMiLCJjbGlwX2JveCIsInByb2plY3Rpb24iLCJjZW50ZXIiLCJzY2FsZSIsInJvdGF0ZSIsImhvdmVyX2dhcCIsInNwaWtlX2hlaWdodCIsInNwaWtlX3NpemUiLCJnZXREYXRhUmFuZ2UiLCJtaW4iLCJtYXgiLCJzcGlrZV9zdHJva2Vfd2lkdGgiLCJzcGlrZV9oaWdobGlnaHRfc3Ryb2tlX3dpZHRoIiwic3Bpa2VfaGlnaGxpZ2h0X2ZpbGwiLCJzcGlrZV9jb2xvcl9zY2FsZSIsImQzIiwic2NhbGVUaHJlc2hvbGQiLCJkb21haW4iLCJyYW5nZSIsInNwaWtlX3N0cm9rZV93aWR0aF9zY2FsZSIsInNwaWtlX2luYWN0aXZlX29wYWNpdHkiLCJkaXNwdXRlZF9kYXNoYXJyYXkiLCJrZXkiLCJ0ZXh0IiwibWFpbl90ZXh0IiwicmVkX3BlYWsiLCJvcmFuZ2VfcGVhayIsIndoaXRlX3BlYWsiLCJhbm5vdGF0aW9ucyIsIm5hbWUiLCJ2YWx1ZSIsIm1vYmlsZSIsInJlZkJveCIsImhlaWdodCIsInVzZVdpZHRoIiwiZmFjdG9yIiwiaW50ZXJhY3Rpb24iLCJhdF9wZWFrX3RleHQiLCJvZl9wZWFrX3RleHQiLCJkYXRhIiwicHJvcHMiLCJub2RlIiwic2VsZWN0aW9uIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmF0aW8iLCJjbGFzc2VkIiwiZmlsdGVyTWluIiwiZmlsdGVyTWF4IiwiZmlsdGVyZWREYXRhIiwiZmlsdGVyIiwiZCIsInNjYWxlWSIsInNjYWxlTGluZWFyIiwia2V5Qm94IiwiYXBwZW5kU2VsZWN0IiwiaHRtbCIsImtleVN2Z0NvbnRhaW5lciIsImtleUdhcCIsImtleVN2ZyIsImF0dHIiLCJzdHlsZSIsInNlbGVjdCIsIm9iaiIsImkiLCJib3R0b21LZXlUZXh0Iiwic3ZnIiwiZyIsImNvdW50cmllcyIsInRvcG9qc29uIiwib2JqZWN0cyIsImRpc3B1dGVkIiwiZGlzcHV0ZWRCb3VuZGFyaWVzIiwibGVuZ3RoIiwiZmlsdGVyZWRDb3VudHJ5S2V5cyIsIm1hcCIsImNvdW50cnlDZW50cm9pZHMiLCJmZWF0dXJlcyIsImMiLCJpbmNsdWRlcyIsInByb3BlcnRpZXMiLCJpc29BbHBoYTIiLCJjZW50cm9pZCIsInR5cGUiLCJnZW9tZXRyeSIsImNvb3JkaW5hdGVzIiwicmVzZXRQb2ludHMiLCJ2b3Jvbm9pQ2VudHJvaWRzIiwiY29uY2F0IiwicmVzZXQiLCJjb25zb2xlIiwibG9nIiwiZml0U2l6ZSIsIm1ha2VSYW5nZUJveCIsInBhdGgiLCJnZW9QYXRoIiwic2VsZWN0QWxsIiwicmVtb3ZlIiwiY291bnRyeUdyb3VwcyIsInNsdWciLCJlbnRlciIsImFwcGVuZCIsIm1lcmdlIiwic29ydGVkQ2VudHJvaWRzIiwic29ydCIsImEiLCJiIiwiYU8iLCJlIiwiYk8iLCJmb3JFYWNoIiwibyIsInNwaWtlQ2VudHJvaWRzIiwiY291bnRyeVZvcm9ub2lDZW50cm9pZHMiLCJnZW9Wb3Jvbm9pIiwicG9seWdvbnMiLCJvbiIsInRpcE9uIiwidGlwT2ZmIiwiZXhpdCIsInRvb2x0aXAiLCJhbm5vdGF0aW9uRGF0YSIsImdldENvdW50cnkiLCJjb3VudHJ5TWV0YSIsImNvdW50cnlHZW8iLCJhbm5vdGF0aW9uTnVtRGF0YSIsInAiLCJ0cmFuc2xhdGlvbnMiLCJhbm5vdGF0aW9uc051bWJlcnMiLCJnZXRQZWFrVGV4dCIsInJlZkJveENvbnRhaW5lciIsImNvbnRleHQiLCJnZXRDb250ZXh0IiwicHJvamVjdGlvblJlZiIsImdlb05hdHVyYWxFYXJ0aDEiLCJ3b0FudGFyY3RpY2EiLCJwYXRoUmVmIiwiY2xlYXJSZWN0IiwiYmVnaW5QYXRoIiwiZmlsbFN0eWxlIiwiZmlsbCIsImFjdGl2ZVdpZHRoIiwiYWN0aXZlUmVnaW9uIiwiY2FsbCIsImRyYWciLCJpbnRlcnJ1cHQiLCJjYWxjWCIsImV2ZW50IiwieCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJzY3JvbGxMZWZ0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInBvcyIsInRhcmdldCIsInZvcm9ub2lQYXRoIiwic2l0ZSIsImZpbmQiLCJyYWlzZSIsImNvdW50cnkiLCJNYXRoIiwicm91bmQiLCJ0b0xvY2FsZVN0cmluZyIsIkNoYXJ0Q29tcG9uZW50Iiwib3B0cyIsImxvbjAiLCJsb24xIiwibGF0MCIsImxhdDEiLCJ0bXAiLCJkbG9uNCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsSUFBTUEsS0FBSyxHQUFHLElBQUlDLDhFQUFKLEVBQWQsQyxDQUNBOztJQUVNQyxhOzs7Ozs7Ozs7Ozs7Ozs7O3VOQUNXO0FBQ2JDLHNCQUFnQixFQUFFLENBREw7QUFFYkMsc0JBQWdCLEVBQUUsU0FGTDtBQUdiQyxnQ0FBMEIsRUFBRSxHQUhmO0FBSWJDLGNBQVEsRUFBRSx3QkFKRztBQUtiQyw2QkFBdUIsRUFBRSwyQkFMWjtBQU1iQyxpQkFBVyxFQUFFLFNBTkE7QUFPYkMsaUJBQVcsRUFBRSxxQkFBQ0MsS0FBRCxFQUFRQyxVQUFSO0FBQUEsZUFBd0JELEtBQUssR0FBR0MsVUFBUixHQUFxQixHQUFyQixHQUEyQixHQUFuRDtBQUFBLE9BUEE7QUFRYkMsU0FBRyxFQUFFLEtBUlE7QUFTYkMsWUFBTSxFQUFFLElBVEs7QUFVYkMsNEJBQXNCLEVBQUU7QUFDdEJDLGdCQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRixF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LENBQUNILElBQUksR0FBRyxJQUFJSyxLQUFaLEVBQW1CRixJQUFuQixDQUpZLEVBS1osQ0FBQ0gsSUFBSSxHQUFHLElBQUlLLEtBQVosRUFBbUJGLElBQW5CLENBTFksRUFNWixDQUFDRixJQUFELEVBQU9FLElBQVAsQ0FOWSxFQU9aLENBQUNGLElBQUQsRUFBT0MsSUFBUCxDQVBZLEVBUVosQ0FBQ0QsSUFBSSxHQUFHSSxLQUFSLEVBQWVILElBQWYsQ0FSWSxFQVNaLENBQUNELElBQUksR0FBRyxJQUFJSSxLQUFaLEVBQW1CSCxJQUFuQixDQVRZLEVBVVosQ0FBQ0QsSUFBSSxHQUFHLElBQUlJLEtBQVosRUFBbUJILElBQW5CLENBVlksRUFXWixDQUFDRixJQUFELEVBQU9FLElBQVAsQ0FYWSxDQUFEO0FBRlIsR0FBUDtBQWdCRDs7QUFDY25MLDRFQUFmIiwiZmlsZSI6Ii4vc3JjL2xpYi9jaGFydC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRvcG9qc29uIGZyb20gJ3RvcG9qc29uLWNsaWVudCc7XG5cbmltcG9ydCBBdGxhc01ldGFkYXRhQ2xpZW50IGZyb20gJ0ByZXV0ZXJzLWdyYXBoaWNzL2dyYXBoaWNzLWF0bGFzLWNsaWVudCc7XG5pbXBvcnQgQ2hhcnRDb21wb25lbnQgZnJvbSAnLi9iYXNlL0NoYXJ0Q29tcG9uZW50JztcbmltcG9ydCBkMyBmcm9tICcuL3V0aWxzL2QzJztcbmltcG9ydCB7IGdlb1Zvcm9ub2kgfSBmcm9tICdkMy1nZW8tdm9yb25vaSc7XG5cbmNvbnN0IEF0bGFzID0gbmV3IEF0bGFzTWV0YWRhdGFDbGllbnQoKTtcbi8vIGltcG9ydCB0b3BvbG9neSBmcm9tICdAcmV1dGVycy1ncmFwaGljcy9ncmFwaGljcy1hdGxhcy1jbGllbnQvdG9wb2pzb24vZ2xvYmFsLjExMG0uanNvbic7XG5cbmNsYXNzIEdsb2JhbFJhdGVNYXAgZXh0ZW5kcyBDaGFydENvbXBvbmVudCB7XG4gIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBtYXBfc3Ryb2tlX3dpZHRoOiAxLFxuICAgIG1hcF9zdHJva2VfY29sb3I6ICcjMmYzNTNmJyxcbiAgICBtYXBfaGlnaGxpZ2h0X3N0cm9rZV93aWR0aDogMS4yLFxuICAgIG1hcF9maWxsOiAncmdiYSgxNTMsMTUzLDE1MywwLjI1KScsXG4gICAgbWFwX3N0cm9rZV9jb2xvcl9hY3RpdmU6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNzUpJyxcbiAgICBzcGlrZV9jb2xvcjogJyNlZWMzMzEnLFxuICAgIGhlaWdodFJhdGlvOiAod2lkdGgsIGJyZWFrcG9pbnQpID0+ICh3aWR0aCA8IGJyZWFrcG9pbnQgPyAwLjggOiAwLjUpLFxuICAgIGdlbzogZmFsc2UsXG4gICAgbG9jYWxlOiAnZW4nLFxuICAgIG1hcF9jdXN0b21fcHJvamVjdGlvbnM6IHtcbiAgICAgIGNsaXBfYm94OiBbWy0xMzAsIDcwXSwgWzE5NCwgLTM5XV0sXG4gICAgICBwcm9qZWN0aW9uOiAnZ2VvTmF0dXJhbEVhcnRoMScsXG4gICAgICBjZW50ZXI6IG51bGwsXG4gICAgICBzY2FsZTogbnVsbCxcbiAgICAgIHJvdGF0ZTogbnVsbCxcbiAgICB9LFxuICAgIGhvdmVyX2dhcDogMTIuNSxcbiAgICBzcGlrZV9oZWlnaHQ6IDM1LFxuICAgIHNwaWtlX3NpemU6IDMuNSxcbiAgICBnZXREYXRhUmFuZ2U6ICh3aWR0aCkgPT4gKHsgbWluOiAwLCBtYXg6IDEgfSksXG4gICAgc3Bpa2Vfc3Ryb2tlX3dpZHRoOiAwLjUsXG4gICAgc3Bpa2VfaGlnaGxpZ2h0X3N0cm9rZV93aWR0aDogMixcbiAgICBzcGlrZV9oaWdobGlnaHRfZmlsbDogdHJ1ZSxcbiAgICBzcGlrZV9jb2xvcl9zY2FsZTogZDMuc2NhbGVUaHJlc2hvbGQoKSAvLyBDYW4gdXNlIGEgc2NhbGUgYXMgYSBwcm9wIVxuICAgICAgLmRvbWFpbihbMC43NSwgMC45XSlcbiAgICAgIC5yYW5nZShbJyNjY2MnLCAnI2Y2OGUyNicsICcjZGUyZDI2J10pLFxuICAgIHNwaWtlX3N0cm9rZV93aWR0aF9zY2FsZTogZDMuc2NhbGVUaHJlc2hvbGQoKSAvLyBDYW4gdXNlIGEgc2NhbGUgYXMgYSBwcm9wIVxuICAgICAgLmRvbWFpbihbMC43NSwgMC45XSlcbiAgICAgIC5yYW5nZShbMC42LCAwLjksIDEuMV0pLFxuICAgIHNwaWtlX2luYWN0aXZlX29wYWNpdHk6IDEsXG4gICAgZGlzcHV0ZWRfZGFzaGFycmF5OiBbNSwgM10sXG4gICAga2V5OiB7XG4gICAgICB0ZXh0OiB7XG4gICAgICAgIG1haW5fdGV4dDogJ0hvdyBjbG9zZSBpcyB0aGUgY3VycmVudCB3ZWVrbHkgYXZlcmFnZSB0byB0aGUgY291bnRyeeKAmXMgcGVhaycsXG4gICAgICAgIHJlZF9wZWFrOiAnPjkwJScsXG4gICAgICAgIG9yYW5nZV9wZWFrOiAnOTAgdG8gNzUlJyxcbiAgICAgICAgd2hpdGVfcGVhazogJzw3NSUnLFxuICAgICAgfSxcbiAgICAgIHdpZHRoOiAxNDAsXG4gICAgfSxcbiAgICBhbm5vdGF0aW9uczoge1xuICAgICAgbmFtZTogW10sXG4gICAgICB2YWx1ZTogW10sXG4gICAgfSxcbiAgICBtb2JpbGU6IHRydWUsXG4gICAgcmVmQm94OiB7XG4gICAgICBoZWlnaHQ6IDkwLFxuICAgICAgd2lkdGg6IDE4MCxcbiAgICAgIGJyZWFrcG9pbnQ6IDkwMCxcbiAgICAgIHVzZVdpZHRoOiAod2lkdGgsIGZhY3RvcikgPT4gKHdpZHRoICogZmFjdG9yKSxcbiAgICAgIGZhY3RvcjogMi4yLFxuICAgIH0sXG4gICAgaW50ZXJhY3Rpb246IHRydWUsXG4gICAgYXRfcGVha190ZXh0OiAnQXQgcGVhaycsXG4gICAgb2ZfcGVha190ZXh0OiAnb2YgcGVhaycsXG4gIH07XG5cbiAgZHJhdygpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5kYXRhKCk7XG4gICAgY29uc3QgcHJvcHMgPSB0aGlzLnByb3BzKCk7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc2VsZWN0aW9uKCkubm9kZSgpO1xuICAgIGxldCB7IHdpZHRoIH0gPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IHJhdGlvID0gcHJvcHMuaGVpZ2h0UmF0aW8od2lkdGgsIHByb3BzLnJlZkJveC5icmVha3BvaW50KVxuICAgIGxldCB1c2VXaWR0aCwgaGVpZ2h0O1xuICAgIGlmICh3aWR0aCA8IHByb3BzLnJlZkJveC5icmVha3BvaW50ICYmIHByb3BzLm1vYmlsZSkge1xuICAgICAgdXNlV2lkdGggPSBwcm9wcy5yZWZCb3gudXNlV2lkdGgod2lkdGgscHJvcHMucmVmQm94LmZhY3Rvcik7XG4gICAgICB0aGlzLnNlbGVjdGlvbigpLmNsYXNzZWQoJ21vYmlsZScsIHRydWUpO1xuICAgICAgaGVpZ2h0ID0gdXNlV2lkdGggKiAwLjU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVzZVdpZHRoID0gd2lkdGg7XG4gICAgICB0aGlzLnNlbGVjdGlvbigpLmNsYXNzZWQoJ21vYmlsZScsIGZhbHNlKTtcbiAgICAgIGhlaWdodCA9IHdpZHRoICogcmF0aW87XG4gICAgfVxuXG4gICAgY29uc3QgeyBtaW46IGZpbHRlck1pbiwgbWF4OiBmaWx0ZXJNYXggfSA9IHByb3BzLmdldERhdGFSYW5nZSh3aWR0aCk7XG4gICAgY29uc3QgZmlsdGVyZWREYXRhID0gZGF0YS5maWx0ZXIoZCA9PiBkLnZhbHVlID49IGZpbHRlck1pbiAmJiBkLnZhbHVlIDw9IGZpbHRlck1heCk7XG5cbiAgICBjb25zdCBzY2FsZVkgPSBkMy5zY2FsZUxpbmVhcigpLnJhbmdlKFswLCBwcm9wcy5zcGlrZV9oZWlnaHRdKS5kb21haW4oWzAsIDFdKTtcbiAgICBjb25zdCBrZXlCb3ggPSB0aGlzLnNlbGVjdGlvbigpXG4gICAgICAuYXBwZW5kU2VsZWN0KCdkaXYua2V5Jyk7XG5cbiAgICBrZXlCb3guYXBwZW5kU2VsZWN0KCdwLmxlZnQtdGV4dC50ZXh0LWlubGluZS5rZXktdGV4dCcpXG4gICAgICAuaHRtbChwcm9wcy5rZXkudGV4dC5tYWluX3RleHQpO1xuXG4gICAgY29uc3Qga2V5U3ZnQ29udGFpbmVyID0ga2V5Qm94LmFwcGVuZFNlbGVjdCgnZGl2LnN2Zy1jb250YWluZXIudGV4dC1pbmxpbmUnKVxuICAgIGNvbnN0IGtleUdhcCA9IHByb3BzLmtleS53aWR0aCAvIDM7XG4gICAgLy8gYWRkIGtleSBib3hcbiAgICBjb25zdCBrZXlTdmcgPSBrZXlTdmdDb250YWluZXIuYXBwZW5kU2VsZWN0KCdzdmcudGV4dC1pbmxpbmUnKVxuICAgICAgLmF0dHIoJ2hlaWdodCcsIHByb3BzLnNwaWtlX2hlaWdodCArIDYpXG4gICAgICAuc3R5bGUoJ2ZpbGwnLCAnbm9uZScpXG4gICAgICAuYXR0cignd2lkdGgnLCBwcm9wcy5rZXkud2lkdGggLSAoa2V5R2FwICogMC4yNykpO1xuXG4gICAga2V5U3ZnLmFwcGVuZFNlbGVjdCgnZGVmcycpXG4gICAgICAuYXBwZW5kU2VsZWN0KCdtYXJrZXIudG9wJylcbiAgICAgIC5hdHRyKCdpZCcsICdhcnJvdy11cCcpXG4gICAgICAuYXR0cignbWFya2VyV2lkdGgnLCAxMilcbiAgICAgIC5hdHRyKCdtYXJrZXJIZWlnaHQnLCAxMClcbiAgICAgIC5hdHRyKCdyZWZZJywgNSlcbiAgICAgIC5hdHRyKCdyZWZYJywgNilcbiAgICAgIC5hdHRyKCdvcmllbnQnLCAnYXV0bycpXG4gICAgICAuYXBwZW5kU2VsZWN0KCdwYXRoLnVwJylcbiAgICAgIC5zdHlsZSgnc3Ryb2tlJywgJ3doaXRlJylcbiAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgMC42KVxuICAgICAgLmF0dHIoJ2QnLCAnTTAgMCBMNiA1IEwwIDEwJyk7XG5cbiAgICBrZXlTdmcuc2VsZWN0KCdkZWZzJylcbiAgICAgIC5hcHBlbmRTZWxlY3QoJ21hcmtlci5kb3duJylcbiAgICAgIC5hdHRyKCdpZCcsICdhcnJvdy1kb3duJylcbiAgICAgIC5hdHRyKCdtYXJrZXJXaWR0aCcsIDEyKVxuICAgICAgLmF0dHIoJ21hcmtlckhlaWdodCcsIDEwKVxuICAgICAgLmF0dHIoJ3JlZlknLCA1KVxuICAgICAgLmF0dHIoJ3JlZlgnLCAwKVxuICAgICAgLmF0dHIoJ29yaWVudCcsICdhdXRvJylcbiAgICAgIC5hcHBlbmRTZWxlY3QoJ3BhdGguZG93bicpXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsICd3aGl0ZScpXG4gICAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsIDAuNilcbiAgICAgIC5hdHRyKCdkJywgJ002IDAgTDAgNSBMNiAxMCcpO1xuXG4gICAgLy8gYWRkIHNwaWtlIDFcbiAgICBrZXlTdmcuYXBwZW5kU2VsZWN0KCdwYXRoLnJlZC1zcGlrZS5oaWdoJylcbiAgICAgIC5zdHlsZSgnc3Ryb2tlJywgcHJvcHMuc3Bpa2VfY29sb3Jfc2NhbGUoMSkpXG4gICAgICAuYXR0cignZCcsIChkKSA9PiB7XG4gICAgICAgIGNvbnN0IG9iaiA9IFtrZXlHYXAgKiAwLjcsIHByb3BzLnNwaWtlX2hlaWdodF07XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc2NhbGVZKDEpO1xuICAgICAgICByZXR1cm4gJ00nICsgKG9ialswXSAtIHByb3BzLnNwaWtlX3NpemUpICsgJyAnICsgb2JqWzFdICsgJyBMJyArIG9ialswXSArICcgJyArIChvYmpbMV0gLSB2YWx1ZSkgKyAnIEwnICsgKG9ialswXSArIHByb3BzLnNwaWtlX3NpemUpICsgJyAnICsgb2JqWzFdICsgJyAnO1xuICAgICAgfSk7XG5cbiAgICBrZXlTdmcuYXBwZW5kU2VsZWN0KCdwYXRoLnJlZC1zcGlrZS5sb3cnKVxuICAgICAgLnN0eWxlKCdzdHJva2UnLCBwcm9wcy5zcGlrZV9jb2xvcl9zY2FsZSgwLjkpKVxuICAgICAgLnN0eWxlKCdmaWxsJyxwcm9wcy5zcGlrZV9jb2xvcl9zY2FsZSgwLjkpKVxuICAgICAgLmF0dHIoJ2QnLCAoZCkgPT4ge1xuICAgICAgICBjb25zdCBvYmogPSBba2V5R2FwICogMC43ICsgcHJvcHMuc3Bpa2Vfc2l6ZSoxLjQsIHByb3BzLnNwaWtlX2hlaWdodF07XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc2NhbGVZKDAuOSk7XG4gICAgICAgIHJldHVybiAnTScgKyAob2JqWzBdIC0gcHJvcHMuc3Bpa2Vfc2l6ZSkgKyAnICcgKyBvYmpbMV0gKyAnIEwnICsgb2JqWzBdICsgJyAnICsgKG9ialsxXSAtIHZhbHVlKSArICcgTCcgKyAob2JqWzBdICsgcHJvcHMuc3Bpa2Vfc2l6ZSkgKyAnICcgKyBvYmpbMV0gKyAnICc7XG4gICAgICB9KTtcblxuICAgIGtleVN2Zy5hcHBlbmRTZWxlY3QoJ3BhdGgub3JhbmdlLXNwaWtlLmhpZ2gnKVxuICAgICAgLnN0eWxlKCdzdHJva2UnLCBwcm9wcy5zcGlrZV9jb2xvcl9zY2FsZSgwLjg5KSlcbiAgICAgIC5hdHRyKCdkJywgKGQsIGkpID0+IHtcbiAgICAgICAgY29uc3Qgb2JqID0gW2tleUdhcCAqIDEuNSwgcHJvcHMuc3Bpa2VfaGVpZ2h0XTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBzY2FsZVkoMC44OSk7XG4gICAgICAgIHJldHVybiAnTScgKyAob2JqWzBdIC0gcHJvcHMuc3Bpa2Vfc2l6ZSkgKyAnICcgKyBvYmpbMV0gKyAnIEwnICsgb2JqWzBdICsgJyAnICsgKG9ialsxXSAtIHZhbHVlKSArICcgTCcgKyAob2JqWzBdICsgcHJvcHMuc3Bpa2Vfc2l6ZSkgKyAnICcgKyBvYmpbMV0gKyAnICc7XG4gICAgICB9KTtcblxuICAgIGtleVN2Zy5hcHBlbmRTZWxlY3QoJ3BhdGgub3JhbmdlLXNwaWtlLmxvdycpXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsIHByb3BzLnNwaWtlX2NvbG9yX3NjYWxlKDAuNzUpKVxuICAgICAgLnN0eWxlKCdmaWxsJyxwcm9wcy5zcGlrZV9jb2xvcl9zY2FsZSgwLjc1KSlcbiAgICAgIC5hdHRyKCdkJywgKGQpID0+IHtcbiAgICAgICAgY29uc3Qgb2JqID0gW2tleUdhcCAqIDEuNStwcm9wcy5zcGlrZV9zaXplKjEuNCwgcHJvcHMuc3Bpa2VfaGVpZ2h0XTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBzY2FsZVkoMC43NSk7XG4gICAgICAgIHJldHVybiAnTScgKyAob2JqWzBdIC0gcHJvcHMuc3Bpa2Vfc2l6ZSkgKyAnICcgKyBvYmpbMV0gKyAnIEwnICsgb2JqWzBdICsgJyAnICsgKG9ialsxXSAtIHZhbHVlKSArICcgTCcgKyAob2JqWzBdICsgcHJvcHMuc3Bpa2Vfc2l6ZSkgKyAnICcgKyBvYmpbMV0gKyAnICc7XG4gICAgICB9KTtcblxuICAgIGtleVN2Zy5hcHBlbmRTZWxlY3QoJ3BhdGgud2hpdGUtc3Bpa2UuaGlnaCcpXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsIHByb3BzLnNwaWtlX2NvbG9yX3NjYWxlKDAuNzQpKVxuICAgICAgLmF0dHIoJ2QnLCAoZCwgaSkgPT4ge1xuICAgICAgICBjb25zdCBvYmogPSBba2V5R2FwICogMi4zLCBwcm9wcy5zcGlrZV9oZWlnaHRdO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHNjYWxlWSgwLjc0KTtcbiAgICAgICAgcmV0dXJuICdNJyArIChvYmpbMF0gLSBwcm9wcy5zcGlrZV9zaXplKSArICcgJyArIG9ialsxXSArICcgTCcgKyBvYmpbMF0gKyAnICcgKyAob2JqWzFdIC0gdmFsdWUpICsgJyBMJyArIChvYmpbMF0gKyBwcm9wcy5zcGlrZV9zaXplKSArICcgJyArIG9ialsxXSArICcgJztcbiAgICAgIH0pO1xuXG4gICAga2V5U3ZnLmFwcGVuZFNlbGVjdCgncGF0aC53aGl0ZS1zcGlrZS5sb3cnKVxuICAgICAgLnN0eWxlKCdzdHJva2UnLCAnI2NjYycpXG4gICAgICAuc3R5bGUoJ2ZpbGwnLCAnI2NjYycpXG4gICAgICAuYXR0cignZCcsIChkLCBpKSA9PiB7XG4gICAgICAgIGNvbnN0IG9iaiA9IFtrZXlHYXAgKiAyLjMrcHJvcHMuc3Bpa2Vfc2l6ZSoxLjQsIHByb3BzLnNwaWtlX2hlaWdodF07XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc2NhbGVZKDApO1xuICAgICAgICByZXR1cm4gJ00nICsgKG9ialswXSAtIHByb3BzLnNwaWtlX3NpemUpICsgJyAnICsgb2JqWzFdICsgJyBMJyArIG9ialswXSArICcgJyArIChvYmpbMV0gLSB2YWx1ZSkgKyAnIEwnICsgKG9ialswXSArIHByb3BzLnNwaWtlX3NpemUpICsgJyAnICsgb2JqWzFdICsgJyAnO1xuICAgICAgfSk7XG5cbiAgICBrZXlTdmcuYXBwZW5kU2VsZWN0KCdsaW5lJylcbiAgICAgIC5zdHlsZSgnc3Ryb2tlJywgJ3doaXRlJylcbiAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgMC43KVxuICAgICAgLmF0dHIoJ3gxJywgMTApXG4gICAgICAuYXR0cigneDInLCAxMClcbiAgICAgIC5hdHRyKCd5MScsIDcpXG4gICAgICAuYXR0cigneTEnLCBwcm9wcy5zcGlrZV9oZWlnaHQpXG4gICAgICAuYXR0cignbWFya2VyLWVuZCcsICd1cmwoI2Fycm93LXVwKScpXG4gICAgICAuYXR0cignbWFya2VyLXN0YXJ0JywgJ3VybCgjYXJyb3ctZG93biknKTtcblxuICAgIGNvbnN0IGJvdHRvbUtleVRleHQgPSBrZXlTdmdDb250YWluZXIuYXBwZW5kU2VsZWN0KCdkaXYuYm90dG9tLXRleHQnKVxuICAgICAgLnN0eWxlKCdwYWRkaW5nLWxlZnQnLCBgJHtrZXlHYXAgKiAwLjR9cHhgKTtcblxuICAgIGJvdHRvbUtleVRleHQuYXBwZW5kU2VsZWN0KCdwLnJlZC10ZXh0LmtleS10ZXh0LnRleHQtaW5saW5lJylcbiAgICAgIC5zdHlsZSgnd2lkdGgnLCBgJHtrZXlHYXAgKiAwLjh9cHhgKVxuICAgICAgLmh0bWwocHJvcHMua2V5LnRleHQucmVkX3BlYWspO1xuICAgIGJvdHRvbUtleVRleHQuYXBwZW5kU2VsZWN0KCdwLm9yYW5nZS10ZXh0LmtleS10ZXh0LnRleHQtaW5saW5lJylcbiAgICAgIC5zdHlsZSgnd2lkdGgnLCBgJHtrZXlHYXAgKiAwLjh9cHhgKVxuICAgICAgLmh0bWwocHJvcHMua2V5LnRleHQub3JhbmdlX3BlYWspO1xuICAgIGJvdHRvbUtleVRleHQuYXBwZW5kU2VsZWN0KCdwLndoaXRlLXRleHQua2V5LXRleHQudGV4dC1pbmxpbmUnKVxuICAgICAgLnN0eWxlKCd3aWR0aCcsIGAke2tleUdhcCAqIDAuOH1weGApXG4gICAgICAuaHRtbChwcm9wcy5rZXkudGV4dC53aGl0ZV9wZWFrKTtcblxuICAgIC8vIFNWRyBiZWdpbnMgaGVyZVxuICAgIGNvbnN0IHN2ZyA9IHRoaXMuc2VsZWN0aW9uKClcbiAgICAgIC5hcHBlbmRTZWxlY3QoJ2Rpdi5jaGFydC1jb250YWluZXItZGl2JylcbiAgICAgIC5hdHRyKCdpZCcsICdtYXAtY29udGFpbmVyJylcbiAgICAgIC5zdHlsZSgnb3ZlcmZsb3cteCcsICdzY3JvbGwnKVxuICAgICAgLmFwcGVuZFNlbGVjdCgnc3ZnLmNoYXJ0JykgLy8gc2VlIGRvY3MgaW4gLi91dGlscy9kMy5qc1xuICAgICAgLmF0dHIoJ3dpZHRoJywgdXNlV2lkdGgpXG4gICAgICAuYXR0cignaGVpZ2h0JywgaGVpZ2h0KTtcblxuICAgIGNvbnN0IGcgPSBzdmcuYXBwZW5kU2VsZWN0KCdnJyk7XG5cbiAgICBpZiAoIWQzW3Byb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMucHJvamVjdGlvbl0pIHtcbiAgICAgIHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMucHJvamVjdGlvbiA9ICdnZW9OYXR1cmFsRWFydGgxJztcbiAgICB9XG5cbiAgICBjb25zdCBwcm9qZWN0aW9uID0gZDNbcHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5wcm9qZWN0aW9uXSgpO1xuICAgIGNvbnN0IGNvdW50cmllcyA9IHRvcG9qc29uLmZlYXR1cmUocHJvcHMuZ2VvLCBwcm9wcy5nZW8ub2JqZWN0cy5jb3VudHJpZXMpO1xuICAgIGxldCBkaXNwdXRlZDtcbiAgICBpZiAocHJvcHMuZ2VvLm9iamVjdHMuZGlzcHV0ZWRCb3VuZGFyaWVzKSB7XG4gICAgICBkaXNwdXRlZCA9IHRvcG9qc29uLm1lc2gocHJvcHMuZ2VvLCBwcm9wcy5nZW8ub2JqZWN0cy5kaXNwdXRlZEJvdW5kYXJpZXMpOyAgXG4gICAgfVxuXG4gICAgaWYgKHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMuY2VudGVyICYmIHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMuY2VudGVyLmxlbmd0aCA9PT0gMikge1xuICAgICAgcHJvamVjdGlvbi5jZW50ZXIocHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5jZW50ZXIpO1xuICAgIH1cblxuICAgIGlmIChwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLnJvdGF0ZSAmJiBwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLnJvdGF0ZS5sZW5ndGggPT09IDIpIHtcbiAgICAgIHByb2plY3Rpb24ucm90YXRlKHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMucm90YXRlKTtcbiAgICB9XG5cbiAgICBjb25zdCBmaWx0ZXJlZENvdW50cnlLZXlzID0gZmlsdGVyZWREYXRhLm1hcChkID0+IGQua2V5KTtcbiAgICBjb25zdCBjb3VudHJ5Q2VudHJvaWRzID0gY291bnRyaWVzLmZlYXR1cmVzXG4gICAgICAuZmlsdGVyKGMgPT4gZmlsdGVyZWRDb3VudHJ5S2V5cy5pbmNsdWRlcyhjLnByb3BlcnRpZXMuaXNvQWxwaGEyKSlcbiAgICAgIC5maWx0ZXIoYyA9PiBjLnByb3BlcnRpZXMuY2VudHJvaWQubGVuZ3RoPT0yICYmIGMucHJvcGVydGllcy5jZW50cm9pZFswXSAmJiBjLnByb3BlcnRpZXMuY2VudHJvaWRbMV0pXG4gICAgICAubWFwKCh7IHByb3BlcnRpZXMgfSkgPT4gKHtcbiAgICAgICAgdHlwZTogJ0ZlYXR1cmUnLFxuICAgICAgICBwcm9wZXJ0aWVzLFxuICAgICAgICBnZW9tZXRyeToge1xuICAgICAgICAgIHR5cGU6ICdQb2ludCcsXG4gICAgICAgICAgY29vcmRpbmF0ZXM6IHByb3BlcnRpZXMuY2VudHJvaWQsXG4gICAgICAgIH0sXG4gICAgICB9KSk7XG5cbiAgICAvLyBBZGRpbmcgc29tZSBwb2ludHMgaW4gdGhlIG9jZWFuIHRvIGNyZWF0ZSB2b3Jvbm9pIHNwYWNlcyB0aGF0IHdpbGxcbiAgICAvLyByZXNldCB0aGUgbWFwLCBzbyBhcyB5b3VyIGN1cnNvciB0cmFjZXMgbGFuZCBtYXNzZXMsIHlvdSBnZXQgaGlnaGxpZ2h0cyxcbiAgICAvLyBidXQgaW4gdGhlIG9jZWFuIHlvdSBjYW4gc2VlIHRoZSB3aG9sZSB3b3JsZCBwaWN0dXJlLi4uXG4gICAgY29uc3QgcmVzZXRQb2ludHMgPSBbXG4gICAgICBbLTQwLjI0ODEwOCwgMzguNjUzNzg4XSwgLy8gTm9ydGggQXRsYW50aWNcbiAgICAgIFstMjkuODAwMDE4LCAxNC41MzYyMjBdLCAvLyBDZW50cmFsIEF0bGFudGljXG4gICAgICBbLTE1LjQ4NTU0OCwgLTEyLjk0MTY0OF0sIC8vIFNvdXRoIEF0bGFudGljXG4gICAgICBbLTE3NC44MDg2NTksIDM1Ljg1NjEyN10sIC8vIE5vcnRoIFBhY2lmaWNcbiAgICAgIFstMTE3LjMyNDQxNCwgLTExLjEzMDgyMV0sIC8vIFNvdXRoIFBhY2lmaWNcbiAgICAgIFstMTczLjAzOTEzMSwgLTQ0LjkyMDY5N10sIC8vIFNvdXRod2VzdCBwYWNpZmljXG4gICAgICBbNjQuNDA3MDI0LCA1LjA0NTgxNV0sIC8vIE5vcnRoIEluZGlhblxuICAgICAgWzc1LjU2OTEyOCwgLTMxLjY5MTkzOV0sIC8vIFNvdXRoIEluZGlhblxuICAgICAgWy01Ljc4MzI2NiwgLTgzLjYwODA3N10sIC8vIEFudGFyY3RpY2FcbiAgICBdO1xuICAgIGNvbnN0IHZvcm9ub2lDZW50cm9pZHMgPSBjb3VudHJ5Q2VudHJvaWRzLmNvbmNhdChyZXNldFBvaW50cy5tYXAoY2VudHJvaWQgPT4gKHtcbiAgICAgIHR5cGU6ICdGZWF0dXJlJyxcbiAgICAgIHByb3BlcnRpZXM6IHsgcmVzZXQ6IHRydWUgfSxcbiAgICAgIGdlb21ldHJ5OiB7XG4gICAgICAgIHR5cGU6ICdQb2ludCcsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBjZW50cm9pZCxcbiAgICAgIH0sXG4gICAgfSkpKTtcblxuICAgIGlmIChwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLmNsaXBfYm94ICYmIChwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLmNsaXBfYm94Lmxlbmd0aCA9PT0gMiAmJiBwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLmNsaXBfYm94WzBdLmxlbmd0aCA9PT0gMiAmJiBwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLmNsaXBfYm94WzFdLmxlbmd0aCA9PT0gMikpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdjbGlwcGluZyEgOiknKTtcbiAgICAgIHByb2plY3Rpb24uZml0U2l6ZShbdXNlV2lkdGgsIGhlaWdodF0sIG1ha2VSYW5nZUJveChwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLmNsaXBfYm94KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKCdjYW50IGNsaXAgOignKTtcbiAgICAgIHByb2plY3Rpb24uZml0U2l6ZShbdXNlV2lkdGgsIGhlaWdodF0sIGNvdW50cmllcyk7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMuc2NhbGUpIHtcbiAgICAgIHByb2plY3Rpb24uc2NhbGUocHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5zY2FsZSk7XG4gICAgfVxuXG4gICAgY29uc3QgcGF0aCA9IGQzLmdlb1BhdGgoKS5wcm9qZWN0aW9uKHByb2plY3Rpb24pO1xuICAgIHN2Zy5zZWxlY3RBbGwoJy5jb3VudHJ5LC5kaXNwdXRlZCwuY2VudHJvaWQnKS5yZW1vdmUoKTtcblxuICAgIGNvbnN0IGNvdW50cnlHcm91cHMgPSBnLmFwcGVuZFNlbGVjdCgnZy5jb3VudHJpZXMnKVxuICAgICAgLnN0eWxlKCdwb2ludGVyLWV2ZW50cycsICdub25lJylcbiAgICAgIC5zdHlsZSgnZmlsbCcsIHByb3BzLm1hcF9maWxsKVxuICAgICAgLnNlbGVjdEFsbCgncGF0aC5jb3VudHJ5JylcbiAgICAgIC5kYXRhKGNvdW50cmllcy5mZWF0dXJlcy5maWx0ZXIoZCA9PiBkLnByb3BlcnRpZXMuc2x1ZyAhPT0gJ2FudGFyY3RpY2EnKSwgZCA9PiBkLnByb3BlcnRpZXMuc2x1Zyk7XG5cbiAgICBjb3VudHJ5R3JvdXBzXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmFwcGVuZCgncGF0aCcpXG4gICAgICAuYXR0cignY2xhc3MnLCBkID0+IGBjb3VudHJ5IGMtJHtkLnByb3BlcnRpZXMuc2x1Z30gbGV2ZWwtMGApXG4gICAgICAubWVyZ2UoY291bnRyeUdyb3VwcylcbiAgICAgIC5zdHlsZSgnc3Ryb2tlJywgcHJvcHMubWFwX3N0cm9rZV9jb2xvcilcbiAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgcHJvcHMubWFwX3N0cm9rZV93aWR0aClcbiAgICAgIC5hdHRyKCdkJywgcGF0aCk7XG5cbiAgICBpZiAoZGlzcHV0ZWQpIHtcbiAgICAgIGcuYXBwZW5kU2VsZWN0KCdwYXRoLmRpc3B1dGVkJylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2Rpc3B1dGVkIGxldmVsLTAnKVxuICAgICAgICAuc3R5bGUoJ3BvaW50ZXItZXZlbnRzJywgJ25vbmUnKVxuICAgICAgICAuc3R5bGUoJ3N0cm9rZScsIHByb3BzLm1hcF9zdHJva2VfY29sb3IpXG4gICAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgcHJvcHMubWFwX3N0cm9rZV93aWR0aClcbiAgICAgICAgLnN0eWxlKCdmaWxsJywgJ25vbmUnKVxuICAgICAgICAuc3R5bGUoJ3N0cm9rZS1kYXNoYXJyYXknLCBwcm9wcy5kaXNwdXRlZF9kYXNoYXJyYXkpXG4gICAgICAgIC5hdHRyKCdkJywgcGF0aChkaXNwdXRlZCkpO1xuICAgIH1cblxuICAgIGNvbnN0IHNvcnRlZENlbnRyb2lkcyA9IGNvdW50cnlDZW50cm9pZHMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgY29uc3QgYU8gPSBmaWx0ZXJlZERhdGEuZmlsdGVyKGUgPT4gYS5wcm9wZXJ0aWVzLmlzb0FscGhhMiA9PT0gZS5rZXkpWzBdO1xuICAgICAgY29uc3QgYk8gPSBmaWx0ZXJlZERhdGEuZmlsdGVyKGUgPT4gYi5wcm9wZXJ0aWVzLmlzb0FscGhhMiA9PT0gZS5rZXkpWzBdO1xuICAgICAgcmV0dXJuIGFPLnZhbHVlIC0gYk8udmFsdWU7XG4gICAgfSk7XG5cbiAgICBzb3J0ZWRDZW50cm9pZHMuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgY29uc3QgbyA9IGZpbHRlcmVkRGF0YS5maWx0ZXIoZSA9PiBkLnByb3BlcnRpZXMuaXNvQWxwaGEyID09PSBlLmtleSlbMF07XG4gICAgICBpZiAobykge1xuICAgICAgICBkLnZhbHVlID0gby52YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IHNwaWtlQ2VudHJvaWRzID0gZy5hcHBlbmRTZWxlY3QoJ2cuc3Bpa2UtbGF5ZXInKVxuICAgICAgLnN0eWxlKCdwb2ludGVyLWV2ZW50cycsICdub25lJylcbiAgICAgIC5zZWxlY3RBbGwoJ3BhdGguY2VudHJvaWQnKVxuICAgICAgLmRhdGEoc29ydGVkQ2VudHJvaWRzKTtcblxuICAgIHNwaWtlQ2VudHJvaWRzLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgZCA9PiBkLnByb3BlcnRpZXMuc2x1ZyArICcgY2VudHJvaWQnKVxuICAgICAgLm1lcmdlKHNwaWtlQ2VudHJvaWRzKVxuICAgICAgLmF0dHIoJ2QnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHByb2plY3Rpb24oZC5wcm9wZXJ0aWVzLmNlbnRyb2lkKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBzY2FsZVkoZC52YWx1ZSk7XG4gICAgICAgIHJldHVybiAnTScgKyAob2JqWzBdIC0gcHJvcHMuc3Bpa2Vfc2l6ZSkgKyAnICcgKyBvYmpbMV0gKyAnIEwnICsgb2JqWzBdICsgJyAnICsgKG9ialsxXSAtIHZhbHVlKSArICcgTCcgKyAob2JqWzBdICsgcHJvcHMuc3Bpa2Vfc2l6ZSkgKyAnICcgKyBvYmpbMV0gKyAnICc7XG4gICAgICB9KVxuICAgICAgLnN0eWxlKCdmaWxsJywgJ25vbmUnKVxuICAgICAgLnN0eWxlKCdzdHJva2UnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBkLnZhbHVlID8gcHJvcHMuc3Bpa2VfY29sb3Jfc2NhbGUoZC52YWx1ZSkgOiAnI2NjYyc7XG4gICAgICB9KVxuICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBkLnZhbHVlID8gcHJvcHMuc3Bpa2Vfc3Ryb2tlX3dpZHRoX3NjYWxlKGQudmFsdWUpIDogMC41O1xuICAgICAgfSk7XG5cbiAgICBjb25zdCBjb3VudHJ5Vm9yb25vaUNlbnRyb2lkcyA9IGcuYXBwZW5kU2VsZWN0KCdnLnZvcm9ub2knKVxuICAgICAgLnN0eWxlKCdmaWxsJywgJ25vbmUnKVxuICAgICAgLnN0eWxlKCdjdXJzb3InLCBwcm9wcy5pbnRlcmFjdGlvbj8nY3Jvc3NoYWlyJzonZGVmYXVsdCcpXG4gICAgICAuc3R5bGUoJ3BvaW50ZXItZXZlbnRzJywgJ2FsbCcpXG4gICAgICAuc2VsZWN0QWxsKCdwYXRoLnZvcm9ub2knKVxuICAgICAgLmRhdGEoZ2VvVm9yb25vaSgpLnBvbHlnb25zKHZvcm9ub2lDZW50cm9pZHMpLmZlYXR1cmVzKTtcblxuICAgIGNvdW50cnlWb3Jvbm9pQ2VudHJvaWRzLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgZCA9PiAndm9yb25vaScpXG4gICAgICAubWVyZ2UoY291bnRyeVZvcm9ub2lDZW50cm9pZHMpXG4gICAgICAuYXR0cignZCcsIHBhdGgpXG4gICAgICAub24oJ21vdXNlb3ZlcicsIGQgPT4ge1xuICAgICAgICBpZiAocHJvcHMuaW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICB0aXBPbihkKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5vbignbW91c2VvdXQnLCBkID0+IHtcbiAgICAgICAgaWYgKHByb3BzLmludGVyYWN0aW9uKSB7XG4gICAgICAgICAgdGlwT2ZmKGQpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIGNvdW50cnlWb3Jvbm9pQ2VudHJvaWRzLmV4aXQoKVxuICAgICAgLnJlbW92ZSgpO1xuXG4gICAgY29uc3QgdG9vbHRpcCA9IGcuYXBwZW5kU2VsZWN0KCdnLnRleHQtZ3JvdXAnKVxuICAgICAgLnN0eWxlKCdwb2ludGVyLWV2ZW50cycsICdub25lJylcbiAgICAgIC5hcHBlbmQoJ3RleHQnKTtcblxuICAgIGxldCBhbm5vdGF0aW9uRGF0YSA9IHByb3BzLmFubm90YXRpb25zLm5hbWUubWFwKChkKSA9PiB7XG4gICAgICBjb25zdCBjID0gQXRsYXMuZ2V0Q291bnRyeShkKTtcbiAgICAgIGNvbnN0IGdlbyA9IGNvdW50cnlDZW50cm9pZHMuZmlsdGVyKGUgPT4gZS5wcm9wZXJ0aWVzLmlzb0FscGhhMiA9PT0gYy5pc29BbHBoYTIpWzBdXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb3VudHJ5TWV0YTogYyxcbiAgICAgICAgY291bnRyeUdlbzogZ2VvLFxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIGxldCBhbm5vdGF0aW9uTnVtRGF0YSA9IHByb3BzLmFubm90YXRpb25zLnZhbHVlLm1hcCgoZCkgPT4ge1xuICAgICAgY29uc3QgYyA9IEF0bGFzLmdldENvdW50cnkoZCk7XG4gICAgICBjb25zdCBnZW8gPSBzb3J0ZWRDZW50cm9pZHMuZmlsdGVyKGUgPT4gZS5wcm9wZXJ0aWVzLmlzb0FscGhhMiA9PT0gYy5pc29BbHBoYTIpWzBdXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb3VudHJ5TWV0YTogYyxcbiAgICAgICAgY291bnRyeUdlbzogZ2VvLFxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIGFubm90YXRpb25EYXRhID0gYW5ub3RhdGlvbkRhdGEuZmlsdGVyKGQgPT4gZC5jb3VudHJ5TWV0YSAmJiBkLmNvdW50cnlHZW8pXG4gICAgYW5ub3RhdGlvbk51bURhdGEgPSBhbm5vdGF0aW9uTnVtRGF0YS5maWx0ZXIoZCA9PiBkLmNvdW50cnlNZXRhICYmIGQuY291bnRyeUdlbylcblxuICAgIGNvbnN0IGFubm90YXRpb25zID0gZy5hcHBlbmRTZWxlY3QoJ2cubmFtZS1hbm5vdGF0aW9ucycpXG4gICAgICAuc3R5bGUoJ3BvaW50ZXItZXZlbnRzJywgJ25vbmUnKVxuICAgICAgLnNlbGVjdEFsbCgndGV4dC5hbm5vdGF0aW9uJylcbiAgICAgIC5kYXRhKGFubm90YXRpb25EYXRhLCBkID0+IGQuY291bnRyeU1ldGEuaXNvQWxwaGEyKTtcblxuICAgIGFubm90YXRpb25zLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2Fubm90YXRpb24nKVxuICAgICAgLm1lcmdlKGFubm90YXRpb25zKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIChkKSA9PiB7XG4gICAgICAgIGNvbnN0IHAgPSBwcm9qZWN0aW9uKGQuY291bnRyeUdlby5nZW9tZXRyeS5jb29yZGluYXRlcyk7XG4gICAgICAgIHJldHVybiBgdHJhbnNsYXRlKCR7cFswXX0sJHtwWzFdICsgcHJvcHMuaG92ZXJfZ2FwfSlgO1xuICAgICAgfSlcbiAgICAgIC50ZXh0KChkKSA9PiB7XG4gICAgICAgIHJldHVybiBkLmNvdW50cnlNZXRhLnRyYW5zbGF0aW9uc1twcm9wcy5sb2NhbGVdO1xuICAgICAgfSk7XG5cbiAgICBhbm5vdGF0aW9ucy5leGl0KClcbiAgICAgIC5yZW1vdmUoKTtcblxuICAgIGNvbnN0IGFubm90YXRpb25zTnVtYmVycyA9IGcuYXBwZW5kU2VsZWN0KCdnLm51bWJlci1hbm5vdGF0aW9ucycpXG4gICAgICAuc3R5bGUoJ3BvaW50ZXItZXZlbnRzJywgJ25vbmUnKVxuICAgICAgLnNlbGVjdEFsbCgndGV4dC5hbm5vdGF0aW9uJylcbiAgICAgIC5kYXRhKGFubm90YXRpb25OdW1EYXRhKTtcblxuICAgIGFubm90YXRpb25zTnVtYmVycy5lbnRlcigpXG4gICAgICAuYXBwZW5kKCd0ZXh0JylcbiAgICAgIC5hdHRyKCdjbGFzcycsICdhbm5vdGF0aW9uJylcbiAgICAgIC5tZXJnZShhbm5vdGF0aW9uc051bWJlcnMpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgKGQpID0+IHtcbiAgICAgICAgY29uc3QgcCA9IHByb2plY3Rpb24oZC5jb3VudHJ5R2VvLmdlb21ldHJ5LmNvb3JkaW5hdGVzKTtcbiAgICAgICAgcmV0dXJuIGB0cmFuc2xhdGUoJHtwWzBdfSwke3BbMV0gKyBwcm9wcy5ob3Zlcl9nYXB9KWA7XG4gICAgICB9KVxuICAgICAgLmh0bWwoKGQpID0+IHtcbiAgICAgICAgcmV0dXJuIGdldFBlYWtUZXh0KGQuY291bnRyeUdlby52YWx1ZSk7XG4gICAgICB9KTtcblxuICAgIGFubm90YXRpb25zTnVtYmVycy5leGl0KClcbiAgICAgIC5yZW1vdmUoKTtcblxuICAgIGlmIChwcm9wcy5tb2JpbGUgJiYgd2lkdGggPCBwcm9wcy5yZWZCb3guYnJlYWtwb2ludCkge1xuICAgICAgLy8gUmVmIGJveCBhdCB0aGUgYm90dG9tIGZvciBtb2JpbGUgc3RhcnRzIGhlcmVcblxuICAgICAgY29uc3QgcmVmQm94Q29udGFpbmVyID0gdGhpcy5zZWxlY3Rpb24oKVxuICAgICAgICAuYXBwZW5kU2VsZWN0KCdkaXYucmVmLWJveCcpXG4gICAgICAgIC5jbGFzc2VkKCdoaWRlJywgZmFsc2UpXG4gICAgICAgIC5zdHlsZSgndGV4dC1hbGlnbicsICdjZW50ZXInKVxuICAgICAgICAuc3R5bGUoJ3dpZHRoJywgYCR7cHJvcHMucmVmQm94LndpZHRofXB4YClcbiAgICAgICAgLnN0eWxlKCdoZWlnaHQnLCBgJHtwcm9wcy5yZWZCb3guaGVpZ2h0fXB4YCk7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlZkJveCA9IHJlZkJveENvbnRhaW5lci5hcHBlbmRTZWxlY3QoJ2NhbnZhcycpXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIHByb3BzLnJlZkJveC53aWR0aClcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHByb3BzLnJlZkJveC5oZWlnaHQpO1xuXG4gICAgICBjb25zdCBjb250ZXh0ID0gcmVmQm94Lm5vZGUoKS5nZXRDb250ZXh0KCcyZCcpO1xuXG4gICAgICBjb25zdCBwcm9qZWN0aW9uUmVmID0gZDMuZ2VvTmF0dXJhbEVhcnRoMSgpO1xuXG4gICAgICBpZiAocHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5jbGlwX2JveCAmJiAocHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5jbGlwX2JveC5sZW5ndGggPT09IDIgJiYgcHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5jbGlwX2JveFswXS5sZW5ndGggPT09IDIgJiYgcHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5jbGlwX2JveFsxXS5sZW5ndGggPT09IDIpKSB7XG4gICAgICAgIHByb2plY3Rpb25SZWYuZml0U2l6ZShbcHJvcHMucmVmQm94LndpZHRoLCBwcm9wcy5yZWZCb3guaGVpZ2h0XSwgbWFrZVJhbmdlQm94KHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMuY2xpcF9ib3gpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2plY3Rpb25SZWYuZml0U2l6ZShbcHJvcHMucmVmQm94LndpZHRoLCBwcm9wcy5yZWZCb3guaGVpZ2h0XSwgY291bnRyaWVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLnNjYWxlKSB7XG4gICAgICAgIHByb2plY3Rpb25SZWYuc2NhbGUocHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5zY2FsZSk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5jZW50ZXIgJiYgcHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5jZW50ZXIubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIHByb2plY3Rpb25SZWYuY2VudGVyKHByb3BzLm1hcF9jdXN0b21fcHJvamVjdGlvbnMuY2VudGVyKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLnJvdGF0ZSAmJiBwcm9wcy5tYXBfY3VzdG9tX3Byb2plY3Rpb25zLnJvdGF0ZS5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgcHJvamVjdGlvblJlZi5yb3RhdGUocHJvcHMubWFwX2N1c3RvbV9wcm9qZWN0aW9ucy5yb3RhdGUpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB3b0FudGFyY3RpY2EgPSB7XG4gICAgICAgIHR5cGU6IGNvdW50cmllcy50eXBlLFxuICAgICAgICBmZWF0dXJlczogY291bnRyaWVzLmZlYXR1cmVzLmZpbHRlcihlID0+IGUucHJvcGVydGllcy5zbHVnICE9PSAnYW50YXJjdGljYScpLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgcGF0aFJlZiA9IGQzLmdlb1BhdGgocHJvamVjdGlvblJlZiwgY29udGV4dCk7XG4gICAgICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCBwcm9wcy5yZWZCb3gud2lkdGgsIHByb3BzLnJlZkJveC5oZWlnaHQpO1xuICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgIHBhdGhSZWYod29BbnRhcmN0aWNhKTtcbiAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gcHJvcHMubWFwX2ZpbGw7XG4gICAgICBjb250ZXh0LmZpbGwoKTtcblxuICAgICAgY29uc3QgYWN0aXZlV2lkdGggPSB3aWR0aCAvIHVzZVdpZHRoICogcHJvcHMucmVmQm94LndpZHRoO1xuXG4gICAgICBjb25zdCBhY3RpdmVSZWdpb24gPSByZWZCb3hDb250YWluZXIuYXBwZW5kU2VsZWN0KCdkaXYnKS5hdHRyKCdjbGFzcycsICdhY3RpdmUtcmVnaW9uJylcbiAgICAgICAgLnN0eWxlKCd3aWR0aCcsIGAke2FjdGl2ZVdpZHRofXB4YClcbiAgICAgICAgLnN0eWxlKCdoZWlnaHQnLCBgJHtwcm9wcy5yZWZCb3guaGVpZ2h0fXB4YClcbiAgICAgICAgLnN0eWxlKCdsZWZ0JywgYCR7cHJvcHMucmVmQm94LmhlaWdodCAvIDIgLSBhY3RpdmVXaWR0aCAvIDJ9cHhgKVxuICAgICAgICAuY2FsbChkMy5kcmFnKClcbiAgICAgICAgICAub24oJ3N0YXJ0LmludGVycnVwdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYWN0aXZlUmVnaW9uLmludGVycnVwdCgpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLm9uKCdzdGFydCBkcmFnJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsZXQgY2FsY1ggPSBkMy5ldmVudC54IC0gKGFjdGl2ZVdpZHRoIC8gMik7XG4gICAgICAgICAgICBpZiAoZDMuZXZlbnQueCA8PSBhY3RpdmVXaWR0aCAvIDIpIHtcbiAgICAgICAgICAgICAgY2FsY1ggPSAwO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChkMy5ldmVudC54ID49IChwcm9wcy5yZWZCb3gud2lkdGggLSBhY3RpdmVXaWR0aC8yKSkge1xuICAgICAgICAgICAgICBjYWxjWCA9IHByb3BzLnJlZkJveC53aWR0aCAtIGFjdGl2ZVdpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWN0aXZlUmVnaW9uLnN0eWxlKCdsZWZ0JywgY2FsY1ggKyAncHgnKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXAtY29udGFpbmVyJykuc2Nyb2xsTGVmdCA9IGNhbGNYL3Byb3BzLnJlZkJveC53aWR0aCp1c2VXaWR0aFxuICAgICAgICAgIH0pKTtcblxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcC1jb250YWluZXInKVxuICAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIGNvbnN0IHBvcyA9IChkLnRhcmdldC5zY3JvbGxMZWZ0KVxuICAgICAgICAgIGFjdGl2ZVJlZ2lvbi5zdHlsZSgnbGVmdCcsIHBvcy91c2VXaWR0aCpwcm9wcy5yZWZCb3gud2lkdGggKyAncHgnKTtcbiAgICAgICAgfSk7XG4gICAgICAvLyBSZWZib3ggZW5kcyBoZXJlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VsZWN0aW9uKCkuc2VsZWN0KCcucmVmLWJveCcpLmNsYXNzZWQoJ2hpZGUnLCB0cnVlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0aXBPbih2b3Jvbm9pUGF0aCkge1xuICAgICAgY29uc3QgeyBwcm9wZXJ0aWVzIH0gPSB2b3Jvbm9pUGF0aC5wcm9wZXJ0aWVzLnNpdGU7XG4gICAgICBpZiAocHJvcGVydGllcy5yZXNldCkgcmV0dXJuO1xuICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gZmlsdGVyZWREYXRhLmZpbmQoZSA9PiBwcm9wZXJ0aWVzLmlzb0FscGhhMiA9PT0gZS5rZXkpO1xuXG4gICAgICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSBmaWx0ZXJNaW4pIHJldHVybjtcbiAgICAgIGcuc2VsZWN0QWxsKCdwYXRoLmNlbnRyb2lkJylcbiAgICAgICAgLnN0eWxlKCdmaWxsJywgJ25vbmUnKVxuICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCBwcm9wcy5zcGlrZV9pbmFjdGl2ZV9vcGFjaXR5KTtcblxuICAgICAgZy5zZWxlY3RBbGwoJy5uYW1lLWFubm90YXRpb25zLC5udW1iZXItYW5ub3RhdGlvbnMnKVxuICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCAwKTtcblxuICAgICAgZy5zZWxlY3RBbGwoYHBhdGguY2VudHJvaWQuJHtwcm9wZXJ0aWVzLnNsdWd9YClcbiAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMSlcbiAgICAgICAgLnN0eWxlKCdmaWxsJywgKGQpID0+IHtcbiAgICAgICAgICByZXR1cm4gZC52YWx1ZSA/IHByb3BzLnNwaWtlX2NvbG9yX3NjYWxlKGQudmFsdWUpIDogbnVsbDtcbiAgICAgICAgfSlcbiAgICAgICAgLmNsYXNzZWQoJ2FjdGl2ZScsIHRydWUpXG4gICAgICAgIC5yYWlzZSgpO1xuXG4gICAgICB0b29sdGlwXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgY29uc3QgbyA9IHByb2plY3Rpb24ocHJvcGVydGllcy5jZW50cm9pZCk7XG4gICAgICAgICAgcmV0dXJuIGB0cmFuc2xhdGUoJHtvWzBdfSwke29bMV0gKyBwcm9wcy5ob3Zlcl9nYXB9KWA7XG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZSgndGV4dC1hbmNob3InLCAnbWlkZGxlJylcbiAgICAgICAgLmh0bWwoZCA9PiBgXG4gICAgICAgICAgPHRzcGFuIHg9XCIwXCIgeT1cIjBcIj4ke3Byb3BlcnRpZXMudHJhbnNsYXRpb25zW3Byb3BzLmxvY2FsZV19PC90c3Bhbj5cbiAgICAgICAgICAke2dldFBlYWtUZXh0KHZhbHVlKX1gKTtcblxuICAgICAgZy5zZWxlY3RBbGwoYC5jb3VudHJ5LmMtJHtwcm9wZXJ0aWVzLnNsdWd9YClcbiAgICAgICAgLmNsYXNzZWQoJ2FjdGl2ZScsIHRydWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRpcE9mZih2b3Jvbm9pUGF0aCkge1xuXG4gICAgICBjb25zdCB7IHByb3BlcnRpZXMgfSA9IHZvcm9ub2lQYXRoLnByb3BlcnRpZXMuc2l0ZTtcbiAgICAgIGNvbnN0IGNvdW50cnkgPSBnLnNlbGVjdEFsbChgLmNvdW50cnkuYy0ke3Byb3BlcnRpZXMuc2x1Z31gKTtcblxuICAgICAgZy5zZWxlY3RBbGwoJ3BhdGguY2VudHJvaWQnKS5zdHlsZSgnb3BhY2l0eScsIDEpXG4gICAgICAgIC5jbGFzc2VkKCdhY3RpdmUnLCBmYWxzZSlcbiAgICAgICAgLnN0eWxlKCdmaWxsJywgJ25vbmUnKTtcblxuICAgICAgZy5zZWxlY3RBbGwoJy5uYW1lLWFubm90YXRpb25zLC5udW1iZXItYW5ub3RhdGlvbnMnKVxuICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCAxKTtcblxuICAgICAgdG9vbHRpcC5odG1sKCcnKTtcblxuICAgICAgY291bnRyeS5jbGFzc2VkKCdhY3RpdmUnLCBmYWxzZSlcbiAgICAgICAgLnN0eWxlKCdzdHJva2UnLCBwcm9wcy5tYXBfc3Ryb2tlX2NvbG9yKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQZWFrVGV4dCh2YWx1ZSkge1xuICAgICAgdmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlICogMTAwKTtcbiAgICAgIGlmICh2YWx1ZSA8IDEwMCAmJiB2YWx1ZSA+PSAxKSB7XG4gICAgICAgIHJldHVybiBgPHRzcGFuIGR5PVwiMWVtXCIgeD1cIjBcIj4ke3ZhbHVlLnRvTG9jYWxlU3RyaW5nKHByb3BzLmxvY2FsZSl9JTwvdHNwYW4+IDx0c3BhbiBjbGFzcz1cInNtYWxsZXJcIj4ke3Byb3BzLm9mX3BlYWtfdGV4dH08L3RzcGFuPmBcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPCAxKSB7XG4gICAgICAgIHJldHVybiBgPHRzcGFuIGR5PVwiMWVtXCIgeD1cIjBcIj48MSU8L3RzcGFuPiA8dHNwYW4gY2xhc3M9XCJzbWFsbGVyXCI+JHtwcm9wcy5vZl9wZWFrX3RleHR9PC90c3Bhbj5gXG4gICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAxMDApIHtcbiAgICAgICAgcmV0dXJuIGA8dHNwYW4gZHk9XCIxZW1cIiB4PVwiMFwiPiR7cHJvcHMuYXRfcGVha190ZXh0fTwvdHNwYW4+YFxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VSYW5nZUJveChvcHRzKSB7XG4gIHZhciBsb24wID0gb3B0c1swXVswXTtcbiAgdmFyIGxvbjEgPSBvcHRzWzFdWzBdO1xuICB2YXIgbGF0MCA9IG9wdHNbMF1bMV07XG4gIHZhciBsYXQxID0gb3B0c1sxXVsxXTtcblxuICAvLyB0byBjcm9zcyBhbnRpbWVyaWRpYW4gdy9vIGFtYmlndWl0eVxuICBpZiAobG9uMCA+IDAgJiYgbG9uMSA8IDApIHtcbiAgICBsb24xICs9IDM2MDtcbiAgfVxuXG4gIC8vIHRvIG1ha2UgbGF0IHNwYW4gdW5hbWJpZ3VvdXNcbiAgaWYgKGxhdDAgPiBsYXQxKSB7XG4gICAgdmFyIHRtcCA9IGxhdDA7XG4gICAgbGF0MCA9IGxhdDE7XG4gICAgbGF0MSA9IHRtcDtcbiAgfVxuXG4gIHZhciBkbG9uNCA9IChsb24xIC0gbG9uMCkgLyA0O1xuXG4gIHJldHVybiB7XG4gICAgdHlwZTogJ1BvbHlnb24nLFxuICAgIGNvb3JkaW5hdGVzOiBbW1xuICAgICAgW2xvbjAsIGxhdDBdLFxuICAgICAgW2xvbjAsIGxhdDFdLFxuICAgICAgW2xvbjAgKyBkbG9uNCwgbGF0MV0sXG4gICAgICBbbG9uMCArIDIgKiBkbG9uNCwgbGF0MV0sXG4gICAgICBbbG9uMCArIDMgKiBkbG9uNCwgbGF0MV0sXG4gICAgICBbbG9uMSwgbGF0MV0sXG4gICAgICBbbG9uMSwgbGF0MF0sXG4gICAgICBbbG9uMSAtIGRsb240LCBsYXQwXSxcbiAgICAgIFtsb24xIC0gMiAqIGRsb240LCBsYXQwXSxcbiAgICAgIFtsb24xIC0gMyAqIGRsb240LCBsYXQwXSxcbiAgICAgIFtsb24wLCBsYXQwXSxcbiAgICBdXSxcbiAgfTtcbn1cbmV4cG9ydCBkZWZhdWx0IEdsb2JhbFJhdGVNYXA7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/lib/chart.js\n");

/***/ })

})